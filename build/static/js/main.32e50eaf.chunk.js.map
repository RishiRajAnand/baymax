{"version":3,"sources":["assets/images/logo.jpg","assets/images/corousal11.jpg","assets/images/corousal22.jpg","assets/images/corousal33.jpg","assets/images/corousal44.jpg","state/index.js","state/auth/actions.js","state/auth/reducers.js","utils/roles.js","state/product/reducers.js","state/product/actions.js","state/reducers.js","routes/base-styles.js","components/content.js","utils/services.js","state/registration/queries.js","views/appSettings/brandSettings/index.js","views/appSettings/index.js","components/header.js","state/auth/hooks/useLogin.js","views/login/containers/container.js","components/form/formGroup.js","components/theme.js","components/form/error.js","views/login/containers/form.js","components/spinner.js","views/login/index.js","utils/departmentList.js","state/registration/hooks/useDoctorRegistration.js","views/admin/addDoctor/index.js","state/appointment/queries.js","state/appointment/hooks/useBookAppointment.js","state/patientSearch/queries.js","state/patientSearch/hooks/useGetAllDoctorByDepartment.js","state/patientSearch/hooks/useGetAllDoctors.js","state/patientSearch/hooks/usePatientSearchbyId.js","views/patientDetails/index.js","utils/timeSlot.js","utils/constants.js","views/appointment/components/appointmentCardPrint.js","views/appointment/index.js","state/pharmacy/queries.js","state/pharmacy/hooks/useGetAllPharmacyMedicines.js","state/addMedicine/queries.js","state/addMedicine/hooks/useSearchTest.js","views/billing/components/addItemModal.js","views/billing/components/billPrint.js","views/billing/components/finalCharges.js","state/billing/queries.js","state/billing/hooks/useGenerateBill.js","views/billing/services.js","views/billing/components/returnItemModal.js","utils/constantMessages.js","views/billing/index.js","views/billing/components/billSearch.js","views/canteen/index.js","views/canteen/canteenStock/index.js","state/appointment/hooks/useGetAppointmentsByDoctorId.js","state/appointment/hooks/useGetAppointmentByPatientId.js","views/doctorAppointment/index.js","state/addMedicine/hooks/useAddMedicine.js","state/addMedicine/hooks/useSearchMedicine.js","views/medicine/addMedicine/index.js","state/addMedicine/hooks/useAddTest.js","views/medicine/addTest/index.js","views/package/index.js","views/patientSearch/components/viewPatientRecords.js","views/patientSearch/components/patientSearchComponent.js","state/patientSearch/hooks/usePatientSearchByName.js","views/patientSearch/index.js","views/pharmacy/index.js","state/prescription/queries.js","state/prescription/hooks/useSavePrescription.js","views/prescription/index.js","views/registration/index.js","views/home/homescreen/index.js","state/pharmacy/hooks/useGetMedicinedetail.js","views/pharmacy/addNewMedicine/index.js","views/pharmacy/manageMedicine/index.js","state/pharmacy/hooks/UseGetAllPurchaseOrders.js","state/pharmacy/hooks/useDeletePurchaseOrder.js","views/pharmacy/purchaseOrderList/index.js","state/pharmacy/hooks/useGetAllSupplier.js","state/pharmacy/hooks/useGetPurchaseOrderDetails.js","views/pharmacy/newPurchaseOrder/index.js","views/pharmacy/indentPreparations/index.js","views/pharmacy/manageSupplier/index.js","views/pharmacy/indentPreparations/indentList/index.js","views/certificates/index.js","views/package/newPackage/index.js","views/inProgress/index.js","state/prescription/hooks/useGetPrescriptionByAppointmentId.js","views/prescription/printPrescription/index.js","views/prescription/viewPrescription/index.js","routes/allRoutesData.js","routes/routeResolver.js","views/billSearch/components/mainBillView.js","views/billSearch/index.js","views/admin/viewDoctors/index.js","views/reports/index.js","views/home/index.js","routes/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","LOGIN","LOGOUT","INITIAL_STATE","logged","username","roles","state","action","type","payload","list","auth","product","authReducer","productReducer","BaseStyles","createGlobalStyle","reset","Content","styled","div","api","url","token","registration","body","axios","post","then","res","data","catch","err","getBrandDetails","get","doctorsRegistration","BrandSettings","props","Form","useForm","form","useState","branddetails","setBrandDetails","useEffect","Array","isArray","length","setFieldsValue","companyname","companyName","companyaddress","companyAddress","gstin","regNo","contactNo","contact","layout","onFinish","values","console","log","saveBrandDetails","id","email","notification","message","description","duration","Item","name","label","placeholder","style","width","htmlType","AppSettings","selectedMenuItem","setSelectedMenuItem","gutter","span","onClick","e","key","selectedKeys","mode","Nav","fixed","Right","nav","Title","h1","Header","dispatch","isModalVisible","setIsModalVisible","menu","Link","to","handleLogout","DropdownMenu","overlay","border","padding","SettingFilled","fontSize","verticalAlign","a","title","visible","footer","onOk","onCancel","useProducts","isLoading","setIsLoading","actions","password","Container","colors","primary","secondary","default","gradient","bg","forms","labelColor","light","errorColor","danger","theme","Object","freeze","viewports","smartphone","tablet","desktop","labelCol","wrapperCol","tailLayout","LoginForm","fontFamily","marginBottom","textAlign","backgroundColor","color","initialValues","remember","onSubmit","onFinishFailed","errorInfo","rules","required","Password","BackDrop","Spinner","Loading","show","allowedRoles","Login","location","history","from","pathname","useLogin","setLogin","push","roleName","checkAllowedUsers","departments","useDoctorRegistration","status","setStatus","response","Option","Select","validateMessages","types","number","range","department","map","speciality","qualification","AddDoctor","queryParams","queryString","parse","search","doctorId","user","doctorName","experience","highestQualification","designation","consulationCharge","icon","OrderedListOutlined","formData","min","max","offset","bookAppointment","getAppointmentByDoctorId","getAppointmentByPatientId","patientId","useBookAppointment","getAllPatients","getPatientByName","patientName","getPatientById","getAllDoctors","useGetAllDoctorByDepartment","patients","setPatients","deptname","useGetAllDoctors","usePatientById","PatientDetails","prop","bordered","patientDetails","visitType","age","contactNum","text","timeSlot","date","startHours","startminutes","endHours","endMinutes","interval","startDate","Date","setHours","setMinutes","endDate","start","getTime","end","timeSlots","hospitalDetails","AppointmentCardPrint","appointmentDetails","this","marginTop","display","flexDirection","justifyContent","alignItems","margin","src","logo","marginLeft","fontWeight","address","height","background","float","dateAndTime","React","Component","Search","Input","disabledDate","current","moment","endOf","Appointment","doctorsList","Map","selectedDepartment","setSelectedDepartment","selectedDate","setSelectedDate","componentRef","useRef","selectedDoctor","setSelectedDoctor","selectedTimeSlot","setSelectedTimeSlot","doctors","setRequest","usePatientSearchbyId","setPatientSearchById","doctorBydepartment","callDoctorByDepartment","setBookAppointment","handlePrint","useReactToPrint","content","doctor","set","MainButton","appointmentCard","size","concat","toDateString","extra","val","toLocaleTimeString","format","allowClear","enterButton","onSearch","className","fullscreen","onSelect","showSearch","defaultValue","onChange","optionFilterProp","filterOption","input","option","toLowerCase","indexOf","ref","savePharmacyMedicine","saveSupplier","getCategoriesList","savePurchaseOrder","deletePurchaseOrder","delete","getPharmacyMedicineList","getPharmacyMedicineDetail","medicineId","useGetPharmacyMedicines","medicines","setMedicineList","addMedicine","addTest","useTestSearch","AddItem","medicineMap","testMap","options","selected","setSelected","setMedicineSearch","tests","setTestSearch","quantity","amount","test","testName","forEach","medicine","medicineName","obj","itemId","itemType","medicinedetail","salePrice","testdetail","price","onItemAdded","dropdownClassName","autoFocus","dropdownMatchSelectWidth","inputValue","toUpperCase","BillPrint","itemList","isGSTIncluded","billId","paymentMode","finalCharges","todaysDate","billDate","itemArray","item","index","gst","discount","total","cellPadding","cellSpacing","colSpan","totalAmount","totalDiscount","totalGST","FinalCharges","formatter","parser","replace","onDiscountChange","saveGenerateBill","useSaveGenerateBill","responseObj","setResponseObj","getBillDetails","searchValue","searchBy","searchURL","EditableContext","components","row","component","cell","editable","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","focus","toggleEdit","save","validateFields","childNode","onPressEnter","onBlur","paddingRight","ReturnItem","errorMessagesRows","returnButton","printButton","backToMainButton","initialRowData","setInitialRowData","setData","errorMessage","setErrorMessage","billGeneratedStatus","setBillGeneratedStatus","selectedRowKeys","setSelectedRowKeys","rowsData","columns","handleChangeFormField","newData","findIndex","initialItemValue","temp","splice","col","onCell","listOfErrors","hasOwnProperty","selectedRows","filter","d","includes","billType","createdAt","paymentStatus","gender","billDetailList","billItem","itemName","billMapId","cost","concessionPercentage","gstPercentage","mrp","concessionType","purchaseType","onItemsReturned","updateMainBill","hasSelected","rowSelection","dataSource","pagination","filters","sorter","rowClassName","SERVER_ERROR","EditableRow","EditableCell","Billing","getFinalCharges","discountedAmount","toFixed","calculateTotalCharges","defaultbillDetails","printBillButton","generateBillButton","billDetails","totalCost","newPatientSwitch","newPatientFormValues","newPatientForm","getFieldsValue","setPatientDetails","generateBillStatus","setBillDetails","setState","context","setPaymentMode","setIsGSTIncluded","isReturnModalVisible","setIsReturnModalVisible","setBillDate","setFinalCharges","patientInfo","patientSearch","searchType","dataList","Number","parseInt","itemFormValue","Math","random","tempDataList","tempData","charges","compare","b","multiple","render","onConfirm","handleDelete","returnedRows","itemKeysToRemove","mainRow","mainIndex","returnedRow","momentDate","dateString","checked","target","discountValue","Group","RangePicker","DatePicker","BillSearchComp","filterValue","setfilterValue","inputSearch","actualDates","toDate","date2","convertToActualDate","compact","renderTitle","href","rel","renderItem","count","UserOutlined","Canteen","PlusOutlined","autoComplete","List","fields","add","remove","field","align","fieldKey","MinusCircleOutlined","block","shape","DownloadOutlined","defaultSortOrder","cat","onFilter","category","sortDirections","CanteenStock","forceUpdate","setName","items","setItems","onNameChange","event","addItem","dropdownRender","flexWrap","flex","cursor","shouldUpdate","disabled","isFieldsTouched","getFieldsError","errors","useGetAppointmentByDoctorId","useGetAppointmentByPatientId","DoctorAppointment","tags","tag","proceed","appointmentId","patientAppointments","setAppointmentByPatientId","setFilter","appointments","setAppointmentByDoctorId","appointment","time","appointmentDate","useAddMedicine","useMedicineSearch","AddMedicine","strength","medicineType","prefix","useAddTest","AddTest","useSearchTest","packageName","packageEndDate","Package","ViewPatientRecords","dataModal","userDetails","columnsModal","keys","PatientSearchComp","usePatientByName","PatientSearch","isPatientRecordModalVisible","setIsPatientRecordModalVisible","showPatient","setShowPatient","allPatients","setAllPatients","dateFilteredPatient","setDateFilteredPatient","setPatientSearchbyId","currentPatientDetails","setCurrentPatientDetails","currentPatientAppointments","setCurrentPatientAppointments","patientDetailsByName","setPatientSearchbyName","street","patient","searchFilter","Pharmacy","savePrescription","getPrescriptionByAppointmentId","useSavePrescription","Prescription","optionsTests","submitted","setSubmitted","medicineForm","vitalsForm","adviceForm","setSavePrescription","medicineList","users","testList","patientVitals","appointmentDto","weight","Bp","bp","temprature","temparature","advise","advice","prescribedMedsDtoList","prescribedTestingDtoList","medName","days","numberOfDays","dosage","comment","comments","dateOfBooking","handleSearch","handleTestSearch","has","formActions","PrinterOutlined","TextArea","PhonePrefixSelector","noStyle","Registration","phone","alternatecontact","country","visit","recieptId","errr","addonBefore","HomeScreen","autoplay","backgroundImage","corousal1","corousal2","corousal3","corousal4","useGetPharmacyMedicineDetail","AddNewMedicine","newItemUnit","setNewItemUnit","itemUnits","setItemUnits","medicineDetail","setRequest1","genericName","boxSize","expDate","expiryDate","medicineShelf","details","unit","triggerValue","parseFloat","image","supplierPrice","suppliersPrice","tax","supplierName","availability","stockQuantity","onItemUnitNameChange","addItemCategory","saveItemCategory","categoryId","categoryName","addItemUnit","saveItemUnit","unitName","clearForm","rows","Text","Typography","ManageMedicines","medicineData","setMedicineData","itemCategories","setItemCategories","useGetAllPharmacyMedicines","getAllMedicines","deleteMedicineRecord","deleteMedicine","UseGetAllPurchaseOrder","useDeletePurchaseOrder","resolveTag","PurchaseOrder","orderDate","deliveryDate","supplier","purchaseOrderId","storeName","rol","productDetails","setDeletePurchaseOrder","purchaseOrders","setGetAllPurchaseOrder","order","invoiceNumber","store","useGetAllSuppliers","useGetPurchaseOrderDetails","NewPurchaseOrder","supplierOptions","purchaseDetailsForm","productListForm","suppliers","setSupplierSearch","orderDetail","setGetPurchaseOrderDetails","productList","productId","productName","purchaseCost","batchNumber","purchaseDetails","onSearchProduct","minWidth","IndentPreparation","ManageSupplier","selectedRowId","setSelectedRowId","supplierId","phoneNumber","editSupplier","IndentList","Certificates","setValue","NewPackage","InProgress","useGetPrescriptionByAppointmentId","PrintPrescription","medicineTable","testTable","class","dateOfResult","reportDesc","testDesc","cellpadding","cellspacing","temperature","diseaseDesc","medicinecolumns","testcolumns","ViewPrescription","testData","prescriptionDetails","setPrescriptionDetails","addNewMedicine","link","manageMedicines","purchaseOrderList","newPurchaseOrder","manageSuppliers","billing","billSearch","reports","doctorRoutes","pharmacyRoutes","inventoryRoutes","receptionRoutes","upcomingRoutes","adminRoutes","MainBillView","billItemList","BillSearch","searchCriteria","setSearchFilter","mainBillViewButton","fromDate","ViewDoctors","doctorList","setDoctorList","Reports","linedata","setLineData","asyncFetch","fetch","json","error","lineConfig","xField","yField","xAxis","tickCount","slider","barconfig","year","seriesField","legend","position","config","appendPadding","angleField","colorField","radius","_ref","percent","interactions","ringconfig","autoFit","dateFilters","precision","Layout","Sider","Footer","SubMenu","Menu","Home","path","match","realRoutes","collapsed","setCollapsed","itemSelected","setItemSelected","routes","setRoutes","roleList","role","getRoutes","entries","childroutes","route","routeObject","subRoutesByRole","trigger","collapsible","defaultSelectedKeys","createElement","MenuUnfoldOutlined","MenuFoldOutlined","minHeight","overflow","Route","exact","PackageManagement","Root","AUTH_INITIAL_STATE","PRODUCT_INITIAL_STATE","reducers","Switch","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","document","getElementById","URL","process","origin","addEventListener","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.32e50eaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e8f986ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal11.05e570b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal22.44b12027.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal33.c1868764.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal44.2328ea2a.jpg\";","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export const LOGIN = 'auth/LOGIN';\r\nexport const LOGOUT = 'auth/CLEAR_USER';\r\n\r\nexport const login = (payload) => ({\r\n  type: LOGIN,\r\n  payload\r\n});\r\n\r\nexport const logout = () => ({\r\n  type: LOGOUT,\r\n});\r\n","import { allRoles, INVENTORY } from '../../utils/roles';\r\nimport { LOGIN, LOGOUT } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  logged: false,\r\n  username: \"\",\r\n  roles: [INVENTORY]\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return {\r\n        logged: true,\r\n        username: action.payload,\r\n        roles: [action.payload],\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...INITIAL_STATE,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const DOCTOR = \"doctor\";\r\nexport const PHARMACY = \"pharmacy\";\r\nexport const ADMIN = \"admin\";\r\nexport const RECEPTION = \"reception\";\r\nexport const INVENTORY = \"inventory\";\r\nexport const UPCOMING = \"upcoming\";\r\n\r\nexport const allRoles = [RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING, INVENTORY];","import { LIST_PRODUCTS } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  list: null,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LIST_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const LIST_PRODUCTS = 'product/LIST_PRODUCTS';\r\n\r\nexport const listProducts = payload => ({\r\n  type: LIST_PRODUCTS,\r\n  payload,\r\n});\r\n","import authReducer from './auth/reducers';\r\nimport productReducer from './product/reducers';\r\n\r\nexport default ({ auth, product }, action) => ({\r\n  auth: authReducer(auth, action),\r\n  product: productReducer(product, action),\r\n});\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst BaseStyles = createGlobalStyle`\r\n    ${reset}\r\n    body { margin: 0 };\r\n    html { font-family: 'Montserrat', sans-serif; }\r\n    * { box-sizing: border-box; };\r\n`;\r\n\r\nexport default BaseStyles;\r\n","import styled from 'styled-components';\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Content;\r\n","const api = {\r\n  // url: 'http://ec2-18-221-50-135.us-east-2.compute.amazonaws.com:8080',\r\n  url: 'http://localhost:8080',\r\n  token: '',\r\n};\r\n\r\nexport default api;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const registration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/patient/registration`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const saveBrandDetails = (body) => {\r\n  return axios\r\n    .post(`${api.url}/SettingsController/updateBrandDetails`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getBrandDetails = (body) => {\r\n  return axios\r\n    .get(`${api.url}/SettingsController/getBrandDetails`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\nexport const doctorsRegistration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/doctorService/createNewDoctorsRecord`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getDoctorDetailById = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorDetailById?doctorId=` +  doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Menu } from 'antd';\r\nimport { Form, Input, Button, Radio, InputNumber, notification } from 'antd';\r\nimport { getBrandDetails, saveBrandDetails } from '../../../state/registration/queries';\r\nconst BrandSettings = (props) => {\r\n    const [form] = Form.useForm();\r\n    const [branddetails, setBrandDetails] = useState({});\r\n    useEffect(() => {\r\n        getBrandDetail();\r\n    }, []);\r\n\r\n    function getBrandDetail() {\r\n        getBrandDetails().then(data => {\r\n            if (data && Array.isArray(data) && data.length > 0) {\r\n                form.setFieldsValue({\r\n                    companyname: data[0].companyName,\r\n                    companyaddress: data[0].companyAddress,\r\n                    gstin: data[0].gstin,\r\n                    regNo: data[0].regNo,\r\n                    contactNo: data[0].contact,\r\n                });\r\n                setBrandDetails(data[0]);\r\n            }\r\n        }).catch(err => {\r\n\r\n        })\r\n    }\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values);\r\n        const body = {\r\n            id: branddetails.id,\r\n            companyName: values.companyname,\r\n            companyAddress: values.companyaddress,\r\n            email: values.email,\r\n            gstin: values.gstin,\r\n            regNo: values.regNo,\r\n            contact: values.contactNo,\r\n        };\r\n\r\n        saveBrandDetails(body).then(data=> {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Brand details changed successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err=> {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while saving Item`,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    return (\r\n        <>\r\n            <Form\r\n                layout='vertical'\r\n                onFinish={onFinish}\r\n                form={form}\r\n            >\r\n                <Form.Item name=\"companyname\" label=\"Company's name\">\r\n                    <Input placeholder=\"Company's name to be printed in bills / receipts and certificates\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"companyaddress\" label=\"Company's address\">\r\n                    <Input placeholder=\"Company's address\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"gstin\" label=\"Company's GSTIN\">\r\n                    <Input placeholder=\"Company's GSTIN\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"regNo\" label=\"Company's Reg. No\">\r\n                    <Input placeholder=\"Company's Reg. No\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"contactNo\" label=\"Contact Number\">\r\n                    <InputNumber style={{ width: '100%' }} placeholder=\"Contact Number\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button htmlType=\"submit\" type=\"primary\">Submit</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\nexport default BrandSettings;","import React, { useState, useEffect } from 'react';\r\nimport { Menu, Row, Col } from 'antd';\r\nimport BrandSettings from './brandSettings';\r\nconst AppSettings = (props) => {\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState(\"brand\");\r\n    let form = \"\";\r\n\r\n    const handleClick = e => {\r\n        setSelectedMenuItem(e.key);\r\n    };\r\n\r\n    if (selectedMenuItem == \"brand\") {\r\n        form = <BrandSettings />;\r\n    }\r\n    return (\r\n        <div>\r\n            <Row gutter={16}>\r\n                <Col span={4}>\r\n                    <Menu style={{ width: '100%' }} onClick={handleClick} selectedKeys={[selectedMenuItem]} mode=\"inline\">\r\n                        <Menu.Item key=\"brand\">Brand</Menu.Item>\r\n                        {/* <Menu.Item key=\"profile\">Profile</Menu.Item> */}\r\n                    </Menu>\r\n                </Col>\r\n                <Col span={18}>{form}</Col>\r\n            </Row>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default AppSettings;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { useStateValue } from '../state';\r\nimport { logout } from '../state/auth/actions';\r\nimport { PageHeader, Menu, Dropdown, Button, Tag, Typography, Row, Modal } from 'antd';\r\nimport { SettingFilled } from '@ant-design/icons';\r\nimport AppSettings from '../views/appSettings';\r\n// import Button from './button';\r\n\r\nconst Nav = styled.div`\r\n  height: 50px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  background: #001529;\r\n  position: ${props => (props.fixed ? 'fixed' : 'relative')};\r\n`;\r\n\r\nconst Right = styled.nav`\r\n  flex: 1;\r\n  text-align: right;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n  color: white;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Header = props => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item>\r\n        <a onClick={() => setIsModalVisible(true)}>\r\n          Settings\r\n        </a>\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <a>\r\n          About Us\r\n        </a>\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <a>\r\n          Help\r\n        </a>\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <Link to={`/`}>\r\n          <a onClick={() => handleLogout()}>\r\n            Log Out\r\n        </a>\r\n        </Link>\r\n\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n  const DropdownMenu = () => (\r\n    <Dropdown key=\"more\" overlay={menu}>\r\n      <Button\r\n        style={{\r\n          border: 'none',\r\n          padding: 0,\r\n          width: '5em'\r\n        }}\r\n      >\r\n        <SettingFilled\r\n          style={{\r\n            fontSize: 20,\r\n            verticalAlign: 'top',\r\n          }}\r\n        />\r\n      </Button>\r\n    </Dropdown>\r\n  );\r\n  const handleLogout = async () => {\r\n    await dispatch(logout());\r\n  };\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n  return (\r\n    <Nav>\r\n      <Title><Link to={`/home`}>BAYMAX</Link></Title>\r\n      <Right>\r\n        <DropdownMenu key=\"more\" />\r\n        {/* <Link to={`/`} dis><Button gradient onClick={() => handleLogout()}>\r\n          Logout\r\n          </Button>\r\n        </Link> */}\r\n      </Right>\r\n      <Modal  width={1000} title=\"My Settings\" visible={isModalVisible} footer={null} onOk={() => { setIsModalVisible(false) }} onCancel={() => { setIsModalVisible(false) }}>\r\n        <AppSettings />\r\n      </Modal>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\nimport { useStateValue } from '../../index';\r\nimport { login } from '../actions';\r\n\r\nconst useProducts = () => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const formData = async ({ values, actions }) => {\r\n    setIsLoading(true);\r\n\r\n    setIsLoading(false);\r\n    if (values.username !== '' && values.password !== '') {\r\n      dispatch(login(values.username));\r\n    }\r\n  };\r\n\r\n  return [auth, formData, isLoading];\r\n};\r\n\r\nexport default useProducts;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: calc(100vh - 50px);\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\n\r\nconst formGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default formGroup;\r\n","const colors = {\r\n  primary: '#7159c1',\r\n  secondary: '#9b49c1',\r\n  default: '#fff',\r\n  gradient:\r\n    'linear-gradient(112deg, rgba(113,89,193,1) 0%, rgba(155,73,193,1) 100%);',\r\n  bg: 'linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%);',\r\n};\r\n\r\nconst viewports = {\r\n  smartphone: '360px',\r\n  tablet: '720px',\r\n  desktop: '1280px',\r\n};\r\n\r\nconst forms = {\r\n  labelColor: colors.light,\r\n  errorColor: colors.danger,\r\n};\r\n\r\nconst theme = Object.freeze({\r\n  colors,\r\n  forms,\r\n  viewports,\r\n});\r\n\r\nexport default theme;\r\n","import styled from 'styled-components';\r\nimport theme from '../theme';\r\n\r\nconst ErrorText = styled.span`\r\n  text-align: center;\r\n  color: ${theme.forms.errorColor};\r\n`;\r\n\r\nexport default ErrorText;\r\n","/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react';\r\nimport { Formik } from 'formik';\r\n// import Button from '../../../components/button';\r\nimport FormGroup from '../../../components/form/formGroup';\r\n// import Input from '../../../components/form/input';\r\nimport ErrorText from '../../../components/form/error';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { span: 24 },\r\n};\r\n\r\nconst LoginForm = (props) => {\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n    props.onSubmit(values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} /> */}\r\n      <h1 style={{ width: \"100%\", fontFamily: 'Georgia, sans-serif', padding: \"20px\", marginBottom: '20px', textAlign: 'center', backgroundColor: '#001529', color: \"white\", fontSize: '32px' }}>Baymax Inventory</h1>\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          placeholder=\"Username\"\r\n          rules={[{ required: true, message: 'Please input your username!' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          rules={[{ required: true, message: 'Please input your password!' }]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" style={{ width: '100%' }} htmlType=\"submit\">\r\n            Submit\r\n        </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\n// const LoginForm = props => (\r\n\r\n//   return (<>\r\n//   <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n//   <Form\r\n//     {...layout}\r\n//     name=\"basic\"\r\n//     initialValues={{ remember: true }}\r\n//     onFinish={onFinish}\r\n//     onFinishFailed={onFinishFailed}\r\n//   >\r\n//     <Form.Item\r\n//       label=\"Username\"\r\n//       name=\"username\"\r\n//       rules={[{ required: true, message: 'Please input your username!' }]}\r\n//     >\r\n//       <Input />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item\r\n//       label=\"Password\"\r\n//       name=\"password\"\r\n//       rules={[{ required: true, message: 'Please input your password!' }]}\r\n//     >\r\n//       <Input.Password />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n//       <Checkbox>Remember me</Checkbox>\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout}>\r\n//       <Button type=\"primary\" htmlType=\"submit\">\r\n//         Submit\r\n//         </Button>\r\n//     </Form.Item>\r\n//   </Form>\r\n//   <Formik initialValues={{ username: '', password: '' }} {...props}>\r\n//     {({ handleChange, handleBlur, values, handleSubmit, errors }) => (\r\n//       <FormGroup>\r\n//         {errors.genericError && <ErrorText>{errors.genericError}</ErrorText>}\r\n//         <Input\r\n//           name=\"username\"\r\n//           id=\"username\"\r\n//           placeholder=\"Username\"\r\n//           onChange={handleChange('username')}\r\n//           onBlur={handleBlur('username')}\r\n//           error={errors.username}\r\n//           value={values.username}\r\n//         />\r\n//         <Input\r\n//           id=\"password\"\r\n//           name=\"password\"\r\n//           type=\"password\"\r\n//           placeholder=\"Password\"\r\n//           onChange={handleChange('password')}\r\n//           onBlur={handleBlur('password')}\r\n//           error={errors.password}\r\n//           value={values.password}\r\n//         />\r\n//         <Button primary large onClick={handleSubmit} style={{ background: 'skyblue', color: 'white' }} type=\"submit\">\r\n//           Login\r\n//         </Button>\r\n//       </FormGroup>\r\n//     )}\r\n//   </Formik>\r\n// </>);\r\n\r\n// );\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst BackDrop = styled.div`\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.67);\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid ${theme.colors.primary};\r\n  border-radius: 50%;\r\n  width: 120px;\r\n  height: 120px;\r\n  animation: spin 2s linear infinite;\r\n  margin: 40vh auto;\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loading = props => {\r\n  return (\r\n    props.show && (\r\n      <BackDrop>\r\n        <Spinner />\r\n      </BackDrop>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport useLogin from '../../state/auth/hooks/useLogin';\r\n\r\nimport Container from './containers/container';\r\nimport Form from './containers/form';\r\nimport Spinner from '../../components/spinner';\r\nimport { notification } from 'antd';\r\nimport { ADMIN, DOCTOR, INVENTORY, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\n\r\nconst allowedRoles = [DOCTOR, PHARMACY, RECEPTION, UPCOMING, ADMIN, INVENTORY]\r\nconst Login = ({ location, history }) => {\r\n  const { from } = location.state || { from: { pathname: '/home' } };\r\n  const [auth, setLogin, isLoading] = useLogin();\r\n\r\n  useEffect(() => {\r\n    if (auth.logged) {\r\n      history.push(from);\r\n    }\r\n  }, [auth, from, history]);\r\n\r\n  function checkAllowedUsers(values) {\r\n    for (const roleName of allowedRoles) {\r\n      if (roleName == values.username && roleName == values.password) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  return (\r\n    <Container>\r\n      <Spinner show={isLoading} />\r\n      <Form onSubmit={(values, actions) => {\r\n        console.log(\"values\", values);\r\n        console.log(\"actions\", actions);\r\n        if (checkAllowedUsers(values)) {\r\n          setLogin({ values, actions });\r\n        } else {\r\n          notification[\"error\"]({\r\n            message: 'Invalid username or password!',\r\n            description:\r\n              'Please check the username and password and try again.',\r\n            duration: 5,\r\n          });\r\n        }\r\n\r\n      }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export const departments = [\r\n    \"Accident and emergency (A&E)\",\r\n    \"Admissions\",\r\n    \"Anesthetics\",\r\n    \"Breast Screening\",\r\n    \"Burn Center\",\r\n    \"Cardiology\",\r\n    \"Central Sterile Services Department (CSSD)\",\r\n    \"Chaplaincy\",\r\n    \"Coronary Care Unit (CCU)\",\r\n    \"Critical Care\",\r\n    \"Diagnostic Imaging\",\r\n    \"Discharge Lounge\",\r\n    \"Elderly services\",\r\n    \"Finance Department\",\r\n    \"Gastroenterology\",\r\n    \"General Services\",\r\n    \"General Surgery\",\r\n    \"Gynecology\",\r\n    \"Haematology\",\r\n    \"Health & Safety\",\r\n    \"Intensive Care Unit (ICU)\",\r\n    \"Human Resources\",\r\n    \"Infection Control\",\r\n    \"Information Management\",\r\n    \"Maternity\",\r\n    \"Medical Records\",\r\n    \"Microbiology\",\r\n    \"Neonatal\",\r\n    \"Nephrology\",\r\n    \"Neurology\",\r\n    \"Nutrition and Dietetics\",\r\n    \"Obstetrics/Gynecology\",\r\n    \"Occupational Therapy\",\r\n    \"Oncology\",\r\n    \"Ophthalmology\",\r\n    \"Orthopaedics\",\r\n    \"Otolaryngology (Ear, Nose, and Throat)\",\r\n    \"Pain Management\",\r\n    \"Patient Accounts\",\r\n    \"Patient Services\",\r\n    \"Pharmacy\",\r\n    \"Physiotherapy\",\r\n    \"Purchasing & Supplies\",\r\n    \"Radiology\",\r\n    \"Radiotherapy\",\r\n    \"Renal\",\r\n    \"Rheumatology\",\r\n    \"Sexual Health\",\r\n    \"Social Work\",\r\n    \"Urology\"];\r\n\r\nexport const doctorsSpeciality = [\"Allergist\",\r\n    \"Anaesthesiologist\",\r\n    \"Andrologist\",\r\n    \"Cardiologist\",\r\n    \"Cardiac Electrophysiologist\",\r\n    \"Dermatologist\",\r\n    \"Emergency Room (ER) Doctors\",\r\n    \"Endocrinologist\",\r\n    \"Epidemiologist\",\r\n    \"Family Medicine Physician\",\r\n    \"Gastroenterologist\",\r\n    \"Geriatrician\",\r\n    \"Hyperbaric Physician\",\r\n    \"Hematologist\",\r\n    \"Hepatologist\",\r\n    \"Immunologist\",\r\n    \"Infectious Disease Specialist\",\r\n    \"Intensivist\",\r\n    \"Internal Medicine Specialist\",\r\n    \"Maxillofacial Surgeon / Oral Surgeon\",\r\n    \"Medical Examiner\",\r\n    \"Medical Geneticist\",\r\n    \"Neonatologist\",\r\n    \"Nephrologist\",\r\n    \"Neurologist\",\r\n    \"Neurosurgeon\",\r\n    \"Nuclear Medicine Specialist\",\r\n    \"Obstetrician/Gynecologist (OB/GYN)\",\r\n    \"Occupational Medicine Specialist\",\r\n    \"Oncologist\",\r\n    \"Ophthalmologist\",\r\n    \"Orthopedic Surgeon / Orthopedist\",\r\n    \"Otolaryngologist (also ENT Specialist)\",\r\n    \"Parasitologist\",\r\n    \"Pathologist\",\r\n    \"Perinatologist\",\r\n    \"Periodontist\",\r\n    \"Pediatrician\",\r\n    \"Physiatrist\",\r\n    \"Plastic Surgeon\",\r\n    \"Psychiatrist\",\r\n    \"Pulmonologist\",\r\n    \"Radiologist\",\r\n    \"Rheumatologist\",\r\n    \"Sleep Doctor / Sleep Disorders Specialist\",\r\n    \"Spinal Cord Injury Specialist\",\r\n    \"Sports Medicine Specialist\",\r\n    \"Surgeon\",\r\n    \"Thoracic Surgeon\",\r\n    \"Urologist\",\r\n    \"Vascular Surgeon\",\r\n    \"Veterinarian\",\r\n    \"Palliative Care Specialist\",\r\n    \"Acupuncturist\",\r\n    \"Audiologist\",\r\n    \"Ayurvedic Practioner\",\r\n    \"Chiropractor\",\r\n    \"Diagnostician\",\r\n    \"Homeopathic Doctor\",\r\n    \"Microbiologist\",\r\n    \"Naturopathic Doctor\",\r\n    \"Pharmacist\",\r\n    \"Physiotherapist\",\r\n    \"Podiatrist / Chiropodist\",\r\n    \"Registered Massage Therapist\"];\r\n\r\nexport const qualifications = [\"MS\", \"MD\", \"MBBS\"];\r\n","import { useState } from 'react';\r\nimport { doctorsRegistration } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useDoctorRegistration = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await doctorsRegistration(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useDoctorRegistration;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport { OrderedListOutlined } from '@ant-design/icons';\r\nimport '../addDoctor/addDoctor.css';\r\nimport { departments, doctorsSpeciality, qualifications } from '../../../utils/departmentList';\r\nimport useDoctorRegistration from '../../../state/registration/hooks/useDoctorRegistration';\r\nimport { doctorsRegistration, getDoctorDetailById } from '../../../state/registration/queries';\r\nimport queryString from 'query-string';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\nconst speciality = doctorsSpeciality.map(speciality => <Option key={speciality}>{speciality}</Option>);\r\nconst qualification = qualifications.map(qualification => <Option key={qualification}>{qualification}</Option>);\r\n\r\n\r\nfunction handleChange(value) {\r\n    console.log(`Selected: ${value}`);\r\n}\r\n\r\nconst AddDoctor = ({ location, history }) => {\r\n    const [form] = Form.useForm();\r\n    const [status, isLoading, setRequest] = useDoctorRegistration();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.doctorId != null) {\r\n            getDoctorDetailById(queryParams.doctorId).then(data => {\r\n                form.setFieldsValue({\r\n                    user: {\r\n                        name: data.doctorName,\r\n                        department: data.department,\r\n                        experience: data.experience,\r\n                        speciality: data.speciality,\r\n                        highestQualification: data.highestQualification,\r\n                        designation: data.designation,\r\n                        consulationCharge: data.consulationCharge,\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        };\r\n        if (queryParams.mode == \"edit\" && queryParams.doctorId != null) {\r\n            body[\"doctorId\"] = queryParams.doctorId;\r\n        }\r\n        doctorsRegistration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `The Doctor has been ${(queryParams.mode == \"edit\" ? \"Edited\" : \"registered\" )} successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'Error while saving doctor details',\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/viewDoctors' });\r\n            }} type=\"dashed\" icon={<OrderedListOutlined />}>View doctors</Button>\r\n            <Form {...layout} form={form} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Department\" name={['user', 'department']}>\r\n                    <Select>\r\n                        {department}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'experience']} label=\"Experience\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item label=\"Specialization\" name={['user', 'speciality']}>\r\n                    <Select>\r\n                        {speciality}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Highest Qualification\" name={['user', 'highestQualification']}>\r\n                    <Select>\r\n                        {qualification}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'designation']} label=\"Designation\">\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'consulationCharge']} label=\"Consultation Charges\" rules={[{ type: 'number', min: 0, max: 10000 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddDoctor;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const bookAppointment = (body) => {\r\n  return axios\r\n    .post(`${api.url}/HMServiceController/createNewAppointment`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByDoctorId = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentList?numberOfDays=30&startIndex=0&pazeSize=30&doctorId=` + doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByPatientId = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentListByPatientId?numberOfDays=30&startIndex=0&pazeSize=30&patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};","import { useState } from 'react';\r\nimport { bookAppointment } from '../queries';\r\n\r\nconst useBookAppointment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await bookAppointment(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useBookAppointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getAllPatients = () => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientByName = (patientName) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientByName?patientName=` + patientName)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientById = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientById?patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n\r\nexport const getAllDoctors = () => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAllDoctorsByDepartment = (name) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsListByDepartment?departmentName=` + name)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n","import { useState } from 'react';\r\nimport { getAllDoctorsByDepartment } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctorByDepartment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (deptname) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctorsByDepartment(deptname);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctorByDepartment;\r\n","import { useState } from 'react';\r\nimport { getAllDoctors } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctors = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctors();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctors;\r\n","import { useState } from 'react';\r\nimport { getPatientById } from '../queries';\r\n\r\nconst usePatientById = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState({});\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientById(patientId);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientById;\r\n","import React from 'react';\r\nimport { Divider, Descriptions, Badge } from 'antd';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\n\r\nconst PatientDetails = (prop) => {\r\n    // const [patient, isLoading, setRequest] = usePatientSearchbyId();\r\n\r\n    // useEffect(() => {\r\n    //     if(prop.patientId != null) {\r\n    //         setRequest(prop.patientId);\r\n    //     }\r\n    // }, [prop.patientId]);\r\n\r\n    return (\r\n        <>\r\n            <Divider>Patient Details</Divider>\r\n            <Descriptions bordered>\r\n                <Descriptions.Item label=\"Name\">{prop.patientDetails.patientName}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{prop.patientDetails.visitType}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{prop.patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Contact\">{prop.patientDetails.contactNum}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"success\" text=\"Active\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n        </>);\r\n};\r\n\r\nexport default PatientDetails;\r\n","const timeSlot = (date, startHours, startminutes, endHours,endMinutes, interval) => {\r\n    // date.setHours(startTime);\r\n    let startDate = new Date(date);\r\n    startDate.setHours(startHours);\r\n    startDate.setMinutes(startminutes);\r\n    // date.setHours(endTime);\r\n    let endDate = new Date(date);\r\n    endDate.setHours(endHours);\r\n    endDate.setMinutes(endMinutes);\r\n    console.log(startDate);\r\n    console.log(endDate);\r\n    let start = startDate.getTime();\r\n    let end = endDate.getTime();\r\n    var timeSlots = [];\r\n\r\n    while (start < end) {\r\n        timeSlots.push([new Date(start), new Date(start += interval * 60000)]);\r\n    }\r\n    return timeSlots;\r\n}\r\n\r\nexport default timeSlot;","const hospitalDetails = {\r\n    companyName: 'GreenMart',\r\n    companyAddress: 'Buxar Baazar',\r\n    contact: '+91-9798421824',\r\n    regNo: '642/2021',\r\n    gstin: '283239823222',\r\n    email: 'dajdad@dnasa.com'\r\n};\r\n\r\nexport default hospitalDetails;","import React, { useRef } from 'react';\r\nimport { Descriptions, Divider } from 'antd';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class AppointmentCardPrint extends React.Component {\r\n    render() {\r\n        const appointmentDetails = this.props.appointmentDetails;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <div style={{ marginTop: '50px' }}>\r\n                        <h3 style={{ fontWeight: 'bold', fontSize: '30px' }}>Appointment Card</h3>\r\n                    </div>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ fontSize: '25px', float: 'left' }}>\r\n                            <p><b>Patient Name:</b> {appointmentDetails.patientName}</p>\r\n                            <p><b>Doctor Name:</b> {appointmentDetails.doctorName}</p>\r\n                            <p><b>Date:</b> {appointmentDetails.dateAndTime}</p>\r\n                            <p><b>Time Slot:</b> {appointmentDetails.timeSlot}</p>\r\n                            <p><b>Department: </b>{appointmentDetails.department}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { Button, Calendar, Card, Col, Divider, notification, Row, Select, Input, Form } from 'antd';\r\nimport moment from 'moment';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useBookAppointment from '../../state/appointment/hooks/useBookAppointment';\r\nimport useGetAllDoctorByDepartment from '../../state/patientSearch/hooks/useGetAllDoctorByDepartment';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport { departments } from '../../utils/departmentList';\r\nimport '../appointment/appointment.css';\r\nimport PatientDetails from '../patientDetails';\r\nimport timeSlot from '../../utils/timeSlot';\r\nimport { AppointmentCardPrint } from './components/appointmentCardPrint';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\n\r\nfunction disabledDate(current) {\r\n    // Can not select days before today and today\r\n    return current && current < moment().endOf('day');\r\n}\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\n\r\nconst Appointment = ({ location, history }) => {\r\n\r\n    let doctorsList = [];\r\n    let timeSlots = [];\r\n    let appointmentDetails = {\r\n        patientName: '',\r\n        doctorName: '',\r\n        dateAndTime: '',\r\n        timeSlot: '',\r\n        department: ''\r\n    };\r\n    // let selectedDoctor = \"\";\r\n    const map = new Map();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"all\");\r\n    const [form] = Form.useForm();\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const componentRef = useRef();\r\n    const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n    const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\r\n\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [patientDetails, isLoading2, setPatientSearchById] = usePatientSearchbyId();\r\n    const [doctorBydepartment, isLoadings, callDoctorByDepartment] = useGetAllDoctorByDepartment();\r\n    const [status, isLoading1, setBookAppointment] = useBookAppointment();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        if (selectedDepartment === \"all\") {\r\n            setRequest();\r\n            if (queryParams.patientId != null) {\r\n                setPatientSearchById(queryParams.patientId);\r\n            } else {\r\n                setPatientSearchById(patientDetails.patientId);\r\n            }\r\n\r\n\r\n        } else {\r\n            callDoctorByDepartment(selectedDepartment);\r\n        }\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Appointment successfully booked for patient with id ' + queryParams.patientId + 'and Doctor ' + selectedDoctor,\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [selectedDepartment, status]);\r\n\r\n    if (selectedDepartment !== \"all\") {\r\n        if (doctorBydepartment.length > 0) {\r\n            doctorsList = doctorBydepartment.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>;\r\n            });\r\n        }\r\n    } else {\r\n        if (doctors.length > 0) {\r\n            doctorsList = doctors.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>\r\n            });\r\n        }\r\n    }\r\n    function handleChange(value) {\r\n        setSelectedDepartment(value);\r\n    }\r\n    function onDateSelect(value) {\r\n        setSelectedDate(new Date(value));\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedDoctor(value);\r\n    }\r\n    function handleChangeOfTimeSlot(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedTimeSlot(value);\r\n    }\r\n\r\n    function bookAppointment(formData) {\r\n        const body = {\r\n            \"diseaseDesc\": \"test desc\",\r\n            \"advise\": \"test\",\r\n            \"patientId\": patientDetails.patientId,\r\n            \"patientName\": patientDetails.patientName,\r\n            \"doctorId\": selectedDoctor,\r\n            \"appointmentDate\": selectedDate.getTime(),\r\n            \"timeSlot\": selectedTimeSlot,\r\n            \"height\": 6,\r\n            \"weight\": 80,\r\n            \"Bp\": \"120/80\",\r\n            \"status\": \"booked\"\r\n        };\r\n        console.log(body);\r\n        if (patientDetails.patientId != null) {\r\n            setBookAppointment(body);\r\n        } else {\r\n            notification[\"error\"]({\r\n                message: 'Failed',\r\n                description: 'Please Enter a valid patient Id!',\r\n                duration: 3\r\n            });\r\n        }\r\n\r\n    }\r\n    let MainButton = \"\";\r\n    let appointmentCard = \"\";\r\n    if (!status) {\r\n        MainButton = <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Book Appointment</Button>;\r\n    } else {\r\n        console.log(\"dsadsad\" + selectedDoctor);\r\n        MainButton = <Button type=\"primary\" size=\"large\" onClick={() => {\r\n            console.log(patientDetails.patientId,);\r\n            history.push({ pathname: '/home/billing', search: '?patientId='.concat(patientDetails.patientId) + '&doctorName=' + map.get(selectedDoctor).doctorName + '&charges=' + map.get(selectedDoctor).consulationCharge + '&context=consulation' })\r\n        }}>Go To Billing</Button>;\r\n        appointmentDetails = {\r\n            patientName: patientDetails.patientName,\r\n            doctorName: map.get(selectedDoctor).doctorName,\r\n            dateAndTime: selectedDate.toDateString(),\r\n            timeSlot: selectedTimeSlot,\r\n            department: selectedDepartment\r\n        };\r\n        appointmentCard = (<Card title=\"Appointment Details\" extra={<a onClick={() => { handlePrint(); }}>Print</a>} style={{ width: 300 }}>\r\n            <p>Appointment booked for :</p>\r\n            <p>{patientDetails.patientName}</p>\r\n            <p>on {selectedDate.toDateString()}</p>\r\n            <p>between {selectedTimeSlot}</p>\r\n            <p>At {selectedDepartment}</p>\r\n            <p>With Dr. {map.get(selectedDoctor).doctorName}</p>\r\n        </Card>);\r\n    }\r\n\r\n    timeSlots = timeSlot(new Date(), 9, 0, 18, 0, 15).map(val => {\r\n        const timeSlot = moment(val[0].toLocaleTimeString(), \"HH:mm:ss\").format(\"hh:mm A\") + \"-\" + moment(val[1].toLocaleTimeString(), \"HH:mm:ss\").format(\"hh:mm A\");\r\n        return <Option key={timeSlot}>{timeSlot}</Option>;\r\n    });\r\n    const onPatientSearch = value => {\r\n        setPatientSearchById(value);\r\n    };\r\n    return (\r\n        <>\r\n            <Search\r\n                placeholder=\"Search Patient By Id\"\r\n                allowClear\r\n                enterButton=\"Search\"\r\n                size=\"large\"\r\n                style={{ width: '40%' }}\r\n                onSearch={onPatientSearch}\r\n            />\r\n            <br />\r\n            <PatientDetails patientDetails={patientDetails} />\r\n            <br></br>\r\n            <Divider>Appointment Booking</Divider>\r\n            <Form form={form} name=\"nest-messages\" onFinish={bookAppointment}>\r\n                <Row>\r\n                    <Col span={8}>\r\n                        <div className=\"site-calendar-demo-card\">\r\n                            <Calendar fullscreen={false} onSelect={onDateSelect} disabledDate={disabledDate} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Form.Item name={['user', 'departmentName']}>\r\n                            <Select\r\n                                showSearch\r\n                                defaultValue=\"all\"\r\n                                onChange={handleChange}\r\n                                placeholder=\"Select Department\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                <Option value=\"all\">All</Option>\r\n                                {department}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'doctorName']} rules={[{ required: true }]}>\r\n                            <Select\r\n                                onChange={handleChangeOfDoctor}\r\n                                showSearch\r\n                                placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {doctorsList}\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'timeSlot']}>\r\n                            <Select onChange={handleChangeOfTimeSlot} placeholder=\"Select Time Slot\" style={{ width: 300 }}>\r\n                                {timeSlots}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div style={{ display: 'none' }}>\r\n                            <AppointmentCardPrint ref={componentRef} appointmentDetails={appointmentDetails} />\r\n                        </div>\r\n                        {appointmentCard}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={12} offset={10}>\r\n                        {MainButton}\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>);\r\n};\r\n\r\nexport default Appointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePharmacyMedicine = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePharmacyMedicine`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveSupplier = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveSupplier`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveItemCategory = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveItemCategory`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveItemUnit = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveItemUnit`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getCategoriesList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getAllItemCategories`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\nexport const getItemUnitsList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getAllItemUnits`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const savePurchaseOrder = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deletePurchaseOrder = (body) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deletePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderDetails = (purchaseOrderId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderDetails?purchaseOrderId=` + purchaseOrderId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getSuppliersList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getSupplierList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineListByName = (medicineName) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineListByName?medicineName=` + medicineName)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineDetail = (medicineId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineDetails?medicineId=` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deleteMedicine = (medicineId) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deleteMedicineRecord/` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { getPharmacyMedicineList } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetPharmacyMedicines = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPharmacyMedicineList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicines;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const addMedicine = (body) => {\r\n  return axios\r\n    .post(`${api.url}/medicine/medicine`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getAllMedicines = () => {\r\n  return axios\r\n    .get(`${api.url}/medicine/medicineList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAllTests = () => {\r\n  return axios\r\n    .get(`${api.url}/test/testList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err\r\n    });\r\n};\r\n\r\nexport const addTest = (body) => {\r\n  return axios\r\n    .post(`${api.url}/test/test`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};","import { useState } from 'react';\r\nimport { getAllMedicines, getAllTests } from '../queries';\r\n\r\nconst useTestSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllTests();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useTestSearch;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col, AutoComplete } from 'antd';\r\nimport useGetPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useTestSearch from '../../../state/addMedicine/hooks/useSearchTest';\r\nconst { Option } = Select;\r\n\r\nconst AddItem = (props) => {\r\n    const [form] = Form.useForm();\r\n    const medicineMap = new Map();\r\n    const testMap = new Map();\r\n    let options = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    const [selected, setSelected] = useState(\"medicine\");\r\n    const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n    const [medicines, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    const [tests, isLoading1, setTestSearch] = useTestSearch();\r\n    // const [options, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setFormdefaultValue();\r\n    }, []);\r\n\r\n\r\n    function setFormdefaultValue() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                quantity: 1,\r\n                amount: 0,\r\n            }\r\n        });\r\n    }\r\n    if (selected == \"test\") {\r\n        options = [...tests.map(test => {\r\n            testMap.set(test.testName, test);\r\n            return { value: test.testName, label: test.testName };\r\n        })];\r\n    } else if (selected == \"medicine\") {\r\n        if (medicines.length > 0) {\r\n\r\n            medicines.forEach(medicine => {\r\n                medicineMap.set(medicine.medicineName, medicine);\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    } else if (selected == \"consultation\") {\r\n        if (medicines.length > 0) {\r\n            medicines.forEach(medicine => {\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    }\r\n\r\n    function onFinish(value) {\r\n        console.log(\"arakadra\", value.user.name);\r\n        const obj = {\r\n            itemId: null,\r\n            name: value.user.name,\r\n            quantity: value.user.quantity,\r\n            itemType: selected,\r\n            amount: value.user.amount\r\n        }\r\n        if (selected == \"medicine\") {\r\n            const medicinedetail = medicineMap.get(value.user.name);\r\n            obj[\"amount\"] = medicinedetail.salePrice;\r\n            obj[\"itemId\"] = medicinedetail.medicineId;\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(value.user.name);\r\n            obj[\"amount\"] = testdetail.price;\r\n            obj[\"itemId\"] = null;\r\n        }\r\n        // console.log(obj);\r\n        props.onItemAdded(obj);\r\n    }\r\n    function onItemTypeSelect(value) {\r\n        setSelected(value);\r\n        if (value == \"test\") {\r\n            setTestSearch();\r\n        }\r\n    }\r\n    function onSelect(data) {\r\n        if (selected == \"medicine\") {\r\n            const medicinedetail = medicineMap.get(data);\r\n            if (medicinedetail) {\r\n                form.setFieldsValue({\r\n                    user: {\r\n                        amount: medicinedetail.salePrice,\r\n                    }\r\n                });\r\n            }\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(data);\r\n            if (testdetail) {\r\n                form.setFieldsValue({\r\n                    user: {\r\n                        amount: testdetail.salePrice,\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} >\r\n            <Form.Item name={['user', 'name']} label=\"Item name\">\r\n                <AutoComplete\r\n                    dropdownClassName=\"certain-category-search-dropdown\"\r\n                    autoFocus={true}\r\n                    allowClear={true}\r\n                    dropdownMatchSelectWidth={200}\r\n                    style={{ width: '100%' }}\r\n                    options={options}\r\n                    onChange={onSelect}\r\n                    filterOption={(inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\r\n                >\r\n                    <Input.Search size=\"default\" placeholder=\"Item name\" />\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'quantity']} label=\"Quantity\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'amount']} label=\"Amount\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'itemType']} label=\"Item type\" >\r\n                <Select onSelect={onItemTypeSelect} defaultValue={selected} placeholder=\"Item type\">\r\n                    <Option value=\"medicine\">Inventory</Option>\r\n                    <Option value=\"consulation\">Others</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Add Item\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>);\r\n};\r\nexport default AddItem;","import React, { useRef } from 'react';\r\nimport '../components/billingPrint.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class BillPrint extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const isGSTIncluded = this.props.isGSTIncluded;\r\n        const branddetails = this.props.branddetails;\r\n        const billId = this.props.billId;\r\n        const paymentMode = this.props.paymentMode;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const finalCharges = this.props.finalCharges;\r\n        const todaysDate = new Date(this.props.billDate).toDateString();\r\n\r\n        const itemArray = itemList.map((item, index) => {\r\n            return (\r\n                <tr>\r\n                    <td>{index + 1} .</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.quantity}</td>\r\n                    <td>{item.amount}</td>\r\n                    <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>{item.gst}</td>\r\n                    <td>{item.discount}</td>\r\n                    <td>{item.total}</td>\r\n                </tr>)\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ padding: '20px', marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        <p style={{ float: 'right', marginLeft: '20px', display: (branddetails.contact ? \"table-cell\" : \"none\") }}>\r\n                            Reg No.- {branddetails.regNo}\r\n                        </p>\r\n\r\n                    </div>\r\n                    <div>\r\n                        {/* <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} /> */}\r\n                        <div>\r\n                            <h2 style={{ fontSize: '2em', fontWeight: 'bold' }}>{branddetails.companyName}</h2>\r\n                        </div>\r\n                        <div style={{ fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{branddetails.companyAddress}</p>\r\n                            <p style={{ display: (branddetails.contact ? \"table-cell\" : \"none\") }}>Contact: {branddetails.contact}</p>\r\n                            <p style={{ display: (branddetails.gstin ? \"table-cell\" : \"none\") }} >GSTIN: {branddetails.gstin}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellPadding=\"5\" cellSpacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>BillId</td>\r\n                                <td>{billId}</td>\r\n                            </tr>\r\n                            {/* <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                                <td>BillId</td>\r\n                                <td>{billId}</td>\r\n                            </tr> */}\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Payment mode</td>\r\n                                <td>{paymentMode}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>S.No</th>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }} >GST(CGST + SGST)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemArray}\r\n                            <tr>\r\n                                <td colSpan={(isGSTIncluded ? \"5\" : \"4\")} ></td>\r\n                                <td>Total</td>\r\n                                <td>{finalCharges.totalAmount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan={(isGSTIncluded ? \"5\" : \"4\")}></td>\r\n                                <td>Discount(%)</td>\r\n                                <td>{finalCharges.totalDiscount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }} colSpan=\"5\"></td>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>Tax</td>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>{finalCharges.totalGST}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst FinalCharges = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({ discount: props.finalCharges.totalDiscount });\r\n  }, [props.finalCharges.totalDiscount]);\r\n\r\n  function onDiscountChange(value) {\r\n    props.onDiscountChange(value);\r\n  }\r\n  return (\r\n    <Form name=\"final_charges\" form={form}>\r\n      <Row gutter={24}>\r\n        <Col span={8} key={1}>\r\n          <Form.Item label=\"Total Amount\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalAmount}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={2}>\r\n          <Form.Item label=\"Total discount(%)\" name=\"discount\">\r\n            <InputNumber\r\n              min={0}\r\n              \r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace('%', '')}\r\n              onChange={onDiscountChange}\r\n            />\r\n            {/* <span className=\"ant-form-text\">{props.finalCharges.totalDiscount}</span> */}\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={3}>\r\n          <Form.Item label=\"Total GST\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalGST}</span>\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>);\r\n};\r\nexport default FinalCharges;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nconst rootURI = `${api.url}/HMServiceController/fetchBillDtails`;\r\nexport const searchBillDetails = (id, filterType) => {\r\n    let url = '';\r\n    if (filterType === 'patientId') {\r\n        url = `${rootURI}?patientId=` + id + '&billId=';\r\n    } else if (filterType === 'billId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    } else if (filterType === 'receiptId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    }\r\n    return axios\r\n        .get(url)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err.response;\r\n        });\r\n};\r\n\r\nexport const saveGenerateBill = (body) => {\r\n    return axios\r\n        .post(`${api.url}/HMServiceController/generateBill`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getBillListByDateRange = (toDate, fromDate, billType) => {\r\n    return axios\r\n        .get(`${api.url}/HMServiceController/fetchBillListByDateRange?toDate=` + toDate + '&fromDate=' + fromDate + '&billType=' + billType)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n","import { useState } from 'react';\r\nimport { saveGenerateBill } from '../queries';\r\n\r\nconst useSaveGenerateBill = () => {\r\n  const [responseObj, setResponseObj] = useState({});\r\n\r\n  const request = async (body) => {\r\n    const response = await saveGenerateBill(body);\r\n    if (response) {\r\n      if (response.response == \"success\") {\r\n        setResponseObj(response);\r\n      }\r\n    } else {\r\n      setResponseObj(null);\r\n    }\r\n  };\r\n\r\n  return [responseObj, request];\r\n};\r\n\r\nexport default useSaveGenerateBill;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getBillDetails = (searchValue, searchBy) => {\r\n\r\n    let searchURL = \"\";\r\n\r\n    if (searchBy == \"patientId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?billId=&patientId=` + searchValue;\r\n    } else if (searchBy == \"billId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?patientId=&billId=` + searchValue;\r\n    }\r\n    return axios\r\n        .get(searchURL)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { Form, Input, Select, Row, Col, Table, notification, Button } from 'antd';\r\nimport { saveGenerateBill } from '../../../state/billing/queries';\r\nconst EditableContext = React.createContext();\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    ...restProps\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef = useRef();\r\n    const form = useContext(EditableContext);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0,\r\n                }}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: `${title} is required.`,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n            </Form.Item>\r\n        ) : (\r\n                <div\r\n                    className=\"editable-cell-value-wrap\"\r\n                    style={{\r\n                        paddingRight: 24,\r\n                    }}\r\n                    onClick={toggleEdit}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n    }\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst components = {\r\n    body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n    },\r\n};\r\nconst ReturnItem = (props) => {\r\n    let errorMessagesRows = \"\";\r\n    let returnButton = \"\";\r\n    let printButton = \"\";\r\n    let backToMainButton = \"\";\r\n    const [initialRowData, setInitialRowData] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState({});\r\n    const [billGeneratedStatus, setBillGeneratedStatus] = useState(false);\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n    useEffect(() => {\r\n        setData(props.rowsData);\r\n        setInitialRowData(props.rowsData);\r\n    }, []);\r\n\r\n    let columns = [\r\n        {\r\n            title: 'Item Name',\r\n            dataIndex: 'name',\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            editable: \"true\",\r\n            width: '10%',\r\n        }\r\n    ];\r\n    columns = columns.map((col) => {\r\n        if (col.editable == \"false\") {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                handleSave: handleChangeFormField,\r\n            }),\r\n        };\r\n    });\r\n    if (billGeneratedStatus) {\r\n        printButton = <Button style={{ width: '90%' }} type=\"primary\">Print</Button>;\r\n        backToMainButton = <Button onClick={() => { props.isModalVisible(false); }} style={{ width: '90%' }} type=\"primary\">Go to Main Bill</Button>;\r\n    }\r\n\r\n    function updateMainBill() {\r\n        const selectedRows = data.filter(d => selectedRowKeys.includes(d.key));\r\n        props.onItemsReturned(selectedRows);\r\n    }\r\n    function handleChangeFormField(row) {\r\n        console.log(row);\r\n        console.log(initialRowData);\r\n\r\n        const newData = [...data];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        const initialItemValue = initialRowData[index];\r\n        if (row.quantity > initialItemValue.quantity) {\r\n            const message = `Item ${row.name} cannot have quantity more than ${initialItemValue.quantity}`;\r\n            setErrorMessage({ ...errorMessage, ... { [row.key]: message } });\r\n        } else {\r\n            const temp = { ...errorMessage };\r\n            delete temp[row.key];\r\n            setErrorMessage(temp);\r\n        }\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        // const finalCharges = getFinalCharges([row]);\r\n        // row.total = finalCharges.discountedAmount + finalCharges.totalGST;\r\n\r\n        // calculateTotalCharges(newData);\r\n    };\r\n    console.log(\"error meessages\", errorMessage);\r\n    if (errorMessage) {\r\n        const listOfErrors = [];\r\n        for (var key in errorMessage) {\r\n            if (errorMessage.hasOwnProperty(key)) {\r\n                listOfErrors.push(<p style={{ color: 'red' }} key={key}>{errorMessage[key]}</p>);\r\n            }\r\n        }\r\n        if (listOfErrors.length == 0) {\r\n            returnButton = <Button style={{ width: '90%' }} onClick={returnItems} type=\"primary\">Return</Button>;\r\n        } else {\r\n            returnButton = \"\";\r\n        }\r\n        errorMessagesRows = <div>{listOfErrors}</div>;\r\n    }\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n\r\n    function onSelectChange(selectedRowKeys) {\r\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n        setSelectedRowKeys(selectedRowKeys);\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: onSelectChange,\r\n    };\r\n\r\n    function returnItems() {\r\n        console.log(data);\r\n        console.log(selectedRowKeys);\r\n        const selectedRows = data.filter(d => selectedRowKeys.includes(d.key));\r\n        const body = {\r\n            billId: null,\r\n            billType: \"PHARMACY\",\r\n            createdAt: new Date(),\r\n            paymentStatus: \"paid\",\r\n            paymentMode: \"Cash\",\r\n            patientId: props.patientDetails.patientId,\r\n            name: props.patientDetails.patientName,\r\n            age: props.patientDetails.age,\r\n            gender: props.patientDetails.gender,\r\n            // totalCost: finalCharges.totalAmount,\r\n            // totalDiscount: finalCharges.totalDiscount,x\r\n            // totalGST: finalCharges.totalGST,\r\n            billDetailList: []\r\n        };\r\n        selectedRows.forEach(item => {\r\n            const billItem = {\r\n                id: null,\r\n                itemName: item.name,\r\n                itemId: item.itemId,\r\n                billMapId: null,\r\n                cost: item.total,\r\n                concessionPercentage: item.discount,\r\n                gstPercentage: item.gst,\r\n                mrp: item.amount,\r\n                concessionType: \"discount\",\r\n                quantity: item.quantity,\r\n                purchaseType: (item.type == \"medicine\" ? \"pharmacy-return\" : item.type)\r\n            };\r\n            body.billDetailList.push(billItem);\r\n        });\r\n        saveGenerateBill(body).then(response => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Return Bill Generated Successfully with id ' + response.billId,\r\n                duration: 3\r\n            });\r\n            setBillGeneratedStatus(true);\r\n            updateMainBill();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'Error while returning bill',\r\n                duration: 3\r\n            });\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span style={{ marginLeft: 8 }}>\r\n                {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\r\n            </span>\r\n            {errorMessagesRows}\r\n            <Table rowSelection={rowSelection} columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n            <br /><br /><br />\r\n            <Row gutter={24}>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {returnButton}\r\n\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {printButton}\r\n\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {backToMainButton}\r\n\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\nexport default ReturnItem;","export const SERVER_ERROR =`Server error, Please contact Administrator Rishi at (+91-8142638458)`;\r\n","import { Button, Col, Descriptions, Divider, Checkbox, Form, InputNumber, Switch, DatePicker, Input, notification, Radio, Row, Table, Popconfirm, Modal } from 'antd';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport React, { useRef, useState, useEffect, useContext, useLayoutEffect } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PatientDetails from '../patientDetails';\r\nimport AddItem from './components/addItemModal';\r\nimport { BillPrint } from './components/billPrint';\r\nimport FinalCharges from './components/finalCharges';\r\nimport useSaveGenerateBill from '../../state/billing/hooks/useGenerateBill';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport { getBillDetails } from './services';\r\nimport ReturnItem from './components/returnItemModal';\r\nimport { saveGenerateBill } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\nimport { getBrandDetails } from '../../state/registration/queries';\r\nimport hospitalDetails from '../../utils/constants';\r\n\r\nconst EditableContext = React.createContext();\r\nconst { Search } = Input;\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef();\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst Billing = ({ location, history }) => {\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n  const queryParams = queryString.parse(location.search);\r\n  const components = {\r\n    body: {\r\n      row: EditableRow,\r\n      cell: EditableCell,\r\n    },\r\n  };\r\n  function handleSave(row) {\r\n    const newData = [...data];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    const finalCharges = getFinalCharges([row]);\r\n    row.total = (finalCharges.discountedAmount + finalCharges.totalGST).toFixed(2);\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    setData(newData);\r\n    calculateTotalCharges(newData);\r\n  };\r\n\r\n  const defaultbillDetails = {\r\n    billId: '',\r\n    createdAt: (new Date()).toDateString() + ' ' + (new Date()).toLocaleTimeString()\r\n  };\r\n\r\n  const defaultFinalCharges = {\r\n    totalAmount: 0,\r\n    totalDiscount: 0,\r\n    totalGST: 0\r\n  };\r\n  const printBillButton = <Col className=\"gutter-row\" span={6}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={handlePrint}>Print</Button>\r\n  </Col>;\r\n  let generateBillButton = <Col className=\"gutter-row\" span={6}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={generateBill}>Generate {queryParams.context == \"edit\" ? \"new \" : \"\"}bill</Button>\r\n  </Col>;\r\n  let printButton = \"\";\r\n  const [newPatientForm] = Form.useForm();\r\n  const [state, setState] = useState(\"initial\");\r\n  const [paymentMode, setPaymentMode] = useState(\"Cash\");\r\n  const [isGSTIncluded, setIsGSTIncluded] = useState(true);\r\n  // const [billResponse, isLoading, setBillSearch] = useBillSearch();\r\n  const [patientDetails, setPatientDetails] = useState({});\r\n  const [newPatientSwitch, setNewPatientSwitch] = useState(true);\r\n  const [generateBillStatus, setGenerateBillStatus] = useSaveGenerateBill();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isReturnModalVisible, setIsReturnModalVisible] = useState(false);\r\n  const [billDetails, setBillDetails] = useState(defaultbillDetails);\r\n  const [billDate, setBillDate] = useState(moment(new Date()));\r\n\r\n  const [finalCharges, setFinalCharges] = useState(defaultFinalCharges);\r\n  const [data, setData] = useState([]);;\r\n  const [branddetails, setBrandDetails] = useState(hospitalDetails);\r\n  let patientInfo = <div>\r\n    <Search placeholder=\"Search by Patient Id\" allowClear onSearch={patientSearch} style={{ width: '30%' }} />\r\n    <PatientDetails searchType=\"patientId\" patientDetails={patientDetails} />\r\n  </div>;\r\n  // let billSearchComp = <BillSearch onSearch={onBillSearch} />;\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const showReturnItemModal = () => {\r\n    setIsReturnModalVisible(true);\r\n  };\r\n\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const submitReturn = () => {\r\n    setIsReturnModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n  const cancelReturnModal = () => {\r\n    setIsReturnModalVisible(false);\r\n  };\r\n  useEffect(() => {\r\n    // calculateTotalCharges(mockData);\r\n    // setData(mockData);\r\n    if (queryParams.context == 'registration') {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Registration',\r\n          quantity: 1,\r\n          type: 'registration',\r\n          amount: 500,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: 500,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'consulation') {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Consultation ' + '(' + (queryParams.doctorName) + ')',\r\n          quantity: 1,\r\n          type: 'consultation',\r\n          amount: queryParams.charges,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: Number(queryParams.charges) + 0,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'edit') {\r\n      onBillSearch(queryParams.billId, \"billId\");\r\n    }\r\n    updateBrandDetails();\r\n  }, []);\r\n\r\n  function updateBrandDetails() {\r\n    getBrandDetails().then(data => {\r\n      if (data && Array.isArray(data) && data.length > 0) {\r\n          setBrandDetails(data[0]);\r\n      }\r\n  });\r\n  }\r\n  if (state == \"billGenerated\") {\r\n    generateBillButton = \"\";\r\n    printButton = printBillButton;\r\n  }\r\n\r\n  if (queryParams.context == \"edit\") {\r\n    printButton = printBillButton;\r\n  }\r\n  if (newPatientSwitch) {\r\n    patientInfo = <div>\r\n      <Divider>Customer Details</Divider>\r\n      <Form layout=\"inline\" form={newPatientForm}>\r\n        <Form.Item name=\"patientName\" label=\"Name\">\r\n          <Input placeholder=\"name\" />\r\n        </Form.Item>\r\n        {/* <Form.Item name=\"age\" label=\"Age\">\r\n          <InputNumber placeholder=\"age\" />\r\n        </Form.Item> */}\r\n        <Form.Item name=\"contact\" label=\"Contact\">\r\n          <Input placeholder=\"phone number\" />\r\n        </Form.Item>\r\n        {/* <Form.Item name=\"referal doctor\" label=\"Referal doctor\">\r\n          <Input placeholder=\"doctor name\" />\r\n        </Form.Item> */}\r\n      </Form>\r\n    </div>;\r\n  }\r\n  function getFinalCharges(dataList) {\r\n    const finalCharges = {\r\n      totalAmount: 0,\r\n      totalGST: 0,\r\n      totalDiscount: 0,\r\n      discountedAmount: 0\r\n    }\r\n\r\n    dataList.forEach(data => {\r\n      const amount = Number.parseInt(data.amount) * Number.parseInt(data.quantity);\r\n      const discountedAmount = Number.parseInt(amount) - ((Number.parseInt(data.discount) / 100) * Number.parseInt(amount));\r\n      finalCharges.totalAmount += Number.parseInt(amount);\r\n      finalCharges.totalDiscount += Number.parseInt(data.discount);\r\n      finalCharges.discountedAmount += discountedAmount;\r\n      finalCharges.totalGST += Number.parseInt(data.gst);\r\n    });\r\n    return finalCharges;\r\n  }\r\n  function onChange(pagination, filters, sorter, extra) {\r\n    console.log('params', pagination, filters, sorter, extra);\r\n  }\r\n\r\n  function onBillSearch(searchValue, searchFilter) {\r\n    getBillDetails(searchValue, searchFilter).then(data => {\r\n      if (data && data[0]) {\r\n        const billDetails = data[0];\r\n        setBillDetails({\r\n          billId: billDetails.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        setBillDate(moment(new Date(billDetails.createdAt)));\r\n        setPaymentMode(billDetails.paymentMode);\r\n        if (billDetails[\"patientId\"]) {\r\n          patientSearch(billDetails.patientId);\r\n        } else {\r\n          setPatientDetails({ patientId: null, patientName: billDetails.name, age: billDetails.age, gender: billDetails.gender, visitType: \"General\" });\r\n        }\r\n        if (billDetails[\"billDetailList\"]) {\r\n\r\n          const tempData = billDetails[\"billDetailList\"].map((item, index) => {\r\n            return {\r\n              key: item.itemName + index,\r\n              id: item.id,\r\n              itemId: item.itemId,\r\n              name: item.itemName,\r\n              type: item.purchaseType,\r\n              billMapId: item.billMapId,\r\n              quantity: item.quantity,\r\n              amount: item.mrp,\r\n              gst: 0,\r\n              discount: item.concessionPercentage,\r\n              total: (Number(item.mrp) - ((Number(item.concessionPercentage) / 100) * Number(item.mrp))) * item.quantity,\r\n            }\r\n          });\r\n\r\n          setData(tempData);\r\n          calculateTotalCharges(tempData);\r\n        }\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  function patientSearch(patientId) {\r\n    getPatientById(patientId).then(patientDetails => {\r\n      setPatientDetails(patientDetails);\r\n    }).catch(() => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: 'Error while searching patient with Id' + patientId,\r\n        duration: 3\r\n      });\r\n    });\r\n  }\r\n  function onItemAdded(itemFormValue) {\r\n    console.log(itemFormValue);\r\n    const newData = {\r\n      key: Math.random(),\r\n      name: itemFormValue.name,\r\n      itemId: itemFormValue.itemId,\r\n      quantity: itemFormValue.quantity,\r\n      amount: itemFormValue.amount,\r\n      type: itemFormValue.itemType,\r\n      gst: 0,\r\n      discount: 0,\r\n      total: itemFormValue.quantity * itemFormValue.amount,\r\n    }\r\n    const tempDataList = [...data, newData];\r\n\r\n    setData(tempDataList);\r\n    calculateTotalCharges(tempDataList);\r\n    setIsModalVisible(false);\r\n  }\r\n  function handleDelete(key) {\r\n    const dataSource = data.filter((item) => item.key !== key);\r\n    calculateTotalCharges(dataSource);\r\n    setData(dataSource);\r\n  };\r\n\r\n  function calculateTotalCharges(tempDataList) {\r\n    const finalCharges = getFinalCharges(tempDataList);\r\n    console.log(finalCharges);\r\n    setFinalCharges({\r\n      totalAmount: (finalCharges.discountedAmount + finalCharges.totalGST).toFixed(2),\r\n      totalDiscount: ((finalCharges.totalAmount - finalCharges.discountedAmount) / finalCharges.totalAmount * 100).toFixed(2),\r\n      totalGST: (finalCharges.totalGST).toFixed(2)\r\n    });\r\n  }\r\n\r\n  function onDiscountChange(discountValue) {\r\n    console.log(\"Discount changed\", discountValue);\r\n    let tempData = [];\r\n    tempData = data.map(item => {\r\n      return {\r\n        ...item,\r\n        discount: discountValue\r\n      }\r\n    });\r\n    calculateTotalCharges(tempData);\r\n    setData(tempData);\r\n  }\r\n\r\n  function paymentMethod(e) {\r\n    setPaymentMode(e.target.value);\r\n  }\r\n\r\n  function generateBill() {\r\n    const body = {\r\n      billId: (billDetails.billId),\r\n      billType: \"PHARMACY\",\r\n      createdAt: (new Date(billDetails.createdAt)),\r\n      paymentStatus: (paymentMode == \"Due\" ? \"dues\" : \"paid\"),\r\n      paymentMode: paymentMode,\r\n      patientId: patientDetails.patientId,\r\n      name: patientDetails.name,\r\n      age: patientDetails.age,\r\n      gender: patientDetails.gender,\r\n      totalCost: finalCharges.totalAmount,\r\n      totalDiscount: finalCharges.totalDiscount,\r\n      totalGST: finalCharges.totalGST,\r\n      billDetailList: []\r\n    };\r\n    data.forEach(item => {\r\n      const billItem = {\r\n        id: null,\r\n        itemName: item.name,\r\n        itemId: item.itemId,\r\n        billMapId: null,\r\n        cost: item.total,\r\n        concessionPercentage: item.discount,\r\n        gstPercentage: item.gst,\r\n        mrp: item.amount,\r\n        concessionType: \"discount\",\r\n        quantity: item.quantity,\r\n        purchaseType: (item.type == \"medicine\" ? \"pharmacy-purchase\" : item.type)\r\n      };\r\n      body.billDetailList.push(billItem);\r\n    });\r\n    console.log(\"body\", body);\r\n    if (newPatientSwitch) {\r\n      const newPatientFormValues = newPatientForm.getFieldsValue();\r\n      body.name = newPatientFormValues.patientName;\r\n      body.age = newPatientFormValues.age;\r\n      body.patientId = null;\r\n      setPatientDetails({\r\n        patientName: newPatientFormValues.patientName,\r\n        patientId: \"N/A\",\r\n        age: newPatientFormValues.age,\r\n      });\r\n    }\r\n    saveGenerateBill(body).then(generateBillStatus => {\r\n      if (generateBillStatus.response == \"success\") {\r\n        notification[\"success\"]({\r\n          message: 'SUCCESS',\r\n          description: 'Bill Generated Successfully with id ' + generateBillStatus.billId,\r\n          duration: 3\r\n        });\r\n        setBillDetails({\r\n          billId: generateBillStatus.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        setState(\"billGenerated\");\r\n\r\n      }\r\n    }).catch(err => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: SERVER_ERROR,\r\n        duration: 3\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n  function onNewPatientSwitchChange(checked) {\r\n    setNewPatientSwitch(checked);\r\n  }\r\n\r\n  function onItemsReturned(returnedRows) {\r\n    let tempData = [...data];\r\n    let itemKeysToRemove = [];\r\n    data.forEach((mainRow, mainIndex) => {\r\n      returnedRows.forEach(returnedRow => {\r\n        if (returnedRow.key == mainRow.key) {\r\n          if (mainRow.quantity == returnedRow.quantity) {\r\n            console.log(\"remove\", tempData[mainIndex]);\r\n            itemKeysToRemove.push(mainRow.key);\r\n\r\n          } else {\r\n            mainRow.quantity = mainRow.quantity - returnedRow.quantity;\r\n            console.log(\"edit\", tempData[mainIndex]);\r\n            console.log(\"with\", mainRow);\r\n            tempData.splice(mainIndex, 1, { ...tempData, ...mainRow });\r\n          }\r\n        }\r\n      });\r\n    });\r\n    tempData = tempData.filter(item => !itemKeysToRemove.includes(item.key));\r\n\r\n    setData(tempData);\r\n    calculateTotalCharges(tempData);\r\n  }\r\n  function onBillDateChange(momentDate, dateString) {\r\n    let date = new Date(dateString);\r\n    setBillDetails({\r\n      createdAt: (date).toDateString()\r\n    });\r\n    setBillDate(moment(date));\r\n  }\r\n\r\n  function onGSTIncludedChange(e) {\r\n    setIsGSTIncluded(e.target.checked);\r\n  }\r\n\r\n\r\n  let columns = [\r\n    {\r\n      title: 'Item Name',\r\n      dataIndex: 'name',\r\n      editable: \"true\"\r\n    },\r\n    {\r\n      title: 'Quantity',\r\n      dataIndex: 'quantity',\r\n      editable: \"true\",\r\n      width: '10%',\r\n    },\r\n    {\r\n      title: 'Amount',\r\n      dataIndex: 'amount',\r\n      editable: \"true\",\r\n      sorter: {\r\n        compare: (a, b) => a.amount - b.amount,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'Discount(%)',\r\n      dataIndex: 'discount',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.discount - b.discount,\r\n        multiple: 2,\r\n      },\r\n    },\r\n    {\r\n      title: 'Total',\r\n      dataIndex: 'total',\r\n      sorter: {\r\n        compare: (a, b) => a.total - b.total,\r\n        multiple: 1,\r\n      },\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) =>\r\n        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n          <a> {queryParams.context != \"edit\" ? \"Delete\" : \"\"} </a>\r\n        </Popconfirm>\r\n    }\r\n  ];\r\n  if (isGSTIncluded) {\r\n    columns.splice(3, 0, {\r\n      title: 'GST(CGST+SGST)',\r\n      dataIndex: 'gst',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.gst - b.gst,\r\n        multiple: 3,\r\n      },\r\n    });\r\n  }\r\n\r\n  columns = columns.map((col) => {\r\n    if (col.editable == \"false\") {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        editable: col.editable,\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        handleSave: handleSave,\r\n      }),\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Modal title=\"Add Item\" visible={isModalVisible} footer={null} onOk={handleOk} onCancel={handleCancel}>\r\n        <AddItem onItemAdded={onItemAdded} />\r\n      </Modal>\r\n      <Modal title=\"Return Item\" visible={isReturnModalVisible} footer={null} onOk={submitReturn} onCancel={cancelReturnModal}>\r\n        <ReturnItem rowsData={data} patientDetails={patientDetails} onItemAdded={onItemAdded} onItemsReturned={onItemsReturned} isModalVisible={setIsReturnModalVisible} />\r\n      </Modal>\r\n      {/* New Patient <Switch onChange={onNewPatientSwitchChange} /> <br /> <br /> */}\r\n      {patientInfo}\r\n      <div style={{ display: 'none' }}>\r\n        <BillPrint ref={componentRef} branddetails={branddetails} itemList={data} paymentMode={paymentMode} isGSTIncluded={isGSTIncluded} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} billDate={billDetails.createdAt} patientId={patientDetails.patientId} />\r\n      </div>\r\n      <Divider>Bill Details</Divider>\r\n      <Row gutter={24}>\r\n        <Col span={4}>\r\n          <Descriptions>\r\n            <Descriptions.Item label=\"Bill Id\">{billDetails.billId}</Descriptions.Item>\r\n            {/* <Descriptions.Item label=\"Receipt Id\">{queryParams.receiptId}</Descriptions.Item> */}\r\n            {/* <Descriptions.Item label=\"Date and time\">{billDetails.createdAt}</Descriptions.Item> */}\r\n          </Descriptions>\r\n        </Col>\r\n        <Col span={16}>\r\n          <DatePicker onChange={onBillDateChange} value={billDate} />\r\n        </Col>\r\n        <Col span={4}>\r\n          <Checkbox checked={isGSTIncluded} onChange={onGSTIncludedChange}>Include GST</Checkbox>\r\n        </Col>\r\n      </Row>\r\n\r\n\r\n      <Button\r\n        onClick={showModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"none\" : \"\")\r\n        }}>Add Item\r\n        </Button>\r\n      <Button\r\n        onClick={showReturnItemModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"\" : \"none\")\r\n        }}>Return Item\r\n        </Button>\r\n      <Table columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n\r\n      <FinalCharges finalCharges={finalCharges} onDiscountChange={onDiscountChange} />\r\n      <Divider>Payment</Divider>\r\n      <Radio.Group onChange={paymentMethod} value={paymentMode}>\r\n        <Radio value=\"Cash\">Cash</Radio>\r\n        <Radio value=\"Card\">Card</Radio>\r\n        <Radio value=\"UPI\">UPI</Radio>\r\n        <Radio value=\"Paytm\">Paytm</Radio>\r\n        <Radio value=\"Due\">Due</Radio>\r\n      </Radio.Group>\r\n      <br /><br /><br />\r\n      <Row gutter={24}>\r\n        {generateBillButton}\r\n        {/* <Col className=\"gutter-row\" span={3}>\r\n          <Button type=\"primary\">Cancel</Button>\r\n        </Col> */}\r\n        {printButton}\r\n        {/* <Col className=\"gutter-row\" span={3}>\r\n          <Button style={{ width: '90%' }} type=\"primary\" onClick={() => history.push({ pathname: '/home/appointment', search: '?patientId='.concat(queryParams.patientId) })}>Go To Appointment</Button>\r\n        </Col> */}\r\n\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Billing;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Select, DatePicker } from 'antd';\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\nconst BillSearchComp = (props) => {\r\n    const defaultSearch = \"billId\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n    let inputSearch = <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Bill by\" />;\r\n\r\n    if (filterValue == \"dateRange\") {\r\n        inputSearch = <RangePicker onChange={onDateRangeSelect} disabledDate={disabledDate} />;\r\n    }\r\n    \r\n    function onDateRangeSelect(values) {\r\n        var actualDates = convertToActualDate(values);\r\n        props.onSearch(actualDates, filterValue);\r\n    }\r\n\r\n    function convertToActualDate(values) {\r\n        var date = moment(values[0]).toDate();\r\n        date.setHours(0);\r\n\r\n        var date2 = moment(values[1]).toDate();\r\n        date2.setHours(24);\r\n        return [date.getTime(), date2.getTime()];\r\n    }\r\n    function disabledDate(current) {\r\n        // Can not select days before today and today\r\n        return current && current > moment().endOf('day');\r\n    }\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n        <Input.Group compact>\r\n            <Select defaultValue={defaultSearch} onSelect={setfilterValue}>\r\n                {/* <Option key=\"patientId\" value=\"patientId\">Patient Id</Option> */}\r\n                <Option key=\"billId\" value=\"billId\">Bill Id</Option>\r\n                <Option key=\"dateRange\" value=\"dateRange\">Date Range</Option>\r\n            </Select>\r\n            { inputSearch }\r\n        </Input.Group>);\r\n};\r\nexport default BillSearchComp;\r\n","import React, { useEffect } from 'react';\r\nimport BillSearch from '../billing/components/billSearch';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, AutoComplete, Badge, Descriptions, Row, Col, Button, Space } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UserOutlined, DownloadOutlined, OrderedListOutlined } from '@ant-design/icons';\r\nconst renderTitle = (title: string) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title: string, count: number) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\nconst options = [\r\n    {\r\n        label: renderTitle('Libraries'),\r\n        options: [renderItem('AntDesign', 10000), renderItem('AntDesign UI', 10600)],\r\n    },\r\n    {\r\n        label: renderTitle('Solutions'),\r\n        options: [renderItem('AntDesign UI FAQ', 60100), renderItem('AntDesign FAQ', 30010)],\r\n    },\r\n    {\r\n        label: renderTitle('Articles'),\r\n        options: [renderItem('AntDesign design language', 100000)],\r\n    },\r\n];\r\n\r\nconst Canteen = () => {\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <BillSearch />\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Button type=\"dashed\" icon={<PlusOutlined />}>\r\n                        New\r\n                    </Button>\r\n                    <Button type=\"dashed\" style={{ marginLeft: '5px' }} icon={<OrderedListOutlined />}>\r\n                        <Link to=\"/home/canteenStock\">View Stock</Link>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Descriptions title=\"Patient Info\">\r\n                <Descriptions.Item label=\"Patient Name\">Rishiraj</Descriptions.Item>\r\n                <Descriptions.Item label=\"Phone\">919829128</Descriptions.Item>\r\n                <Descriptions.Item label=\"Department\">Ward 1</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"warning\" text=\"pending\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <br /><br />\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'itemName']}\r\n                                            fieldKey={[field.fieldKey, 'itemName']}\r\n                                            rules={[{ required: true, message: 'Missing Item name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search placeholder=\"Search item\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <Input placeholder=\"Price\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'gst']}\r\n                                            fieldKey={[field.fieldKey, 'gst']}\r\n                                        >\r\n                                            <Input placeholder=\"gst\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n            <Descriptions title=\"\">\r\n                <Descriptions.Item label=\"Total Amount\">100</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total GST\">15</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total discount\">0</Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <Form.Item>\r\n                <Row>\r\n                    <Col span={12} offset={11}>\r\n                        <Button type=\"primary\" shape=\"round\" icon={<DownloadOutlined />} size='large'>Print</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Pay Now</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Add to Bill</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form.Item>\r\n        </>\r\n\r\n    );\r\n};\r\nexport default Canteen;\r\n","import { PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Divider, Form, Input, InputNumber, Select, Table } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { Option } = Select;\r\nconst defaultCategories = ['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian'];\r\nconst columns = [\r\n    {\r\n        title: 'Item Name',\r\n        dataIndex: 'itemName',\r\n        defaultSortOrder: 'descend',\r\n        sorter: (a, b) => a.itemName - b.itemName,\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price'\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        filters: defaultCategories.map(cat => {\r\n            return {\r\n                text: cat,\r\n                value: cat,\r\n            }\r\n        }),\r\n        onFilter: (value, record) => record.category.indexOf(value) === 0,\r\n        sorter: (a, b) => a.category.length - b.category.length,\r\n        sortDirections: ['descend'],\r\n    }\r\n];\r\n\r\nconst CanteenStock = () => {\r\n    let index = 0;\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    const [, forceUpdate] = useState();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian']);\r\n\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const onFinish = values => {\r\n        console.log('Finish:', values);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"itemName\"\r\n                    rules={[{ required: true, message: 'Please enter item name!' }]}\r\n                >\r\n                    <Input placeholder=\"Item Name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please enter a price!' }]}\r\n                >\r\n                    <InputNumber placeholder=\"Price\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"Category\"\r\n                >\r\n                    <Select\r\n                        style={{ width: 240 }}\r\n                        placeholder=\"Select category\"\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                <Divider style={{ margin: '4px 0' }} />\r\n                                <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                    <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                    <a\r\n                                        style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                        onClick={addItem}\r\n                                    >\r\n                                        <PlusOutlined /> Add item\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {items.map(item => (\r\n                            <Option key={item}>{item}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Item\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default CanteenStock;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByDoctorId } from '../queries';\r\n\r\nconst useGetAppointmentByDoctorId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (doctorId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByDoctorId(doctorId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByDoctorId;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByPatientId } from '../queries';\r\n\r\nconst useGetAppointmentByPatientId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByPatientId(patientId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByPatientId;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, DatePicker, Button, TimePicker, Select, Space, Input } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport useGetAppointmentByDoctorId from '../../state/appointment/hooks/useGetAppointmentsByDoctorId';\r\nimport useGetAppointmentByPatientId from '../../state/appointment/hooks/useGetAppointmentByPatientId';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\nfunction PickerWithType({ type, onChange }) {\r\n    if (type === 'time') return <TimePicker onChange={onChange} />;\r\n    if (type === 'date') return <DatePicker onChange={onChange} />;\r\n    return <DatePicker picker={type} onChange={onChange} />;\r\n}\r\n\r\nfunction DoctorAppointment({ location, history }) {\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Patient Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n        },\r\n        {\r\n            title: 'Date',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n        },\r\n        {\r\n            title: 'Time Slot',\r\n            dataIndex: 'timeSlot',\r\n            key: 'timeSlot',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color=\"green\" key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Booked',\r\n                    value: 'booked',\r\n                },\r\n                {\r\n                    text: 'Appointment done',\r\n                    value: 'done',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => {\r\n                let proceed = \"\";\r\n                if (record.status != \"done\") {\r\n                    proceed = <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/prescription', search: '?patientId=' + record.patientId + '&patientName=' + record.patientName + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        Proceed\r\n                </Button>\r\n                }\r\n                return <Space size=\"middle\">\r\n                    {proceed}\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        View\r\n            </Button>\r\n                </Space>\r\n            },\r\n        }\r\n    ];\r\n    let doctorsList = [];\r\n    const [type, setType] = useState('time');\r\n    const [patientAppointments, isLoading2, setAppointmentByPatientId] = useGetAppointmentByPatientId();\r\n    // const [selectedDoctor, setSelectedDoctor] = useState(\"initial\");\r\n    const [filter, setFilter] = useState(\"none\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [appointments, isLoading1, setAppointmentByDoctorId] = useGetAppointmentByDoctorId();\r\n    let data = [];\r\n    useEffect(() => {\r\n        setRequest();\r\n    }, []);\r\n\r\n    if (doctors.length > 0) {\r\n        doctorsList = doctors.map(doctor => <Option key={doctor.doctorId} >{doctor.doctorName}</Option>);\r\n    }\r\n    console.log(\"asadada\", appointments);\r\n    if (filter == \"doctor\" && appointments.length > 0) {\r\n        data = appointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                timeSlot: appointment.timeSlot,\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['booked'])\r\n            };\r\n        });\r\n    }\r\n    if (filter == \"patient\" && patientAppointments.length > 0) {\r\n        data = patientAppointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                timeSlot: appointment.timeSlot,\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['booked'])\r\n            };\r\n        });\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        setAppointmentByDoctorId(value);\r\n        setFilter(\"doctor\");\r\n    }\r\n\r\n    const onPatientSearch = value => {\r\n        setAppointmentByPatientId(value);\r\n        setFilter(\"patient\");\r\n    };\r\n    return (\r\n        <>\r\n            <Space>\r\n                <Select\r\n                    onChange={handleChangeOfDoctor}\r\n                    showSearch\r\n                    placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }>\r\n                    {doctorsList}\r\n                </Select>\r\n                {/* <Select value={type} onChange={setType}>\r\n                    <Option value=\"time\">Time</Option>\r\n                    <Option value=\"date\">Date</Option>\r\n                    <Option value=\"week\">Week</Option>\r\n                    <Option value=\"month\">Month</Option>\r\n                    <Option value=\"quarter\">Quarter</Option>\r\n                    <Option value=\"year\">Year</Option>\r\n                </Select>\r\n                <PickerWithType type={type} onChange={value => console.log(value)} /> */}\r\n                <Search\r\n                    placeholder=\"Search Patient By Id\"\r\n                    allowClear\r\n                    enterButton=\"Search\"\r\n                    size=\"medium\"\r\n                    style={{ width: '100%', marginLeft: '200px' }}\r\n                    onSearch={onPatientSearch}\r\n                />\r\n            </Space>\r\n            <br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DoctorAppointment;","import { useState } from 'react';\r\nimport { addMedicine } from '../queries';\r\n\r\nconst useAddMedicine = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addMedicine(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddMedicine;\r\n","import { useState } from 'react';\r\nimport { getAllMedicines } from '../queries';\r\n\r\nconst useMedicineSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllMedicines();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useMedicineSearch;","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\n\r\nconst AddMedicine = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddMedicine();\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Medicine added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    console.log(\"medicines list\", medicines);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"medicineName\": form.name,\r\n            \"medicineType\": form.type,\r\n            \"strength\": form.strength,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Medicine Name',\r\n            dataIndex: 'medicineName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Strength',\r\n            dataIndex: 'strength'\r\n        },\r\n        {\r\n            title: 'Medicine Type',\r\n            dataIndex: 'medicineType',\r\n            filters: [\r\n                {\r\n                    text: 'Aspirin',\r\n                    value: 'aspirin',\r\n                },\r\n                {\r\n                    text: 'Painkillers',\r\n                    value: 'painkiller',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.medicineType.indexOf(value) === 0,\r\n            sorter: (a, b) => a.medicineType.length - b.medicineType.length,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                medicineName: medicine.medicineName,\r\n                price: medicine.price,\r\n                strength: medicine.strength,\r\n                medicineType: medicine.medicineType,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please medicine name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"type\"\r\n                    rules={[{ required: true, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine type\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"strength\"\r\n                    rules={[{ required: true, message: 'Please input strength!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Strength\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Medicine\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddMedicine;","import { useState } from 'react';\r\nimport { addMedicine, addTest } from '../queries';\r\n\r\nconst useAddTest = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addTest(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddTest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Table, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport useAddTest from '../../../state/addMedicine/hooks/useAddTest';\r\nimport Spinner from '../../../components/spinner';\r\nimport useSearchTest from '../../../state/addMedicine/hooks/useSearchTest';\r\n\r\nconst AddTest = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddTest();\r\n    const [medicines, isLoadings, setMedicineSearch] = useSearchTest();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Test added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"testName\": form.name,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Test Name',\r\n            dataIndex: 'testName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.testName - b.testName,\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                testName: medicine.testName,\r\n                price: medicine.price\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please select test name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Test name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Test\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddTest;","import { Button, Col, Form, Row, Space, Table, Tag } from 'antd';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nconst columns = [\r\n    {\r\n        title: 'Package Name',\r\n        dataIndex: 'packageName',\r\n        key: 'packageName',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Package End Date',\r\n        dataIndex: 'packageEndDate',\r\n        key: 'packageEndDate',\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '2',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '3',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n];\r\n\r\nconst Package = () => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            <Link to=\"/home/newPackage\">Create New</Link>\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Package;\r\n","import React, { } from 'react';\r\nimport { Table, Input, Select, Button, Descriptions } from 'antd';\r\nimport PatientDetails from '../../patientDetails';\r\nconst ViewPatientRecords = (props) => {\r\n    let history = props.history;\r\n    const patientDetails = props.patientDetails;\r\n    let dataModal = [];\r\n    let userDetails = [];\r\n    const columnsModal = [\r\n        { title: 'Appointment ID', dataIndex: 'appointmentId', key: 'appointmentId' },\r\n        { title: 'Appointment Date', dataIndex: 'appointmentDate', key: 'appointmentDate' },\r\n        { title: 'Disease summary', dataIndex: 'diseaseDesc', key: 'diseaseDesc' },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            render: (text, record) => <Button type=\"primary\" onClick={() => {\r\n                history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n            }}>View</Button>,\r\n        },\r\n    ];\r\n    props.patientAppointments.map(data => {\r\n        if (data.status == \"done\") {\r\n            dataModal.push({ ...data, appointmentDate: (new Date(data.appointmentDate)).toDateString() });\r\n        }\r\n    });\r\n    console.log(\"patient\", patientDetails);\r\n    for (var key of Object.keys(patientDetails)) {\r\n        if (patientDetails[key] && key!= \"key\") {\r\n            userDetails.push(<Descriptions.Item label={key}>{patientDetails[key]}</Descriptions.Item>);\r\n        }\r\n    }\r\n    // const dataModal = [\r\n    //     {\r\n    //         key: 1,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"15 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 2,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"23 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 3,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"30 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 4,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"14 Sep 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    // ];\r\n\r\n    return (\r\n        <>\r\n            <Descriptions>\r\n            {userDetails}\r\n            </Descriptions>\r\n            <Table\r\n                columns={columnsModal}\r\n                // expandable={{\r\n                //     expandedRowRender: record => <p style={{ margin: 0 }}>{record.description}</p>,\r\n                //     rowExpandable: record => record.app !== '14 Aug',\r\n                // }}\r\n                dataSource={dataModal}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewPatientRecords;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Select, DatePicker } from 'antd';\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\nconst PatientSearchComp = (props) => {\r\n    const defaultSearch = \"patientName\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n    let inputSearch =  <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Patient by\" />\r\n\r\n    if (filterValue == \"dateRange\") {\r\n        inputSearch = <RangePicker onChange={onDateRangeSelect} disabledDate={disabledDate} />;\r\n    }\r\n    \r\n    function onDateRangeSelect(values) {\r\n        var actualDates = convertToActualDate(values);\r\n      props.onSearch(actualDates, filterValue);\r\n    }\r\n\r\n    function convertToActualDate(values) {\r\n        var date = moment(values[0]).toDate();\r\n        date.setHours(0);\r\n\r\n        var date2 = moment(values[1]).toDate();\r\n        date2.setHours(24);\r\n        return [date, date2];\r\n    }\r\n    function disabledDate(current) {\r\n        // Can not select days before today and today\r\n        return current && current > moment().endOf('day');\r\n    }\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n        <Input.Group compact>\r\n        <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n            <Option value=\"patientName\">Patient Name</Option>\r\n            <Option value=\"patientId\">Patient Id</Option>\r\n            <Option key=\"dateRange\" value=\"dateRange\">Date Range</Option>\r\n        </Select>\r\n        { inputSearch }\r\n    </Input.Group>);\r\n};\r\nexport default PatientSearchComp;\r\n","import { useState } from 'react';\r\nimport { getPatientByName } from '../queries';\r\n\r\nconst usePatientByName = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientName) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientByName(patientName);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientByName;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Input, Space, Button, Modal, Select, notification } from 'antd';\r\nimport moment from 'moment';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport ViewPatientRecords from './components/viewPatientRecords';\r\nimport Spinner from '../../components/spinner';\r\nimport PatientSearchComp from './components/patientSearchComponent';\r\nimport usePatientById from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../patientDetails';\r\nimport usePatientByName from '../../state/patientSearch/hooks/usePatientSearchByName';\r\nimport { getAppointmentByPatientId } from '../../state/appointment/queries';\r\nimport { responsiveArray } from 'antd/lib/_util/responsiveObserve';\r\nimport { getAllPatients } from '../../state/patientSearch/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nconst PatientSearch = ({ history }) => {\r\n    const [isPatientRecordModalVisible, setIsPatientRecordModalVisible] = useState(false);\r\n    const [name, setName] = useState([]);\r\n    const [showPatient, setShowPatient] = useState(\"all\");\r\n    const [allPatients, setAllPatients] = useState([]);\r\n    const [dateFilteredPatient, setDateFilteredPatient] = useState([]);\r\n    const [patientDetails, isLoading1, setPatientSearchbyId] = usePatientById();\r\n    const [currentPatientDetails, setCurrentPatientDetails] = useState({});\r\n    const [currentPatientAppointments, setCurrentPatientAppointments] = useState({});\r\n    const [patientDetailsByName, isLoading2, setPatientSearchbyName] = usePatientByName();\r\n    let data = [];\r\n\r\n    useEffect(() => {\r\n        if (showPatient === \"all\") {\r\n            setAllPatientList();\r\n        }\r\n    }, [showPatient]);\r\n\r\n    function setAllPatientList() {\r\n        getAllPatients().then(data => {\r\n            if (data) {\r\n                setAllPatients(data);\r\n            } else {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            }\r\n        }).catch(err => {\r\n\r\n        });\r\n    }\r\n    function onPatientSearch(searchValue, searchFilter) {\r\n        console.log(searchValue);\r\n\r\n        if (searchValue == '') {\r\n            getAllPatientsList();\r\n            setShowPatient(\"all\");\r\n        } else if (searchFilter == \"patientId\") {\r\n            setPatientSearchbyId(searchValue);\r\n            setShowPatient(\"patientId\");\r\n        } else if (searchFilter == \"patientName\") {\r\n            setPatientSearchbyName(searchValue);\r\n            setShowPatient(\"patientName\");\r\n        } else if (searchFilter == \"dateRange\") {\r\n            console.log(searchValue);\r\n            data = allPatients.filter(data => {\r\n                if (data.createdAt < searchValue[1] && data.createdAt > searchValue[0]) {\r\n                    console.log('aaya');\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n            setShowPatient(searchFilter);\r\n            setDateFilteredPatient(data);\r\n        }\r\n\r\n    }\r\n    if (showPatient == \"patientId\" && patientDetails != null) {\r\n        const row = [{\r\n            key: patientDetails.patientId,\r\n            patientId: patientDetails.patientId,\r\n            patientName: patientDetails.patientName,\r\n            age: patientDetails.age,\r\n            contactNum: patientDetails.contactNum,\r\n            street: patientDetails.street,\r\n            status: ['registered']\r\n        }];\r\n        data = row;\r\n    }\r\n\r\n    if (showPatient == \"patientName\" && patientDetailsByName != null) {\r\n        data = patientDetailsByName.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"all\" && allPatients.length > 0) {\r\n        data = allPatients.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"dateRange\" && dateFilteredPatient.length > 0) {\r\n        data = dateFilteredPatient.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    function getAllPatientsList() {\r\n        getAllPatients().then(data => {\r\n            if (data) {\r\n                setAllPatients(data);\r\n            } else {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            setAllPatients([]);\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n            sorter: (a, b) => a.patientName.length - b.patientName.length,\r\n            sortDirections: ['descend', 'ascend'],\r\n        },\r\n        {\r\n            title: 'Patient Id',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId',\r\n        },\r\n        {\r\n            title: 'Age',\r\n            dataIndex: 'age',\r\n            key: 'age',\r\n        },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 'contactNum',\r\n            key: 'contactNum',\r\n        },\r\n        {\r\n            title: 'Visit Type',\r\n            dataIndex: 'visitType',\r\n            key: 'visitType',\r\n            filters: [\r\n                {\r\n                    text: 'OPD',\r\n                    value: 'OPD',\r\n                },\r\n                {\r\n                    text: 'IPD',\r\n                    value: 'IPD',\r\n                },\r\n                {\r\n                    text: 'OPD to IPD',\r\n                    value: 'OPD to IPD',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.visitType == value,\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        let color = tag.length > 5 ? 'geekblue' : 'green';\r\n                        if (tag === 'loser') {\r\n                            color = 'volcano';\r\n                        }\r\n                        return (\r\n                            <Tag color={color} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Registered',\r\n                    value: 'registered',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'discharged',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        setCurrentPatientDetails(record);\r\n                        getAppointmentByPatientId(record.patientId).then(response => {\r\n                            setCurrentPatientAppointments(response);\r\n                            setIsPatientRecordModalVisible(true);\r\n                        }).catch(err => {\r\n                            notification[\"error\"]({\r\n                                message: 'Error',\r\n                                description: 'Error while searching records with Patient Id' + record.patientId,\r\n                                duration: 3\r\n                            });\r\n                        });\r\n                    }}>\r\n                        View records\r\n                    </Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <>\r\n            <PatientSearchComp onSearch={onPatientSearch} />\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n            <Modal title=\"Patient Records\" visible={isPatientRecordModalVisible} footer={null} width={800} onCancel={() => setIsPatientRecordModalVisible(false)} >\r\n                <ViewPatientRecords patientDetails={currentPatientDetails} patientAppointments={currentPatientAppointments} history={history} />\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PatientSearch;","import React, { useEffect } from 'react';\r\n\r\nconst Pharmacy = () => {\r\n    return (\r\n        <>\r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pharmacy;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePrescription = (body) => {\r\n    return axios\r\n        .post(`${api.url}/doctorService/savePrescription`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPrescriptionByAppointmentId = (appointmentId) => {\r\n    return axios\r\n        .get(`${api.url}/doctorService/getPrescriptionDetails?appointmentId=` + appointmentId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { savePrescription } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useSavePrescription = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState({});\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await savePrescription(body);\r\n\r\n    setStatus(response);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useSavePrescription;\r\n","import { PrinterOutlined, MinusCircleOutlined, PlusOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useMedicineSearch from '../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useSearchTest from '../../state/addMedicine/hooks/useSearchTest';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport useSavePrescription from '../../state/prescription/hooks/useSavePrescription';\r\nimport PatientDetails from '../patientDetails';\r\nimport '../prescription/prescription.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst renderTitle = (title) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title, count) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\n\r\n\r\nconst Prescription = ({ location, history }) => {\r\n    let options = [];\r\n    const optionsTests = [];\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [form] = Form.useForm();\r\n    const [medicineForm] = Form.useForm();\r\n    const [vitalsForm] = Form.useForm();\r\n    const [adviceForm] = Form.useForm();\r\n\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    const [response, isLoading1, setSavePrescription] = useSavePrescription();\r\n    const [tests, isLoading, setTestSearch] = useSearchTest();\r\n    // const [tests, isLoading, setTestSearch] = usePre();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        getPatientDetails(queryParams.patientId);\r\n        if (response.status == \"SUCCESS\") {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient prescription has been generated successfully',\r\n                duration: 3\r\n            });\r\n        } else if (response.status == 500) {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error saving the prescription, please check with admin',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [response]);\r\n    function getPatientDetails(patientId) {\r\n        getPatientById(patientId).then(data => {\r\n            setPatientDetails(data);\r\n        });\r\n    }\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n        console.log('Dawaiyaan', form.getFieldsValue());\r\n        console.log('tests:', medicineForm.getFieldsValue());\r\n        console.log('vitals:', vitalsForm.getFieldsValue());\r\n        const medicineList = medicineForm.getFieldsValue().users;\r\n        const testList = form.getFieldsValue().users;\r\n        const patientVitals = vitalsForm.getFieldsValue();\r\n        const body = {\r\n            appointmentDto: {\r\n                appointmentId: queryParams.appointmentId,\r\n                appointmentDate: new Date().getTime(),\r\n                patientId: queryParams.patientId,\r\n                patientName: queryParams.patientName,\r\n                doctorId: queryParams.doctorId,\r\n                height: patientVitals.height,\r\n                weight: patientVitals.weight,\r\n                Bp: patientVitals.bp,\r\n                temprature: patientVitals.temparature,\r\n                advise: adviceForm.getFieldsValue().advice,\r\n                status: \"done\"\r\n            },\r\n            prescribedMedsDtoList: null,\r\n            prescribedTestingDtoList: null\r\n        };\r\n\r\n        if (medicineList != null && medicineList.length > 0) {\r\n            body.prescribedMedsDtoList = medicineList.map(medicine => {\r\n                return { medName: medicine.medicineName, days: medicine.numberOfDays, dosage: medicine.dosage, comment: medicine.comments };\r\n            });\r\n        }\r\n\r\n        if (testList != null && testList.length > 0) {\r\n            body.prescribedTestingDtoList = testList.map(test => {\r\n                return {\r\n                    testName: test.testName,\r\n                    dateOfBooking: test.date,\r\n                    comment: test.comments\r\n                };\r\n            });\r\n        }\r\n        setSavePrescription(body);\r\n        setSubmitted(true);\r\n    };\r\n    const handleSearch = (value) => {\r\n        setMedicineSearch();\r\n    };\r\n\r\n    const handleTestSearch = (value) => {\r\n        setTestSearch();\r\n    };\r\n\r\n    if (tests.length > 0) {\r\n        tests.forEach(test => {\r\n            optionsTests.push({ value: test.testName });\r\n        });\r\n    }\r\n\r\n    if (medicines.length > 0) {\r\n        var map = new Map();\r\n\r\n        medicines.forEach(medicine => {\r\n            if (map.has(medicine.medicineType)) {\r\n                map.set(medicine.medicineType, [...map.get(medicine.medicineType), medicine.medicineName]);\r\n            } else {\r\n                map.set(medicine.medicineType, [medicine.medicineName])\r\n            }\r\n        });\r\n        console.log(map);\r\n        for (let [key, value] of map) {\r\n            console.log(key + \" = \" + value);\r\n            options.push({\r\n                label: renderTitle(key),\r\n                options: value.map(val => renderItem(val, 100)),\r\n            });\r\n        }\r\n    }\r\n    let formActions = <Button size=\"large\" type=\"primary\">Submit</Button>;\r\n    if (submitted && response.status != 500) {\r\n        formActions = (<><Button type=\"primary\" shape=\"round\" onClick={() => {\r\n            history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + queryParams.patientId + '&doctorId=' + queryParams.doctorId + '&appointmentId=' + queryParams.appointmentId });\r\n        }} icon={<PrinterOutlined />} size='large'>Print</Button>\r\n            <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large' onClick={value => history.push({ pathname: '/home/doctorAppointment' })}>Go to My Appoinments</Button></>);\r\n    }\r\n    return (\r\n        <>\r\n            <PatientDetails patientDetails={patientDetails} />\r\n            <br></br>\r\n            <Divider>Patient Vitals</Divider>\r\n\r\n            <Form\r\n                form={vitalsForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"BP\" name=\"bp\">\r\n                            <InputNumber name=\"bp\" style={{ width: '90%' }} placeholder=\"Blood pressure\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Temparature\" name=\"temparature\">\r\n                            <InputNumber name=\"temparature\" style={{ width: '90%' }} placeholder=\"Temp In degrees Celsius\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Height\" name=\"height\">\r\n                            <InputNumber name=\"height\" style={{ width: '90%' }} placeholder=\"Height in feet\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Weight\" name=\"weight\">\r\n                            <Input name=\"weight\" style={{ width: '90%' }} placeholder=\"Weight in (kgs)\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </Form>\r\n            <Divider>Prescribe Medicines</Divider>\r\n            {/* <PrescribeMedicine /> */}\r\n\r\n            <Form name=\"dynamic_form_nest_item\" form={medicineForm} onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map((field, index) => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'medicineName']}\r\n                                            fieldKey={[field.fieldKey, 'medicineName']}\r\n                                            rules={[{ required: true, message: 'Missing Medicine name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleSearch}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Medicine\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'dosage']}\r\n                                            fieldKey={[field.fieldKey, 'dosage']}\r\n                                            rules={[{ required: true, message: 'Missing Dosage' }]}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Dosage per day (M-A-N)\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">1-0-0</Option>\r\n                                                <Option value=\"1-1-0\">1-1-0</Option>\r\n                                                <Option value=\"1-1-1\">1-1-1</Option>\r\n                                                <Option value=\"0-0-1\">0-0-1</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'numberOfDays']}\r\n                                            fieldKey={[field.fieldKey, 'numberOfDays']}\r\n                                            rules={[{ required: true, message: 'Missing Number of days' }]}\r\n                                        >\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Medicines\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n\r\n            <br></br>\r\n            <Divider>Prescribe Tests</Divider>\r\n            <Form name=\"dynamic_form_nest_item2\" form={form} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'testName']}\r\n                                            fieldKey={[field.fieldKey, 'testName']}\r\n                                            rules={[{ required: true, message: 'Missing test name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleTestSearch}\r\n                                                style={{ width: 200 }}\r\n                                                options={optionsTests}\r\n                                                placeholder=\"Type test name\"\r\n                                                filterOption={(inputValue, option) =>\r\n                                                    option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                                                }\r\n                                            />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'date']}\r\n                                            fieldKey={[field.fieldKey, 'date']}\r\n                                            rules={[{ required: false }]}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Tests\r\n                                   </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                form={adviceForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={20}>\r\n                        <Form.Item name='advice' label=\"Summary\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <Row>\r\n                <Col span={12} onClick={onFinish} offset={11}>\r\n                    {formActions}\r\n                </Col>\r\n            </Row>\r\n        </>);\r\n};\r\n\r\nexport default Prescription;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport useRegistration from '../../state/registration/hooks/useRegistration';\r\nimport Spinner from '../../components/spinner';\r\nimport { registration } from '../../state/registration/queries';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst Registration = ({ location, history }) => {\r\n    const onFinish = formData => {\r\n\r\n        const form = formData.user;\r\n        const body = {\r\n            \"patientName\": form.name,\r\n            \"age\": form.age,\r\n            \"contactNum\": form.phone,\r\n            \"altContactNum\": form.alternatecontact,\r\n            \"street\": form.address,\r\n            \"state\": form.state,\r\n            \"country\": form.country,\r\n            \"visitType\": form.visit,\r\n            \"createdAt\": (new Date()).getTime()\r\n        };\r\n        registration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient has been registered successfully',\r\n                duration: 3\r\n            });\r\n            history.push({ pathname: '/home/billing', search: '?patientId=' + data.patientId + '&receiptId=' + data.recieptId + '&context=registration' });\r\n        }).catch(errr => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error in registration',\r\n                duration: 3\r\n            });\r\n\r\n        });\r\n        // setRequest(body);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'gender']} label=\"Gender\" rules={[{ required: true }]}>\r\n                    <Select\r\n                        placeholder=\"Select Gender\"\r\n                        allowClear>\r\n                        <Option value=\"male\">male</Option>\r\n                        <Option value=\"female\">female</Option>\r\n                        <Option value=\"other\">other</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'age']} label=\"Age\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'visit']} label=\"Visit Type\" rules={[{ required: true }]}>\r\n                    <Select placeholder=\"Select Visit type\">\r\n                        <Option value=\"OPD\">OPD</Option>\r\n                        <Option value=\"IPD\">IPD</Option>\r\n                        <Option value=\"OPD to IPD\">OPD to IPD</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'phone']} label=\"Phone Number\" rules={[{ required: true, message: 'Please input your phone number!' }]}>\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'alternatecontact']} label=\"Alternate Contact Number\">\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'email']} label=\"Email\" rules={[{ type: 'email' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'address']} label=\"Address\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'state']} label=\"State\">\r\n                    <Select\r\n                        defaultValue=\"bihar\"\r\n                        placeholder=\"Select State\"\r\n                        allowClear>\r\n                        <Option value=\"bihar\">Bihar</Option>\r\n                        <Option value=\"up\">UP</Option>\r\n                        <Option value=\"Karnataka\">Karnataka</Option>\r\n                        <Option value=\"Jharkhand\">Jharkhand</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'country']} label=\"Country\">\r\n                    <Select\r\n                        defaultValue=\"india\"\r\n                        placeholder=\"Select Country\"\r\n                        allowClear>\r\n                        <Option value=\"india\">India</Option>\r\n                        <Option value=\"us\">US</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" size='large' htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, { useEffect } from 'react';\r\nimport { Carousel } from 'antd';\r\nimport corousal1 from '../../../assets/images/corousal11.jpg';\r\nimport corousal2 from '../../../assets/images/corousal22.jpg';\r\nimport corousal3 from '../../../assets/images/corousal33.jpg';\r\nimport corousal4 from '../../../assets/images/corousal44.jpg';\r\nimport '../homescreen/homescreen.css';\r\nconst contentStyle = {\r\n    height: '700px',\r\n    color: '#fff',\r\n    lineHeight: '500px',\r\n    textAlign: 'center',\r\n    background: '#364d79',\r\n    fontSize: \"20px\"\r\n};\r\n\r\n\r\n\r\nconst HomeScreen = () => {\r\n    return (\r\n        <Carousel autoplay>\r\n            <div>\r\n                <div className=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal1})`, fontSize: '4em' }}>\r\n                    Welcome to Baymax Inventories\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal2})` , fontSize: '4em' , color: 'white'}}>\r\n                    Inventories made simple\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal3})`, fontSize: '4em'  }}>\r\n                   Keep track of timelines\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal4})` , fontSize: '4em' }}>\r\n                    No more paperwork\r\n                </div>\r\n            </div>\r\n        </Carousel>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import { useState } from 'react';\r\nimport { getPharmacyMedicineDetail } from '../queries';\r\n\r\nconst useGetPharmacyMedicineDetail = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPharmacyMedicineDetail(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicineDetail;","import React, { useState, useEffect } from 'react';\r\nimport { PlusOutlined, OrderedListOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport { medicineDistributionUnits } from './utils';\r\nimport queryString from 'query-string';\r\nimport useSavePharmacyMedicine from '../../../state/pharmacy/hooks/useSavePharmacyMedicine';\r\nimport useGetPharmacyMedicineDetail from '../../../state/pharmacy/hooks/useGetMedicinedetail';\r\nimport { setNestedObjectValues } from 'formik';\r\nimport { saveItemCategory, getCategoriesList, savePharmacyMedicine, getItemUnitsList, saveItemUnit } from '../../../state/pharmacy/queries';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\n// const medicineUnits = medicineDistributionUnits.map(medicineDistributionUnit => <Option key={medicineDistributionUnit}>{medicineDistributionUnit}</Option>);\r\nconst AddNewMedicine = ({ location, history }) => {\r\n    let index = 0;\r\n    const [form] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [newItemUnit, setNewItemUnit] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n    const [itemUnits, setItemUnits] = useState([]);\r\n    const [medicineDetail, setRequest1] = useGetPharmacyMedicineDetail();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            setRequest1(queryParams.medicineId);\r\n        }\r\n        intialiseCategories();\r\n        intialiseItemUnits();\r\n    }, []);\r\n\r\n    if (medicineDetail != null && queryParams.mode == \"edit\") {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: medicineDetail.medicineId,\r\n                medicineName: medicineDetail.medicineName,\r\n                genericName: medicineDetail.genericName,\r\n                boxSize: Number.parseInt(medicineDetail.boxSize),\r\n                expDate: medicineDetail.expiryDate,\r\n                medicineShelf: medicineDetail.medicineShelf,\r\n                details: medicineDetail.details,\r\n                category: medicineDetail.category,\r\n                unit: medicineDetail.unit,\r\n                triggerValue: Number.parseFloat(medicineDetail.triggerValue),\r\n                image: medicineDetail.image,\r\n                salePrice: Number.parseFloat(medicineDetail.salePrice),\r\n                supplierPrice: medicineDetail.suppliersPrice,\r\n                tax: medicineDetail.tax,\r\n                supplierName: medicineDetail.supplierName,\r\n                availability: medicineDetail.availability,\r\n                stockQuantity: medicineDetail.stockQuantity,\r\n            }\r\n        });\r\n    }\r\n\r\n    function intialiseCategories() {\r\n        getCategoriesList().then(data => {\r\n            if (Array.isArray(data)) {\r\n                setItems(data);\r\n            }\r\n        });\r\n    }\r\n    function intialiseItemUnits() {\r\n        getItemUnitsList().then(data => {\r\n            if (Array.isArray(data)) {\r\n                setItemUnits(data);\r\n            }\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        console.log(form);\r\n        const body = {\r\n            medicineName: form.medicineName,\r\n            genericName: form.genericName,\r\n            boxSize: form.boxSize,\r\n            details: form.details,\r\n            category: form.category,\r\n            unit: form.unit,\r\n            triggerValue: form.triggerValue,\r\n            image: form.image,\r\n            salePrice: form.salePrice,\r\n            availability: form.availability,\r\n            stockQuantity: form.stockQuantity\r\n        };\r\n\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            body[\"medicineId\"] = queryParams.medicineId;\r\n        }\r\n\r\n        savePharmacyMedicine(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Item ${form.medicineName} ${queryParams.mode == 'edit' ? 'edited' : 'added'} successfully`,\r\n                duration: 3\r\n            });\r\n            clearForm();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while saving Item`,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n\r\n    function onItemUnitNameChange(event) {\r\n        setNewItemUnit(event.target.value);\r\n    };\r\n    function addItemCategory() {\r\n        // setName('');\r\n        const body = {\r\n            categoryId: null,\r\n            categoryName: name\r\n        };\r\n        saveItemCategory(body).then(data => {\r\n            setItems([...items, { categoryId: null, categoryName: name } || `New item ${index++}`]);\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Category ${name} added successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while creating category`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function addItemUnit() {\r\n        const body = {\r\n            id: null,\r\n            unitName: newItemUnit\r\n        };\r\n        saveItemUnit(body).then(data => {\r\n            setItemUnits([...itemUnits, { id: null, unitName: newItemUnit } || `New item ${index++}`]);\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Item Unit ${newItemUnit} added successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while creating category`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function clearForm() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: null,\r\n                medicineName: \"\",\r\n                genericName: \"\",\r\n                boxSize: 0,\r\n                details: \"\",\r\n                category: \"\",\r\n                unit: \"\",\r\n                triggerValue: 0,\r\n                image: null,\r\n                salePrice: 0,\r\n                availability: \"In stock\",\r\n                stockQuantity: 0\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageSuppliers' });\r\n            }} type=\"dashed\" icon={<PlusOutlined />}>Add Supplier</Button>\r\n            <Button type=\"dashed\" onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Inventory</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Bulk Items</Button>\r\n            <br /><br /><br />\r\n            <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'availability']} label=\"Availability\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"In stock\">In Stock</Option>\r\n                                <Option value=\"Out of stock\">Out Of Stock</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineName']} label=\"Item Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'genericName']} label=\"Local Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'boxSize']} label=\"Box Size\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'expiryDate']} label=\"Expiry Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineShelf']} label=\"Medicine Shelf\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'details']} label=\"Details\">\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'category']} label=\"Category\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select category\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItemCategory}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item.categoryName}>{item.categoryName}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'image']} label=\"Image\">\r\n                            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\r\n                                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'stockQuantity']} label=\"Stock Quantity\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'unit']} label=\"Unit\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select Item Unit\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={newItemUnit} onChange={onItemUnitNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItemUnit}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {itemUnits.map(item => (\r\n                                    <Option key={item.unitName}>{item.unitName}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'triggerValue']} label=\"Reorder value\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salePrice']} label=\"Sale price per unit\" rules={[{ required: true }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 10 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save and Add another\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default AddNewMedicine;\r\n","import { Space, Table, Input, Select, Typography, notification, Tag } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport { getPharmacyMedicineList, getPharmacyMedicineListByName, deleteMedicine, getCategoriesList } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nconst { Text } = Typography;\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\nconst ManageMedicines = ({ location, history }) => {\r\n    let data = [];\r\n    const [medicineData, setMedicineData] = useState([]);\r\n    const [itemCategories, setItemCategories] = useState([]);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [filterValue, setfilterValue] = useState(\"medicineName\");\r\n\r\n    useEffect(() => {\r\n        getAllMedicines();\r\n        intialiseCategories();\r\n    }, []);\r\n\r\n    function intialiseCategories() {\r\n        getCategoriesList().then(data => {\r\n            if (Array.isArray(data)) {\r\n                setItemCategories(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    if (medicineData.length > 0) {\r\n        const tempData = [];\r\n        medicineData.forEach((medicine, index) => {\r\n            tempData.push({\r\n                key: index,\r\n                name: medicine.medicineName,\r\n                medicineId: medicine.medicineId,\r\n                category: medicine.category,\r\n                supplierPrice: medicine.supplierPrice,\r\n                triggerValue: medicine.triggerValue,\r\n                salePrice: medicine.salePrice,\r\n                genericName: medicine.genericName,\r\n                expDate: medicine.expDate,\r\n                availability: medicine.availability,\r\n                stockQuantity: medicine.stockQuantity\r\n            });\r\n        });\r\n        data = [...tempData];\r\n    }\r\n\r\n    function onMedicineSearch(value) {\r\n        getPharmacyMedicineListByName(value).then(data => {\r\n            if (data) {\r\n                setMedicineData([...data]);\r\n            }\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: `Error while searching`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function deleteMedicineRecord(medicineId) {\r\n        deleteMedicine(medicineId).then(data => {\r\n            getAllMedicines();\r\n            notification[\"success\"]({\r\n                message: 'Success',\r\n                description: 'Item deleted successfully',\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function getAllMedicines() {\r\n        getPharmacyMedicineList().then(data => {\r\n            setMedicineData([...data]);\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text, record) => (\r\n                <Text type={record.stockQuantity - record.triggerValue > 0 ? 'success' : 'danger'}>{text}</Text>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Category',\r\n            dataIndex: 'category',\r\n            key: 'category',\r\n            filters: itemCategories.map(data => { return { text: data.categoryName, value: data.categoryName } }),\r\n            onFilter: (value, record) => record.category == value,\r\n            sorter: (a, b) => a.category - b.category,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Purchase Price',\r\n            dataIndex: 'supplierPrice',\r\n            key: 'supplierPrice',\r\n        },\r\n        {\r\n            title: 'Selling Price',\r\n            dataIndex: 'salePrice',\r\n            key: 'salePrice',\r\n        },\r\n        {\r\n            title: 'Common Name',\r\n            dataIndex: 'genericName',\r\n            key: 'genericName',\r\n        },\r\n        {\r\n            title: 'Expiry date',\r\n            dataIndex: 'expDate',\r\n            key: 'expDate',\r\n        },\r\n        {\r\n            title: 'Stock',\r\n            dataIndex: 'availability',\r\n            key: 'availability',\r\n            render: text => (text == 'In stock' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n        },\r\n        {\r\n            title: 'Stock Quantity',\r\n            dataIndex: 'stockQuantity',\r\n            key: 'stockQuantity',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=prefetch' + '&medicineName=' + record.name });\r\n                    }}>Place Order</a>\r\n                    {/* <a>Stock</a> */}\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addNewMedicine', search: '?mode=edit' + '&medicineId=' + record.medicineId });\r\n                    }}>Edit</a>\r\n                    <a onClick={() => {\r\n                        deleteMedicineRecord(record.medicineId);\r\n                    }}>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"medicineName\">Item Name</Option>\r\n                    <Option value=\"genericName\">Common Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onMedicineSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageMedicines;","import { useState } from 'react';\r\nimport { getPurchaseOrderList } from '../queries';\r\n\r\nconst UseGetAllPurchaseOrder = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPurchaseOrderList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default UseGetAllPurchaseOrder;","import { useState } from 'react';\r\nimport { deletePurchaseOrder } from '../queries';\r\n\r\nconst useDeletePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    const response = await deletePurchaseOrder(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n    } else {\r\n      setStatus(false);\r\n    }\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useDeletePurchaseOrder;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space, notification, Input, Select } from 'antd';\r\nimport UseGetAllPurchaseOrder from '../../../state/pharmacy/hooks/UseGetAllPurchaseOrders';\r\nimport useDeletePurchaseOrder from '../../../state/pharmacy/hooks/useDeletePurchaseOrder';\r\nimport { getRenderPropValue } from 'antd/lib/_util/getRenderPropValue';\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n// ];\r\n\r\nfunction resolveTag(tag) {\r\n    if (tag == \"cancelled\") {\r\n        return \"red\";\r\n    } else if (tag == \"orderPlaced\") {\r\n        return \"orange\";\r\n    } else {\r\n        return \"green\";\r\n    }\r\n\r\n}\r\nconst PurchaseOrder = ({ location, history }) => {\r\n\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Invoice No.',\r\n            dataIndex: 'invoiceNumber',\r\n            key: 'invoiceNumber',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Order Date',\r\n            dataIndex: 'orderDate',\r\n            key: 'orderDate',\r\n            render: text => <a>{text}</a>,\r\n            sorter: (a, b) => a.orderDate - b.orderDate,\r\n        },\r\n        {\r\n            title: 'Delivery Date',\r\n            dataIndex: 'deliveryDate',\r\n            key: 'deliveryDate',\r\n            sorter: (a, b) => a.deliveryDate - b.deliveryDate,\r\n        },\r\n        {\r\n            title: 'Supplier',\r\n            dataIndex: 'supplier',\r\n            key: 'supplier',\r\n            filters: [\r\n                {\r\n                    text: 'ACME',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'GSK',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Medimex',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.supplier == value,\r\n        },\r\n        {\r\n            title: 'Store',\r\n            dataIndex: 'store',\r\n            key: 'store',\r\n        },\r\n        {\r\n            title: 'Total Amount',\r\n            dataIndex: 'totalAmount',\r\n            key: 'totalAmount',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color={resolveTag(tag)} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Cancelled',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Order Placed',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=edit' + '&purchaseOrderId=' + record.purchaseOrderId });\r\n                    }}>View</a>\r\n                    <a onClick={() => deletePurchaseOrder(record)}>Cancel</a>\r\n                    {/* <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>edit</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [filterValue, setfilterValue] = useState(\"invoiceNumber\");\r\n    const [purchaseOrders, isLoading, setGetAllPurchaseOrder] = UseGetAllPurchaseOrder();\r\n    const [status, setDeletePurchaseOrder] = useDeletePurchaseOrder();\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n        setGetAllPurchaseOrder();\r\n    }, []);\r\n\r\n    function deletePurchaseOrder(record) {\r\n        const body = {\r\n            purchaseOrderId: record.purchaseOrderId,\r\n            supplierName: null,\r\n            orderDate: null,\r\n            storeName: null,\r\n            // totalAmount: null,\r\n            deliveryDate: null,\r\n            rol: null,\r\n            productDetails: null,\r\n        };\r\n        setDeletePurchaseOrder(body);\r\n    }\r\n    if (purchaseOrders.length > 0) {\r\n        data = purchaseOrders.map((order, index) => {\r\n            return {\r\n                key: index,\r\n                invoiceNumber: order.invoiceNumber,\r\n                purchaseOrderId: order.purchaseOrderId,\r\n                orderDate: (new Date(order.orderDate)).toDateString(),\r\n                deliveryDate: (new Date(order.deliveryDate)).toDateString(),\r\n                supplier: order.supplierName,\r\n                store: order.storeName,\r\n                totalAmount: order.totalAmount,\r\n                status: (order.status != null ? [order.status] : ['Order Placed'])\r\n            };\r\n        });\r\n    }\r\n    function onOrderSearch(searchValue) {\r\n\r\n        if (searchValue == '') {\r\n            // setRequest();\r\n            // // setShowPatient(\"all\");\r\n        } else if (filterValue == \"invoiceNumber\") {\r\n            // setPatientSearchbyId(searchValue);\r\n            // setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"supplierName\") {\r\n            // setPatientSearchbyName(searchValue);\r\n            // setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"invoiceNumber\">Invoice Number</Option>\r\n                    <Option value=\"supplierName\">Supplier</Option>\r\n                    {/* <Option value=\"SupplierName\">Supplier Name</Option> */}\r\n                </Select>\r\n                <Input.Search onSearch={onOrderSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getSuppliersList } from '../queries';\r\n\r\nconst useGetAllSuppliers = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getSuppliersList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetAllSuppliers;","import { useState } from 'react';\r\nimport { getPurchaseOrderDetails } from '../queries';\r\n\r\nconst useGetPurchaseOrderDetails = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPurchaseOrderDetails(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPurchaseOrderDetails;","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useSavePurchaseOrder from '../../../state/pharmacy/hooks/useSavePurchaseOrder';\r\nimport useGetPurchaseOrderDetails from '../../../state/pharmacy/hooks/useGetPurchaseOrderDetails';\r\nimport { savePurchaseOrder } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPurchaseOrder = ({ location, history }) => {\r\n    const medicineMap = new Map();\r\n    let options = [];\r\n    const supplierOptions = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    let index = 0;\r\n    const [purchaseDetailsForm] = Form.useForm();\r\n    const [productListForm] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n    const [suppliers, isLoadings, setSupplierSearch] = useGetAllSuppliers();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [orderDetail, setGetPurchaseOrderDetails] = useGetPurchaseOrderDetails();\r\n    // const [purchaseOrderList, isLoading1, setPurchaseOrderListFetch] = UseGetAllPurchaseOrder();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setSupplierSearch();\r\n        if (queryParams.mode == \"edit\" && queryParams.purchaseOrderId != null) {\r\n            setGetPurchaseOrderDetails(queryParams.purchaseOrderId);\r\n        }\r\n    }, []);\r\n\r\n\r\n    if (orderDetail != null) {\r\n        console.log(orderDetail);\r\n        purchaseDetailsForm.setFieldsValue({\r\n            user: {\r\n                supplierName: orderDetail.supplierName,\r\n                orderDate: moment(new Date(orderDetail.orderDate), 'YYYY-MM-DD'),\r\n                storeName: orderDetail.storeName,\r\n                status: orderDetail.status,\r\n                invoiceNumber: orderDetail.invoiceNumber,\r\n                deliveryDate: moment(new Date(orderDetail.deliveryDate), 'YYYY-MM-DD'),\r\n                rol: orderDetail.rol\r\n            }\r\n        });\r\n        productListForm.setFieldsValue({\r\n            user: {\r\n                totalAmount: orderDetail.totalAmount,\r\n                totalGST: orderDetail.totalGST,\r\n                totalDiscount: orderDetail.totalDiscount,\r\n            }\r\n        });\r\n        if (orderDetail.productDetails != null) {\r\n            const productList = [];\r\n            orderDetail.productDetails.forEach(product => {\r\n                productList.push({\r\n                    productId: product.productId,\r\n                    productName: product.productName,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    batchNumber: product.batchNumber,\r\n                    expiryDate: moment(new Date(product.expiryDate), 'YYYY-MM-DD'),\r\n                    discount: product.discount,\r\n                    tax: product.tax,\r\n                });\r\n            });\r\n            productListForm.setFieldsValue({\r\n                users: [...productList]\r\n            });\r\n        }\r\n\r\n    }\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach(supplier => {\r\n            supplierOptions.push({ value: supplier.supplierName, label: supplier.supplierName });\r\n        });\r\n    }\r\n    if (medicines.length > 0) {\r\n        medicines.forEach(medicine => {\r\n            options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            medicineMap.set(medicine.medicineName, medicine);\r\n        });\r\n    }\r\n    if (queryParams.mode == \"prefetch\") {\r\n\r\n        productListForm.setFieldsValue({\r\n            users: [{\r\n                productId: null,\r\n                productName: queryParams.medicineName,\r\n                quantity: 1,\r\n                unit: \"\",\r\n                purchaseCost: \"\",\r\n                batchNumber: \"\",\r\n                expDate: \"\",\r\n                discount: \"\",\r\n                tax: \"\"\r\n            }]\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const purchaseDetails = purchaseDetailsForm.getFieldsValue().user;\r\n        const productList = productListForm.getFieldsValue().users;\r\n        const finalCharges = productListForm.getFieldsValue().user;\r\n        const body = {\r\n            purchaseOrderId: queryParams.purchaseOrderId,\r\n            supplierName: purchaseDetails.supplierName,\r\n            orderDate: purchaseDetails.orderDate,\r\n            storeName: purchaseDetails.storeName,\r\n            invoiceNumber: purchaseDetails.invoiceNumber,\r\n            totalAmount: finalCharges.totalAmount,\r\n            totalGST: finalCharges.totalGST,\r\n            totalDiscount: finalCharges.totalDiscount,\r\n            deliveryDate: purchaseDetails.deliveryDate,\r\n            rol: purchaseDetails.rol,\r\n            status: purchaseDetails.status,\r\n            productDetails: [],\r\n        };\r\n        if (productList != null && productList.length > 0) {\r\n            productList.forEach(product => {\r\n                const medicine = medicineMap.get(product.productName);\r\n                body.productDetails.push({\r\n                    productId: product.productId,\r\n                    purchaseOrderId: queryParams.purchaseOrderId,\r\n                    medicineId: medicine.medicineId,\r\n                    productName: product.productName,\r\n                    batchNumber: product.batchNumber,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    discount: product.discount,\r\n                    tax: product.tax\r\n                });\r\n            });\r\n        }\r\n        savePurchaseOrder(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n        // setMedicineSearch();\r\n    }\r\n\r\n    const onSearchSupplier = (value) => {\r\n        // setSupplierSearch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/purchaseOrderList' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Item list</Button>\r\n            <br /><br /><br />\r\n            <Form form={purchaseDetailsForm}  {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'rol']} label=\"ROL\">\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear>\r\n                                <Option value=\"orderPlaced\">Order Placed</Option>\r\n                                <Option value=\"delivered\">Delivered</Option>\r\n                                <Option value=\"cancelled\">Cancelled</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'supplierName']} label=\"Suppliers Name\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                onSearch={onSearchSupplier}\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                                options={supplierOptions}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Supplier name\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'deliveryDate']} label=\"Delivery Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'invoiceNumber']} label=\"Invoice Number\">\r\n                            <Input style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'orderDate']} label=\"Order Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'storeName']} label=\"Store Name\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select Store\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'salesStartDate']} label=\"Sales Start Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salesEndDate']} label=\"Sales End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form form={productListForm} name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'batchNumber']}\r\n                                            fieldKey={[field.fieldKey, 'batchNumber']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 150 }} placeholder=\"Batch No.\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'unit']}\r\n                                            fieldKey={[field.fieldKey, 'unit']}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Unit\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">bottle</Option>\r\n                                                <Option value=\"1-1-0\">box</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'purchaseCost']}\r\n                                            fieldKey={[field.fieldKey, 'purchaseCost']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 150 }} placeholder=\"Purchase Cost\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'expiryDate']}\r\n                                            fieldKey={[field.fieldKey, 'expiryDate']}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'discount']}\r\n                                            fieldKey={[field.fieldKey, 'discount']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"discount\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'tax']}\r\n                                            fieldKey={[field.fieldKey, 'tax']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"tax\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalGST']} label=\"Total GST\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalDiscount']} label=\"Total Discount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPurchaseOrder;\r\n","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst IndentPreparation = () => {\r\n    let options = [];\r\n    let index = 0;\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientId']} label=\"Patient Search\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Reg. No\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'indentDate']} label=\"Indent Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientName']} label=\"Patient Name\">\r\n                            <Input placeholder=\"Patient Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'consultantName']} label=\"Consultant Name\">\r\n                            <Input placeholder=\"Consultant Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'mobileNumber']} label=\"Mobile\">\r\n                            <Input placeholder=\"Mobile Number\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'comments']} label=\"Comments\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'address']} label=\"Address\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'uom']}\r\n                                            fieldKey={[field.fieldKey, 'uom']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 125 }} placeholder=\"UOM\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'mrp']}\r\n                                            fieldKey={[field.fieldKey, 'mrp']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"MRP\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'stockQuantity']}\r\n                                            fieldKey={[field.fieldKey, 'stockQuantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Stock Quantity\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item htmlType=\"submit\">\r\n                            <Button type=\"primary\">\r\n                                Bill\r\n                            </Button>\r\n                            <Button type=\"primary\" style={{ marginLeft: '15px' }} >\r\n                                Add New\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default IndentPreparation;","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table, Space } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useAddSupplier from '../../../state/pharmacy/hooks/useAddSupplier';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\nimport { saveSupplier } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\n\r\nconst ManageSupplier = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    const [selectedRowId, setSelectedRowId] = useState(\"\");\r\n    const [suppliers, isLoadings, setSupplierSearch] = useGetAllSuppliers();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        setSupplierSearch();\r\n    }, []);\r\n    const onFinish = formData => {\r\n        const body = {\r\n            \"supplierId\": selectedRowId,\r\n            \"supplierName\": formData.name,\r\n            \"email\": formData.email,\r\n            \"phoneNumber\": formData.phone,\r\n            \"address\": formData.address,\r\n        };\r\n        saveSupplier(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Supplier added successfully',\r\n                duration: 3\r\n            });\r\n            setSupplierSearch();\r\n            clearForm();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function clearForm() {\r\n        setSelectedRowId(null);\r\n        form.setFieldsValue({\r\n            \"name\": \"\",\r\n            \"email\": \"\",\r\n            \"phone\": \"\",\r\n            \"address\": \"\",\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'supplierName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email'\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber'\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => editSupplier(record)}>Edit</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    function editSupplier(record) {\r\n        setSelectedRowId(record.supplierId);\r\n        form.setFieldsValue({\r\n            \"name\": record.supplierName,\r\n            \"email\": record.email,\r\n            \"phone\": record.phoneNumber,\r\n            \"address\": record.address,\r\n        });\r\n    }\r\n\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach((supplier, index) => {\r\n            data.push({\r\n                key: index,\r\n                supplierId: supplier.supplierId,\r\n                supplierName: supplier.supplierName,\r\n                email: supplier.email,\r\n                phoneNumber: supplier.phoneNumber,\r\n                address: supplier.address,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Supplier name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[{ required: false, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    rules={[{ required: false, message: 'Please input contact!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Contact\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"address\"\r\n                    rules={[{ required: false, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Address\" />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Supplier\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" onClick={clearForm}> Clear form </Button>\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageSupplier;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space } from 'antd';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Patient Reg No',\r\n        dataIndex: 'regNo',\r\n        key: 'regNo',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Patient Name',\r\n        dataIndex: 'patientName',\r\n        key: 'patientName',\r\n    },\r\n    {\r\n        title: 'Indent Date and Time',\r\n        dataIndex: 'indentDate',\r\n        key: 'indentDate',\r\n    },\r\n    {\r\n        title: 'Submitted By',\r\n        dataIndex: 'submittedBy',\r\n        key: 'submittedBy',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n    },\r\n    {\r\n        key: '2',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n    {\r\n        key: '3',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n];\r\n\r\nconst IndentList = () => {\r\n    return (\r\n        <>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IndentList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\nconst Certificates = () => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'name']} label=\"Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'guardianName']} label=\"Guardian Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'relation']} label=\"Relation\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'dateAndTime']} label=\"Date and time\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <ReactQuill theme=\"snow\" value={value} onChange={setValue} />\r\n\r\n            <Row style={{ textAlign: 'right', marginTop: 30 }}>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Generate\r\n                            </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Certificates;\r\n","import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Form, Input, Switch, InputNumber, Row, Select, Space } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPackage = () => {\r\n    let options = [];\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"dashed\" icon={<PlusOutlined />}>All Packages</Button>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageName']} label=\"Package Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageEndDate']} label=\"Package End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packagePrice']} label=\"Package Price\" rules={[{ required: true, type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\" >\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"price\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPackage;\r\n","import React, { useEffect } from 'react';\r\n\r\nconst InProgress = () => {\r\n    return (\r\n        <>\r\n        <h1 style={{fontSize: '56px'}}>The Page is in Progress ...</h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InProgress;\r\n","import { useState } from 'react';\r\nimport { getPrescriptionByAppointmentId } from '../queries';\r\n\r\nconst useGetPrescriptionByAppointmentId = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (appointmentId) => {\r\n        const response = await getPrescriptionByAppointmentId(appointmentId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPrescriptionByAppointmentId;","import React, { useRef } from 'react';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\nimport './printPrescription.css';\r\nexport class PrintPrescription extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const appointmentId = this.props.appointmentId;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const patientVitals = this.props.patientVitals;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        let medicineTable = \"\";\r\n        let testTable = \"\";\r\n        if (this.props.medicineList != null && this.props.medicineList.length > 0) {\r\n            const medicineList = this.props.medicineList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.medicineName}</td>\r\n                        <td>{item.dosage}</td>\r\n                        <td>{item.days}</td>\r\n                        <td>{item.comment}</td>\r\n                    </tr>)\r\n            });\r\n            medicineTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed medicines</h3>\r\n                <table class=\"itemTable\" >\r\n                    <tr>\r\n                        <th>Medicine Name</th>\r\n                        <th>Dosage</th>\r\n                        <th>Days</th>\r\n                        <th>Comment</th>\r\n                    </tr>\r\n                    {medicineList}\r\n                </table>\r\n            </div>\r\n        }\r\n        if (this.props.testList != null && this.props.testList.length > 0) {\r\n            const testList = this.props.testList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.testName}</td>\r\n                        <td>{item.dateOfBooking}</td>\r\n                        <td>{item.dateOfResult}</td>\r\n                        <td>{item.reportDesc}</td>\r\n                        <td>{item.testDesc}</td>\r\n                    </tr>)\r\n            });\r\n            testTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed tests</h3>\r\n                <table class=\"itemTable\">\r\n                    <tr>\r\n                        <th>Test Name</th>\r\n                        <th>Test Date</th>\r\n                        <th>Report Date</th>\r\n                        <th>Doctor comment</th>\r\n                        <th>Report summary</th>\r\n                    </tr>\r\n                    {testList}\r\n                </table>\r\n            </div>\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Info</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>{patientDetails.patientName}</th>\r\n                            <td>Age</td>\r\n                            <td>{patientDetails.age}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>PatientId</td>\r\n                            <td>{patientId}</td>\r\n                            <td>AppointmentId</td>\r\n                            <td>{appointmentId}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Date</td>\r\n                            <td>{todaysDate}</td>\r\n                            <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Vitals</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Height : {patientVitals.height}</th>\r\n                            <td>Weight : {patientVitals.weight}</td>\r\n                            <td>Bp : {patientVitals.Bp}</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Temperature : {patientVitals.temperature}</td>\r\n                            <td>Disease description : {patientVitals.diseaseDesc}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            {/* <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td> */}\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    {medicineTable}\r\n                    {testTable}\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Appointment summary : {patientVitals.advise}</th>\r\n                        </tr>\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        {/* <div>Cashier Signature</div> */}\r\n                        <div style={{ float: 'right' }}>Doctor's Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Table, Descriptions, Button } from 'antd';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useGetPrescriptionByAppointmentId from '../../../state/prescription/hooks/useGetPrescriptionByAppointmentId';\r\nimport queryString from 'query-string';\r\nimport usePatientById from '../../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../../patientDetails';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport { PrintPrescription } from '../printPrescription';\r\nconst medicinecolumns = [\r\n    {\r\n        title: 'Medicine Name',\r\n        dataIndex: 'medicineName',\r\n    },\r\n    {\r\n        title: 'Dosage',\r\n        dataIndex: 'dosage',\r\n    },\r\n    {\r\n        title: 'Days',\r\n        dataIndex: 'days',\r\n    },\r\n    {\r\n        title: 'Comment',\r\n        dataIndex: 'comment',\r\n    },\r\n];\r\n\r\nconst testcolumns = [\r\n    {\r\n        title: 'Test Name',\r\n        dataIndex: 'testName',\r\n    },\r\n    {\r\n        title: 'Test Date',\r\n        dataIndex: 'dateOfBooking',\r\n    },\r\n    {\r\n        title: 'Report Date',\r\n        dataIndex: 'dateOfResult',\r\n    },\r\n    {\r\n        title: 'Doctor comment',\r\n        dataIndex: 'testDesc',\r\n\r\n    },\r\n    {\r\n        title: 'Report Summary',\r\n        dataIndex: 'reportDesc',\r\n\r\n    }\r\n];\r\n\r\n\r\nconst ViewPrescription = ({ location, history }) => {\r\n    const medicineData = [];\r\n    const testData = [];\r\n\r\n    let appointmentDetails = {\r\n        appointmentId: '',\r\n        diseaseDesc: '',\r\n        advise: '',\r\n        patientId: '',\r\n        patientName: '',\r\n        doctorId: '',\r\n        height: '',\r\n        weight: '',\r\n        Bp: '',\r\n        createdAt: '',\r\n        appointmentDate: '',\r\n        timeSlot: '',\r\n        status: '',\r\n        temperature: ''\r\n    };\r\n\r\n    const queryParams = queryString.parse(location.search);\r\n    const [prescriptionDetails, setPrescriptionDetails] = useGetPrescriptionByAppointmentId();\r\n    const [patientDetails, isLoading, setPatientSearchById] = usePatientById(queryParams.patientId);\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        setPrescriptionDetails(queryParams.appointmentId);\r\n        setPatientSearchById(queryParams.patientId);\r\n    }, []);\r\n\r\n    if (prescriptionDetails != null) {\r\n        console.log(prescriptionDetails);\r\n        if (prescriptionDetails.appointmentDto != null) {\r\n            const appointmentDto = prescriptionDetails.appointmentDto;\r\n            console.log('le bhgat', appointmentDto);\r\n            appointmentDetails = {\r\n                appointmentId: appointmentDto.appointmentId,\r\n                diseaseDesc: appointmentDto.diseaseDesc,\r\n                advise: appointmentDto.advise,\r\n                patientId: appointmentDto.patientId,\r\n                patientName: appointmentDto.patientName,\r\n                doctorId: appointmentDto.doctorId,\r\n                height: appointmentDto.height,\r\n                weight: appointmentDto.weight,\r\n                Bp: appointmentDto.Bp,\r\n                createdAt: appointmentDto.createdAt,\r\n                appointmentDate: appointmentDto.appointmentDate,\r\n                timeSlot: appointmentDto.timeSlot,\r\n                status: appointmentDto.status,\r\n            }\r\n        }\r\n\r\n        if (prescriptionDetails.prescribedMedsDtoList != null) {\r\n            prescriptionDetails.prescribedMedsDtoList.forEach((medicine, index) => {\r\n                medicineData.push({\r\n                    key: medicine.medName + index,\r\n                    medicineName: medicine.medName,\r\n                    dosage: medicine.dosage,\r\n                    days: medicine.days,\r\n                    comment: medicine.comment\r\n\r\n                });\r\n            });\r\n        }\r\n        if (prescriptionDetails.prescribedTestingDtoList != null) {\r\n            prescriptionDetails.prescribedTestingDtoList.forEach((test, index) => {\r\n                testData.push({\r\n                    key: test + index,\r\n                    testName: test.testDesc,\r\n                    dateOfBooking: test.dateOfBooking,\r\n                    dateOfResult: test.dateOfResult,\r\n                    reportDesc: test.reportDesc,\r\n                    testDesc: test.comment,\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" style={{ float: \"right\" }} shape=\"round\" icon={<PrinterOutlined />} size=\"default\" onClick={handlePrint}>\r\n                Print\r\n        </Button>\r\n            <div style={{ display: 'none' }}>\r\n                <PrintPrescription ref={componentRef} patientVitals={appointmentDetails} appointmentId={appointmentDetails.appointmentId} patientId={queryParams.patientId} medicineList={medicineData} testList={testData} patientDetails={patientDetails} />\r\n            </div>\r\n            <h4>Patient Info</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Name\">{patientDetails.patientName} </Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"AppointmentId\">{appointmentDetails.appointmentId}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{patientDetails.visitType}</Descriptions.Item>\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Patient Vitals</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Height\">{appointmentDetails.height}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Weight\">{appointmentDetails.weight}</Descriptions.Item>\r\n                <Descriptions.Item label=\"BP\">{appointmentDetails.Bp}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Temperature\">{appointmentDetails.temperature}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Disease description\">{appointmentDetails.diseaseDesc}</Descriptions.Item>\r\n\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Prescribed Medicines</h4>\r\n            <Table columns={medicinecolumns} dataSource={medicineData} size=\"middle\" />\r\n            <hr />\r\n            <h4>Prescribed Tests</h4>\r\n            <Table columns={testcolumns} dataSource={testData} size=\"middle\" />\r\n            <hr />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Appointment Summary\">{appointmentDetails.advise}</Descriptions.Item>\r\n            </Descriptions>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default ViewPrescription;","export const registration = { label: \"Registration\", link: \"/registration\" }\r\nexport const patientSearch = { label: \"Search Patients\", link: \"/patientSearch\" }\r\nexport const doctorAppointment = { label: \"Doctor Appointment\", link: \"/doctorAppointment\" }\r\nexport const addDoctor = { label: \"Add Doctors\", link: \"/addDoctor\" }\r\nexport const addMedicine = { label: \"Add Medicines\", link: \"/addMedicine\" }\r\nexport const addTest = { label: \"Add Test\", link: \"/addTest\" }\r\nexport const serviceCatalogue = { label: \"Service Catalogue\", link: \"/inProgress\" }\r\nexport const addNewMedicine = { label: \"Add New Item\", link: \"/addNewMedicine\" }\r\nexport const manageMedicines = { label: \"Manage Inventory\", link: \"/manageMedicines\" }\r\nexport const purchaseOrderList = { label: \"Purchase Order List\", link: \"/purchaseOrderList\" }\r\nexport const newPurchaseOrder = { label: \"New Purchase Order\", link: \"/newPurchaseOrder\" }\r\nexport const manageSuppliers = { label: \"Manage Suppliers\", link: \"/manageSuppliers\" }\r\nexport const billing = { label: \"Billing\", link: \"/billing\" };\r\nexport const billSearch = { label: \"Bill Search\", link: \"/billSearch\" };\r\nexport const appointment = { label: \"Appointment\", link: \"/appointment\" };\r\nexport const certificates = { label: \"Certificates\", link: \"/certificates\" };\r\nexport const packageManagement = { label: \"Package Management\", link: \"/package\" };\r\nexport const canteen = { label: \"Canteen\", link: \"/canteen\" };\r\nexport const pharmacy = { label: \"Pharmacy\", link: \"/pharmacy\" };\r\nexport const reimbursements = { label: \"Reimbursements\", link: \"/inProgress\" };\r\nexport const insurance = { label: \"Insurance\", link: \"/inProgress\" };\r\nexport const certificateCreation = { label: \"Certificate creation\", link: \"/inProgress\" };\r\nexport const referrals = { label: \"Referrals\", link: \"/inProgress\" };\r\nexport const reports = { label: \"Reports\", link: \"/reports\" };\r\n\r\nexport const doctorRoutes = [doctorAppointment];\r\nexport const pharmacyRoutes = [addNewMedicine, manageMedicines, purchaseOrderList, newPurchaseOrder, manageSuppliers, billing, billSearch];\r\nexport const inventoryRoutes = [addNewMedicine, manageMedicines, purchaseOrderList, newPurchaseOrder, manageSuppliers, billing, billSearch, reports];\r\nexport const receptionRoutes = [registration, patientSearch, appointment, billing, billSearch];\r\nexport const upcomingRoutes = [reports, certificates, packageManagement, canteen, pharmacy, reimbursements, insurance, certificateCreation, referrals];\r\nexport const adminRoutes = [addMedicine, addTest, addDoctor, serviceCatalogue]; \r\n","import { ADMIN, DOCTOR, INVENTORY, PHARMACY, RECEPTION, UPCOMING } from \"../utils/roles\";\r\nimport { adminRoutes, doctorRoutes, inventoryRoutes, pharmacyRoutes, receptionRoutes, upcomingRoutes } from \"./allRoutesData\";\r\n\r\nconst map = new Map();\r\n\r\nmap.set(ADMIN, adminRoutes);\r\nmap.set(DOCTOR, doctorRoutes);\r\nmap.set(PHARMACY, pharmacyRoutes);\r\nmap.set(INVENTORY, inventoryRoutes);\r\nmap.set(RECEPTION, receptionRoutes);\r\nmap.set(UPCOMING, upcomingRoutes);\r\n\r\nexport var getRoutes = function (roleList) {\r\n    const routes = {};\r\n    roleList.forEach(role => {\r\n        routes[role] = map.get(role);\r\n    });\r\n    return routes;\r\n}","import React, { useRef } from 'react';\r\nimport '../components/mainBillView.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class MainBillView extends React.Component {\r\n    render() {\r\n        const billItemList = this.props.billItemList;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = billItemList.map(item => {\r\n            let itemList = [];\r\n            if (item['billDetailList']) {\r\n                itemList = item['billDetailList'].map(billItem => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{(billItem.purchaseType == \"pharmacy-return\" ? billItem.itemName + '(' + billItem.purchaseType + ')' : billItem.itemName)}</td>\r\n                            <td>{billItem.quantity}</td>\r\n                            <td>{billItem.mrp}</td>\r\n                            <td>{billItem.gstPercentage}</td>\r\n                            <td>{billItem.concessionPercentage}</td>\r\n                            <td>{billItem.cost}</td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            }\r\n            return (\r\n                <div style={{ width: '100%' }}>\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Bill Id:</span> {item.billId} &nbsp;&nbsp;\r\n                    <span>Bill Date:</span> {new Date(item.createdAt).toDateString()} &nbsp;&nbsp;\r\n                    <span>Payment Mode:</span> {item.paymentMode}\r\n                    </div>\r\n                    <br />\r\n                    <table class=\"itemTable\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(%)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemList}\r\n                        </tbody>\r\n                    </table>\r\n                    <br />\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Total Amount :</span> {item.totalCost} &nbsp;&nbsp;\r\n                        <span>Total Discount :</span>  {item.totalDiscount} &nbsp;&nbsp;\r\n                        <span>Total GST :</span>  {item.totalGST}\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    {itemArray}\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import { Space, Table, Button, Row, Col, Tag, notification } from 'antd';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport moment from 'moment';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport BillSearchComp from '../billing/components/billSearch';\r\nimport { getBillDetails } from '../billing/services';\r\nimport { MainBillView } from './components/mainBillView';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { getBillListByDateRange } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst BillSearch = ({ history }) => {\r\n    const columns = [\r\n        {\r\n            title: 'Bill Id',\r\n            dataIndex: 'billId',\r\n            key: 'billId',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Bill Date',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n        },\r\n        {\r\n            title: 'Bill Total',\r\n            dataIndex: 'totalCost',\r\n            key: 'totalCost',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'paymentStatus',\r\n            key: 'paymentStatus',\r\n            filters: [\r\n                {\r\n                    text: 'dues',\r\n                    value: 'dues',\r\n                },\r\n                {\r\n                    text: 'paid',\r\n                    value: 'paid',\r\n                }\r\n            ],\r\n            onFilter: (value, record) => record.paymentStatus == value,\r\n            render: text => (text == 'paid' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/billing', search: '?context=edit' + '&billId=' + record.billId });\r\n                    }}>View/Edit</a>\r\n                    {/* <a onClick={() => {\r\n                        printSingleBill(record);\r\n                    }}>Print</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [data, setData] = useState([]);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [searchCriteria, setSearchFilter] = useState({});\r\n    const [] = useState({});\r\n    let mainBillViewButton = \"\";\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        // \r\n    }, []);\r\n\r\n    if (searchCriteria.searchFilter == \"patientId\") {\r\n        console.log(searchCriteria);\r\n        mainBillViewButton = <Button type=\"primary\" onClick={viewMainBill}>View Main Bill</Button>;\r\n    }\r\n\r\n    function viewMainBill() {\r\n        handlePrint();\r\n    }\r\n    function changePatientdetails(patientId) {\r\n        getPatientById(patientId).then(patientDetails => {\r\n            setPatientDetails(patientDetails);\r\n        }).catch(() => {\r\n\r\n        });\r\n    }\r\n\r\n    function onBillSearch(searchValue, searchFilter) {\r\n        if (searchFilter != \"dateRange\") {\r\n            getBillDetails(searchValue, searchFilter).then(response => {\r\n                if (response) {\r\n                    setSearchFilter({\r\n                        searchFilter: searchFilter,\r\n                        searchValue: searchValue\r\n                    });\r\n                    if (searchFilter == \"patientId\") {\r\n                        changePatientdetails(searchValue);\r\n                    }\r\n                    if (response) {\r\n                        const temp = response.map((data, index) => {\r\n                            return {\r\n                                ...data, createdAt: new Date(data.createdAt).toDateString(), key: index\r\n                            }\r\n                        });\r\n                        setData([...temp]);\r\n                    }\r\n\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter} ${searchValue}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: `Error while searching ${searchFilter} ${searchValue}`,\r\n                    duration: 3\r\n                });\r\n            });\r\n        } else {\r\n            getBillListByDateRange(searchValue[1], searchValue[0], 'PHARMACY').then(data => {\r\n                console.log(data);\r\n                if (data) {\r\n                    const temp = data.map((item, index) => {\r\n                        return {\r\n                            ...item, createdAt: new Date(item.createdAt).toDateString(), key: index\r\n                        }\r\n                    });\r\n                    setData([...temp]);\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{ display: 'none' }}>\r\n                <MainBillView ref={componentRef} billItemList={data} patientDetails={patientDetails} patientId={searchCriteria.searchValue} />\r\n                {/* <BillPrint ref={componentRef} itemList={billPrintData} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} /> */}\r\n            </div>\r\n            <Row gutter={24}>\r\n                <Col span={10}>\r\n                    <BillSearchComp onSearch={onBillSearch} />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button type=\"primary\" onClick={() => { history.push({ pathname: '/home/billing' }) }}>Create New bill</Button>\r\n                </Col>\r\n                <Col span={4}>\r\n                    {mainBillViewButton}\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BillSearch;","import { Space, Table, Input, Select, Typography, notification, Tag } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getAllDoctors } from '../../../state/patientSearch/queries';\r\nimport { getPharmacyMedicineListByName } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nimport { departments } from '../../../utils/departmentList';\r\nconst { Option } = Select;\r\n\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         name: 'Paraceta',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217',\r\n//         stock: 100\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n// ];\r\n\r\nconst ViewDoctors = ({ location, history }) => {\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'doctorName',\r\n            key: 'doctorName',\r\n        },\r\n        {\r\n            title: 'Department',\r\n            dataIndex: 'department',\r\n            key: 'department',\r\n            filters: departments.map(data => {\r\n                return {\r\n                    'text': data,\r\n                    'value': data,\r\n                }\r\n            }),\r\n            onFilter: (value, record) => record.department == value,\r\n        },\r\n        {\r\n            title: 'Fees',\r\n            dataIndex: 'consulationCharge',\r\n            key: 'consulationCharge',\r\n        },\r\n        {\r\n            title: 'Speciality',\r\n            dataIndex: 'speciality',\r\n            key: 'speciality',\r\n        },\r\n        // {\r\n        //     title: 'Available',\r\n        //     dataIndex: 'availability',\r\n        //     key: 'availability',\r\n        //     render: text => (text == 'AVAILABLE' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n        // },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addDoctor', search: '?mode=edit' + '&doctorId=' + record.doctorId });\r\n                    }}>Edit</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [doctorList, setDoctorList] = useState([]);\r\n    const [filterValue, setfilterValue] = useState(\"doctorName\");\r\n    useEffect(() => {\r\n        getDoctorList();\r\n    }, []);\r\n\r\n    data = doctorList;\r\n    function onDoctorSearch(value) {\r\n        // getPharmacyMedicineListByName(value).then(data => {\r\n        //     if (data) {\r\n        //         setMedicineData([...data]);\r\n        //     }\r\n        // }).catch(() => {\r\n        //     notification[\"error\"]({\r\n        //         message: 'Error',\r\n        //         description: `Error while searching`,\r\n        //         duration: 3\r\n        //     });\r\n        // });\r\n    }\r\n\r\n    // function deleteMedicineRecord(medicineId) {\r\n    //     deleteMedicine(medicineId).then(data => {\r\n    //         getAllMedicines();\r\n    //         notification[\"success\"]({\r\n    //             message: 'Success',\r\n    //             description: 'Medicine deleted successfully',\r\n    //             duration: 3\r\n    //         });\r\n    //     }).catch(err => {\r\n    //         notification[\"error\"]({\r\n    //             message: 'Error',\r\n    //             description: SERVER_ERROR,\r\n    //             duration: 3\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    function getDoctorList() {\r\n        getAllDoctors().then(data => { setDoctorList(data); }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"doctorName\">Doctor Name</Option>\r\n                    <Option value=\"departmentName\">Department Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onDoctorSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewDoctors;","import React, { useEffect, useState } from 'react';\r\nimport { Card, Statistic, Row, Col, Button, Select } from 'antd';\r\nimport { Bar } from '@ant-design/charts';\r\nimport { Pie } from '@ant-design/charts';\r\nimport { RingProgress } from '@ant-design/charts';\r\nimport { Line } from '@ant-design/charts';\r\nconst { Option } = Select;\r\nconst Reports = () => {\r\n    const [linedata, setLineData] = useState([]);\r\n    useEffect(() => {\r\n        asyncFetch();\r\n    }, []);\r\n    const asyncFetch = () => {\r\n        fetch('https://gw.alipayobjects.com/os/bmw-prod/1d565782-dde4-4bb6-8946-ea6a38ccf184.json')\r\n            .then((response) => response.json())\r\n            .then((json) => setLineData(json))\r\n            .catch((error) => {\r\n                console.log('fetch data failed', error);\r\n            });\r\n    };\r\n    var lineConfig = {\r\n        data: linedata,\r\n        padding: 'auto',\r\n        xField: 'Date',\r\n        yField: 'scales',\r\n        xAxis: { tickCount: 5 },\r\n        slider: {\r\n            start: 0.1,\r\n            end: 0.5,\r\n        },\r\n    };\r\n    var bardata = [\r\n        {\r\n            year: 'Jan',\r\n            value: 38,\r\n        },\r\n        {\r\n            year: 'feb',\r\n            value: 52,\r\n        },\r\n        {\r\n            year: 'mar',\r\n            value: 61,\r\n        },\r\n        {\r\n            year: 'Apr',\r\n            value: 145,\r\n        },\r\n        {\r\n            year: 'May',\r\n            value: 48,\r\n        },\r\n    ];\r\n    var barconfig = {\r\n        data: bardata,\r\n        xField: 'value',\r\n        yField: 'year',\r\n        seriesField: 'year',\r\n        legend: { position: 'top-left' },\r\n    };\r\n    var data = [\r\n        {\r\n            type: 'india',\r\n            value: 27,\r\n        },\r\n        {\r\n            type: 'pak',\r\n            value: 25,\r\n        },\r\n        {\r\n            type: 'Aus',\r\n            value: 18,\r\n        },\r\n        {\r\n            type: 'Eng',\r\n            value: 15,\r\n        },\r\n        {\r\n            type: 'ban',\r\n            value: 10,\r\n        },\r\n        {\r\n            type: 'Sri',\r\n            value: 5,\r\n        },\r\n    ];\r\n    var config = {\r\n        appendPadding: 10,\r\n        data: data,\r\n        angleField: 'value',\r\n        width: 10,\r\n        colorField: 'type',\r\n        radius: 0.9,\r\n        label: {\r\n            type: 'inner',\r\n            offset: '-30%',\r\n            content: function content(_ref) {\r\n                var percent = _ref.percent;\r\n                return ''.concat(percent * 100, '%');\r\n            },\r\n            style: {\r\n                fontSize: 14,\r\n                textAlign: 'center',\r\n            },\r\n        },\r\n        interactions: [{ type: 'element-active' }],\r\n    };\r\n    var ringconfig = {\r\n        height: 100,\r\n        width: 100,\r\n        autoFit: false,\r\n        percent: 0.7,\r\n        color: ['#5B8FF9', '#E8EDF3'],\r\n    };\r\n    function handleChange(value) {\r\n        console.log(`selected ${value}`);\r\n    }\r\n    var dateFilters = <Select defaultValue=\"Today\" style={{ width: 120 }} onChange={handleChange}>\r\n        <Option value=\"Today\">Today</Option>\r\n        <Option value=\"week\">This week</Option>\r\n        <Option value=\"month\">This month</Option>\r\n        <Option value=\"Quarter\">This Quarter</Option>\r\n    </Select>;\r\n    return (\r\n        <>\r\n            <div className=\"site-card-wrapper\">\r\n                <Row gutter={16}>\r\n                    <Col span={8}>\r\n                        <Card title=\"Purchases\" extra={dateFilters}>\r\n                            <Row gutter={24}>\r\n                                <Col span={12}>\r\n                                    <Statistic title=\"Total Item ordered\" value={112893} />\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Statistic title=\"Cost\" value={112893} precision={2} />\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Statistic title=\"Item Returned\" value={112893} precision={2} />\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Statistic title=\"Cost\" value={112893} precision={2} />\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                        <Card title=\"InStock Item\" >\r\n                            <RingProgress {...ringconfig} />\r\n                        </Card>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Card title=\"Item Sold by category\" extra={<a href=\"#\">More</a>}>\r\n                            <Pie {...config} />\r\n                        </Card>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Card title=\"Sale by months\" extra={<a href=\"#\">expand</a>}>\r\n                            <Bar {...barconfig} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <h5>Revenue by month</h5>\r\n                <Line {...lineConfig} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Reports;\r\n","import { MedicineBoxOutlined, MenuFoldOutlined, MenuUnfoldOutlined, UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons';\r\nimport { Layout, Menu } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport AddDoctor from '../admin/addDoctor';\r\nimport Appointment from '../appointment';\r\nimport Billing from '../billing';\r\nimport Canteen from '../canteen';\r\nimport CanteenStock from '../canteen/canteenStock';\r\nimport DoctorAppointment from '../doctorAppointment';\r\nimport '../home/home.css';\r\nimport AddMedicine from '../medicine/addMedicine';\r\nimport AddTest from '../medicine/addTest';\r\nimport PackageManagement from '../package';\r\nimport PatientSearch from '../patientSearch';\r\nimport Pharmacy from '../pharmacy';\r\nimport Prescription from '../prescription';\r\nimport Registration from '../registration';\r\nimport HomeScreen from './homescreen';\r\nimport AddNewMedicine from '../pharmacy/addNewMedicine';\r\nimport ManageMedicines from '../pharmacy/manageMedicine';\r\nimport PurchaseOrder from '../pharmacy/purchaseOrderList';\r\nimport NewPurchaseOrder from '../pharmacy/newPurchaseOrder';\r\nimport IndentPreparation from '../pharmacy/indentPreparations';\r\nimport ManageSupplier from '../pharmacy/manageSupplier';\r\nimport IndentList from '../pharmacy/indentPreparations/indentList';\r\nimport Certificates from '../certificates';\r\nimport Package from '../package';\r\nimport NewPackage from '../package/newPackage';\r\nimport InProgress from '../inProgress';\r\nimport ViewPrescription from '../prescription/viewPrescription';\r\nimport { useStateValue } from '../../state';\r\nimport { getRoutes } from '../../routes/routeResolver';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\nimport BillSearch from '../billSearch';\r\nimport ViewDoctors from '../admin/viewDoctors';\r\nimport Reports from '../reports';\r\n\r\nconst { Header, Sider, Content, Footer } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Home = ({ location, history, match }) => {\r\n  const path = match.path;\r\n  let realRoutes = [];\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [itemSelected, setItemSelected] = useState(\"\");\r\n  const [routes, setRoutes] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    // setRoutes(getRoutes([RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING]));\r\n    console.log(\"saaaare roles\", auth.roles);\r\n    setRoutes(getRoutes([...auth.roles]));\r\n  }, []);\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n    setItemSelected(\"\");\r\n  };\r\n\r\n  const handleClick = e => {\r\n    setItemSelected(e.key);\r\n  };\r\n\r\n  for (const [roleName, routeList] of Object.entries(routes)) {\r\n    const childroutes = routeList.map(route => {\r\n      return generateRouteObject(route);\r\n    });\r\n    if (auth.roles.length == 1) {\r\n      realRoutes = childroutes;\r\n    } else {\r\n      realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n    }\r\n    // realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n  }\r\n  function generateRouteObject(routeObject) {\r\n    return <Menu.Item key={routeObject.label}><Link to={`${path}${routeObject.link}`}>{routeObject.label}</Link></Menu.Item>\r\n  }\r\n  function subRoutesByRole(routes, roleName) {\r\n    return <SubMenu key={roleName} icon={<UserOutlined />} title={roleName}>{routes}</SubMenu>\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Sider trigger={null} collapsible collapsed={collapsed}>\r\n        <div className=\"logo\" />\r\n        <Menu onSelect={handleClick} theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          {realRoutes}\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n            className: 'trigger',\r\n            onClick: toggle,\r\n          })}\r\n          {itemSelected}\r\n        </Header>\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            margin: '24px 16px',\r\n            padding: 24,\r\n            minHeight: 280,\r\n            overflow: 'auto',\r\n            height: '100vh',\r\n          }}\r\n        >\r\n          <Route exact path=\"/home\" component={HomeScreen} />\r\n          <Route path={`${path}/billing`} component={Billing} />\r\n          <Route path={`${path}/billSearch`} component={BillSearch} />\r\n          <Route path={`${path}/registration`} component={Registration} />\r\n          <Route path={`${path}/patientSearch`} component={PatientSearch} />\r\n          <Route path={`${path}/addDoctor`} component={AddDoctor} />\r\n          <Route path={`${path}/appointment`} component={Appointment} />\r\n          <Route path={`${path}/doctorAppointment`} component={DoctorAppointment} />\r\n          <Route path={`${path}/prescription`} component={Prescription} />\r\n          <Route path={`${path}/addMedicine`} component={AddMedicine} />\r\n          <Route path={`${path}/addTest`} component={AddTest} />\r\n          <Route path={`${path}/packages`} component={PackageManagement} />\r\n          <Route path={`${path}/canteen`} component={Canteen} />\r\n          <Route path={`${path}/canteenStock`} component={CanteenStock} />\r\n          <Route path={`${path}/pharmacy`} component={Pharmacy} />\r\n          <Route path={`${path}/addNewMedicine`} component={AddNewMedicine} />\r\n          <Route path={`${path}/manageMedicines`} component={ManageMedicines} />\r\n          <Route path={`${path}/purchaseOrderList`} component={PurchaseOrder} />\r\n          <Route path={`${path}/newPurchaseOrder`} component={NewPurchaseOrder} />\r\n          <Route path={`${path}/indentPreparation`} component={IndentPreparation} />\r\n          <Route path={`${path}/indentList`} component={IndentList} />\r\n          <Route path={`${path}/certificates`} component={Certificates} />\r\n          <Route path={`${path}/package`} component={Package} />\r\n          <Route path={`${path}/newPackage`} component={NewPackage} />\r\n          <Route path={`${path}/manageSuppliers`} component={ManageSupplier} />\r\n          <Route path={`${path}/inProgress`} component={InProgress} />\r\n          <Route path={`${path}/viewPrescription`} component={ViewPrescription} />\r\n          <Route path={`${path}/viewDoctors`} component={ViewDoctors} />\r\n          <Route path={`${path}/reports`} component={Reports} />\r\n          \r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>BayMax ©2021</Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { StateProvider } from '../state';\r\nimport { INITIAL_STATE as AUTH_INITIAL_STATE } from '../state/auth/reducers';\r\nimport { INITIAL_STATE as PRODUCT_INITIAL_STATE } from '../state/product/reducers';\r\nimport reducers from '../state/reducers';\r\nimport BaseStyles from './base-styles';\r\nimport PrivateRoute from './private-route';\r\nimport Content from '../components/content';\r\nimport Header from '../components/header';\r\nimport Login from '../views/login';\r\nimport Home from '../views/home';\r\n\r\nconst Root = props => {\r\n  const initialState = {\r\n    auth: AUTH_INITIAL_STATE,\r\n    product: PRODUCT_INITIAL_STATE,\r\n  };\r\n  return (\r\n    <StateProvider initialState={initialState} reducer={reducers}>\r\n      <BaseStyles />\r\n      <Router>\r\n        <>\r\n          <Header />\r\n          <Content>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Login} />\r\n              {/* <PrivateRoute path=\"/home\" component={Home} /> */}\r\n              <Route path=\"/home\" component={Home} />\r\n            </Switch>\r\n          </Content>\r\n        </>\r\n      </Router>\r\n    </StateProvider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Root from './routes';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nrender(<Root />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}