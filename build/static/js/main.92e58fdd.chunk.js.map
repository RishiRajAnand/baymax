{"version":3,"sources":["assets/images/corousal1.jpg","assets/images/corousal2.jpg","assets/images/corousal3.jpg","assets/images/corousal4.jpg","state/index.js","state/auth/actions.js","state/auth/reducers.js","utils/roles.js","state/product/reducers.js","state/product/actions.js","state/reducers.js","routes/base-styles.js","components/content.js","components/theme.js","components/button.js","components/header.js","state/auth/hooks/useLogin.js","views/login/containers/container.js","components/form/formGroup.js","components/form/error.js","views/login/containers/form.js","components/spinner.js","views/login/index.js","utils/departmentList.js","utils/services.js","state/registration/queries.js","state/registration/hooks/useDoctorRegistration.js","views/admin/addDoctor/index.js","state/appointment/queries.js","state/appointment/hooks/useBookAppointment.js","state/patientSearch/queries.js","state/patientSearch/hooks/useGetAllDoctorByDepartment.js","state/patientSearch/hooks/useGetAllDoctors.js","state/patientSearch/hooks/usePatientSearchbyId.js","views/patientDetails/index.js","utils/timeSlot.js","utils/constants.js","views/appointment/components/appointmentCardPrint.js","views/appointment/index.js","state/pharmacy/queries.js","state/pharmacy/hooks/useGetAllPharmacyMedicines.js","state/addMedicine/queries.js","state/addMedicine/hooks/useSearchTest.js","views/billing/components/addItemModal.js","views/billing/components/billPrint.js","views/billing/components/finalCharges.js","state/billing/queries.js","state/billing/hooks/useGenerateBill.js","views/billing/services.js","views/billing/components/returnItemModal.js","utils/constantMessages.js","views/billing/index.js","views/billing/components/billSearch.js","views/canteen/index.js","views/canteen/canteenStock/index.js","state/patientSearch/hooks/usePatientSearch.js","state/appointment/hooks/useGetAppointmentsByDoctorId.js","state/appointment/hooks/useGetAppointmentByPatientId.js","views/doctorAppointment/index.js","state/addMedicine/hooks/useAddMedicine.js","state/addMedicine/hooks/useSearchMedicine.js","views/medicine/addMedicine/index.js","state/addMedicine/hooks/useAddTest.js","views/medicine/addTest/index.js","views/package/index.js","views/patientSearch/components/viewPatientRecords.js","state/patientSearch/hooks/usePatientSearchByName.js","views/patientSearch/index.js","views/pharmacy/index.js","state/prescription/queries.js","state/prescription/hooks/useSavePrescription.js","views/prescription/index.js","views/registration/index.js","views/home/homescreen/index.js","state/pharmacy/hooks/useGetMedicinedetail.js","views/pharmacy/addNewMedicine/index.js","views/pharmacy/addNewMedicine/utils.js","views/pharmacy/manageMedicine/index.js","state/pharmacy/hooks/UseGetAllPurchaseOrders.js","state/pharmacy/hooks/useDeletePurchaseOrder.js","views/pharmacy/purchaseOrderList/index.js","state/pharmacy/hooks/useGetAllSupplier.js","state/pharmacy/hooks/useSavePurchaseOrder.js","state/pharmacy/hooks/useGetPurchaseOrderDetails.js","views/pharmacy/newPurchaseOrder/index.js","views/pharmacy/indentPreparations/index.js","state/pharmacy/hooks/useAddSupplier.js","views/pharmacy/manageSupplier/index.js","views/pharmacy/indentPreparations/indentList/index.js","views/certificates/index.js","views/package/newPackage/index.js","views/inProgress/index.js","state/prescription/hooks/useGetPrescriptionByAppointmentId.js","views/prescription/printPrescription/index.js","views/prescription/viewPrescription/index.js","routes/allRoutesData.js","routes/routeResolver.js","views/billSearch/components/mainBillView.js","views/billSearch/index.js","views/home/index.js","routes/index.js","registerServiceWorker.js","index.js","assets/images/logo.jpg"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","LOGIN","LOGOUT","INITIAL_STATE","logged","username","roles","state","action","type","payload","list","auth","product","authReducer","productReducer","BaseStyles","createGlobalStyle","reset","Content","styled","div","colors","primary","secondary","default","gradient","bg","forms","labelColor","light","errorColor","danger","theme","Object","freeze","viewports","smartphone","tablet","desktop","Button","button","props","keys","find","p","upper","large","Nav","fixed","Right","nav","Title","h1","Header","dispatch","handleLogout","a","Link","to","onClick","useProducts","useState","isLoading","setIsLoading","values","actions","password","Container","span","layout","labelCol","wrapperCol","tailLayout","LoginForm","style","width","marginBottom","src","logo","name","initialValues","remember","onFinish","console","log","onSubmit","onFinishFailed","errorInfo","Item","label","placeholder","rules","required","message","Password","htmlType","BackDrop","Spinner","Loading","show","allowedRoles","Login","location","history","from","pathname","useLogin","setLogin","useEffect","push","roleName","checkAllowedUsers","notification","description","duration","departments","api","url","token","registration","body","axios","post","then","res","data","catch","err","doctorsRegistration","useDoctorRegistration","status","setStatus","response","Option","Select","validateMessages","types","email","number","range","department","map","key","speciality","qualification","AddDoctor","setRequest","formData","form","user","experience","highestQualification","consulationCharge","designation","min","max","offset","bookAppointment","getAppointmentByDoctorId","doctorId","get","getAppointmentByPatientId","patientId","useBookAppointment","getPatientByName","patientName","getPatientById","useGetAllDoctorByDepartment","patients","setPatients","deptname","useGetAllDoctors","usePatientById","PatientDetails","prop","bordered","patientDetails","visitType","age","contactNum","text","timeSlot","date","startTime","endTime","interval","startDate","setHours","endDate","start","getTime","end","timeSlots","Date","hospitalDetails","address","contact","AppointmentCardPrint","appointmentDetails","this","id","marginTop","display","flexDirection","justifyContent","alignItems","margin","marginLeft","fontSize","fontWeight","height","background","padding","float","doctorName","dateAndTime","React","Component","Search","Input","disabledDate","current","moment","endOf","Appointment","doctorsList","Map","queryParams","queryString","parse","search","selectedDepartment","setSelectedDepartment","selectedDate","setSelectedDate","componentRef","useRef","selectedDoctor","setSelectedDoctor","doctors","usePatientSearchbyId","setPatientSearchById","doctorBydepartment","callDoctorByDepartment","setBookAppointment","handlePrint","useReactToPrint","content","length","doctor","set","MainButton","appointmentCard","size","concat","toDateString","title","extra","val","allowClear","enterButton","onSearch","className","fullscreen","onSelect","showSearch","defaultValue","onChange","optionFilterProp","filterOption","input","option","toLowerCase","indexOf","ref","savePharmacyMedicine","saveSupplier","savePurchaseOrder","deletePurchaseOrder","delete","getPharmacyMedicineList","getPharmacyMedicineDetail","medicineId","useGetPharmacyMedicines","medicines","setMedicineList","addMedicine","addTest","useTestSearch","AddItem","medicineMap","testMap","options","selected","setSelected","selectedValue","setSelectedValue","setMedicineSearch","tests","setTestSearch","test","testName","forEach","medicine","medicineName","obj","itemId","quantity","itemType","amount","medicinedetail","salePrice","testdetail","price","onItemAdded","dropdownClassName","dropdownMatchSelectWidth","inputValue","toUpperCase","BillPrint","itemList","billId","paymentMode","finalCharges","todaysDate","toLocaleTimeString","itemArray","item","gst","discount","total","border","cellPadding","cellSpacing","colSpan","totalAmount","totalDiscount","totalGST","FinalCharges","Form","useForm","setFieldsValue","gutter","formatter","parser","replace","onDiscountChange","saveGenerateBill","useSaveGenerateBill","responseObj","setResponseObj","getBillDetails","searchValue","searchBy","searchURL","EditableContext","components","row","index","component","cell","editable","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","focus","toggleEdit","save","validateFields","childNode","onPressEnter","onBlur","paddingRight","ReturnItem","errorMessagesRows","returnButton","printButton","backToMainButton","initialRowData","setInitialRowData","setData","errorMessage","setErrorMessage","billGeneratedStatus","setBillGeneratedStatus","selectedRowKeys","setSelectedRowKeys","rowsData","columns","handleChangeFormField","newData","findIndex","initialItemValue","temp","splice","col","onCell","isModalVisible","listOfErrors","hasOwnProperty","color","selectedRows","filter","d","includes","billType","createdAt","paymentStatus","gender","billDetailList","billItem","itemName","billMapId","cost","concessionPercentage","gstPercentage","mrp","concessionType","purchaseType","onItemsReturned","updateMainBill","hasSelected","rowSelection","dataSource","pagination","filters","sorter","rowClassName","SERVER_ERROR","EditableRow","EditableCell","Billing","compare","b","multiple","render","onConfirm","calculateTotalCharges","handleDelete","context","getFinalCharges","discountedAmount","toFixed","defaultbillDetails","printBillButton","generateBillButton","billDetails","totalCost","newPatientSwitch","newPatientFormValues","newPatientForm","getFieldsValue","setPatientDetails","generateBillStatus","setBillDetails","setState","setPaymentMode","setNewPatientSwitch","setIsModalVisible","isReturnModalVisible","setIsReturnModalVisible","setFinalCharges","patientInfo","patientSearch","searchType","dataList","Number","parseInt","itemFormValue","Math","random","tempDataList","tempData","charges","visible","footer","onOk","onCancel","returnedRows","itemKeysToRemove","mainRow","mainIndex","returnedRow","checked","discountValue","Group","e","target","RangePicker","DatePicker","BillSearchComp","filterValue","setfilterValue","inputSearch","compact","renderTitle","href","rel","renderItem","count","UserOutlined","Canteen","icon","PlusOutlined","OrderedListOutlined","autoComplete","List","fields","add","remove","field","align","fieldKey","MinusCircleOutlined","block","shape","DownloadOutlined","defaultSortOrder","cat","onFilter","category","sortDirections","CanteenStock","forceUpdate","setName","items","setItems","onNameChange","event","addItem","dropdownRender","menu","flexWrap","flex","cursor","shouldUpdate","disabled","isFieldsTouched","getFieldsError","errors","usePatientSearch","useGetAppointmentByDoctorId","useGetAppointmentByPatientId","DoctorAppointment","tags","tag","proceed","appointmentId","patientAppointments","setAppointmentByPatientId","setFilter","appointments","setAppointmentByDoctorId","appointment","time","appointmentDate","useAddMedicine","useMedicineSearch","AddMedicine","strength","medicineType","prefix","useAddTest","AddTest","useSearchTest","packageName","packageEndDate","Package","textAlign","ViewPatientRecords","dataModal","columnsModal","expandable","expandedRowRender","rowExpandable","app","usePatientByName","PatientSearch","isPatientRecordModalVisible","setIsPatientRecordModalVisible","showPatient","setShowPatient","setPatientSearchbyId","currentPatientDetails","setCurrentPatientDetails","currentPatientAppointments","setCurrentPatientAppointments","patientDetailsByName","setPatientSearchbyName","phone","street","patient","Pharmacy","savePrescription","getPrescriptionByAppointmentId","useSavePrescription","Prescription","optionsTests","submitted","setSubmitted","medicineForm","vitalsForm","adviceForm","setSavePrescription","medicineList","users","testList","patientVitals","appointmentDto","weight","Bp","bp","temprature","temparature","advise","advice","prescribedMedsDtoList","prescribedTestingDtoList","medName","days","numberOfDays","dosage","comment","comments","dateOfBooking","handleSearch","handleTestSearch","has","formActions","PrinterOutlined","TextArea","PhonePrefixSelector","noStyle","Registration","alternatecontact","country","visit","recieptId","errr","addonBefore","HomeScreen","autoplay","class","backgroundImage","corousal1","corousal2","corousal3","corousal4","useGetPharmacyMedicineDetail","medicineUnits","medicineDistributionUnit","AddNewMedicine","medicineDetail","setRequest1","mode","genericName","boxSize","expDate","expiryDate","medicineShelf","details","unit","triggerValue","parseFloat","image","supplierPrice","suppliersPrice","tax","supplierName","availability","stockQuantity","clearForm","rows","listType","UploadOutlined","Text","Typography","ManageMedicines","deleteMedicine","getAllMedicines","medicineData","setMedicineData","useGetAllPharmacyMedicines","UseGetAllPurchaseOrder","useDeletePurchaseOrder","resolveTag","PurchaseOrder","orderDate","deliveryDate","supplier","purchaseOrderId","storeName","rol","productDetails","setDeletePurchaseOrder","purchaseOrders","setGetAllPurchaseOrder","order","invoiceNumber","store","useGetAllSuppliers","useSavePurchaseOrder","useGetPurchaseOrderDetails","NewPurchaseOrder","supplierOptions","purchaseDetailsForm","productListForm","suppliers","setSupplierSearch","setSavePurchaseOrder","orderDetail","setGetPurchaseOrderDetails","productList","productId","productName","purchaseCost","batchNumber","purchaseDetails","onSearchProduct","minWidth","IndentPreparation","useAddSupplier","ManageSupplier","phoneNumber","editSupplier","supplierId","IndentList","Certificates","setValue","NewPackage","InProgress","useGetPrescriptionByAppointmentId","PrintPrescription","medicineTable","testTable","dateOfResult","reportDesc","testDesc","cellpadding","cellspacing","temperature","diseaseDesc","medicinecolumns","testcolumns","ViewPrescription","testData","prescriptionDetails","setPrescriptionDetails","billing","link","billSearch","doctorRoutes","pharmacyRoutes","receptionRoutes","upcomingRoutes","adminRoutes","MainBillView","billItemList","BillSearch","searchCriteria","setSearchFilter","mainBillViewButton","searchFilter","toDate","fromDate","Layout","Sider","Footer","SubMenu","Menu","Home","path","match","realRoutes","collapsed","setCollapsed","itemSelected","setItemSelected","routes","setRoutes","roleList","role","getRoutes","entries","childroutes","route","routeObject","subRoutesByRole","trigger","collapsible","defaultSelectedKeys","createElement","MenuUnfoldOutlined","MenuFoldOutlined","minHeight","overflow","Route","exact","PackageManagement","Root","AUTH_INITIAL_STATE","PRODUCT_INITIAL_STATE","reducers","Switch","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","error","document","getElementById","URL","process","origin","addEventListener","fetch","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.92e58fdd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/corousal1.93dd94f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal2.79453c34.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal3.f5b70fd5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal4.7e7b53cf.jpg\";","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export const LOGIN = 'auth/LOGIN';\r\nexport const LOGOUT = 'auth/CLEAR_USER';\r\n\r\nexport const login = (payload) => ({\r\n  type: LOGIN,\r\n  payload\r\n});\r\n\r\nexport const logout = () => ({\r\n  type: LOGOUT,\r\n});\r\n","import { allRoles } from '../../utils/roles';\r\nimport { LOGIN, LOGOUT } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  logged: false,\r\n  username: \"\",\r\n  roles: allRoles\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return {\r\n        logged: true,\r\n        username: action.payload,\r\n        roles: [action.payload],\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...INITIAL_STATE,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const DOCTOR = \"doctor\";\r\nexport const PHARMACY = \"pharmacy\";\r\nexport const ADMIN = \"admin\";\r\nexport const RECEPTION = \"reception\";\r\nexport const UPCOMING = \"upcoming\";\r\n\r\nexport const allRoles = [RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING];","import { LIST_PRODUCTS } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  list: null,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LIST_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const LIST_PRODUCTS = 'product/LIST_PRODUCTS';\r\n\r\nexport const listProducts = payload => ({\r\n  type: LIST_PRODUCTS,\r\n  payload,\r\n});\r\n","import authReducer from './auth/reducers';\r\nimport productReducer from './product/reducers';\r\n\r\nexport default ({ auth, product }, action) => ({\r\n  auth: authReducer(auth, action),\r\n  product: productReducer(product, action),\r\n});\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst BaseStyles = createGlobalStyle`\r\n    ${reset}\r\n    body { margin: 0 };\r\n    html { font-family: 'Montserrat', sans-serif; }\r\n    * { box-sizing: border-box; };\r\n`;\r\n\r\nexport default BaseStyles;\r\n","import styled from 'styled-components';\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Content;\r\n","const colors = {\r\n  primary: '#7159c1',\r\n  secondary: '#9b49c1',\r\n  default: '#fff',\r\n  gradient:\r\n    'linear-gradient(112deg, rgba(113,89,193,1) 0%, rgba(155,73,193,1) 100%);',\r\n  bg: 'linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%);',\r\n};\r\n\r\nconst viewports = {\r\n  smartphone: '360px',\r\n  tablet: '720px',\r\n  desktop: '1280px',\r\n};\r\n\r\nconst forms = {\r\n  labelColor: colors.light,\r\n  errorColor: colors.danger,\r\n};\r\n\r\nconst theme = Object.freeze({\r\n  colors,\r\n  forms,\r\n  viewports,\r\n});\r\n\r\nexport default theme;\r\n","import styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst Button = styled.button`\r\n  transition: all 0.3s ease;\r\n  background: ${props =>\r\n    theme.colors[Object.keys(props).find(p => theme.colors[p])] ||\r\n    theme.colors.primary};\r\n  text-transform: ${props => (props.upper ? 'uppercase' : 'none')};\r\n  font-weight: 300;\r\n  color: ${theme.colors.default};\r\n  padding: 9px 13px;\r\n  margin: 1px;\r\n  border: none;\r\n  border-radius: 2px;\r\n  cursor: pointer;\r\n  width: ${props => (props.large ? '100%' : 'auto')};\r\n  &:hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { useStateValue } from '../state';\r\nimport { logout } from '../state/auth/actions';\r\n\r\nimport Button from './button';\r\n\r\nconst Nav = styled.div`\r\n  height: 50px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  background: #001529;\r\n  position: ${props => (props.fixed ? 'fixed' : 'relative')};\r\n`;\r\n\r\nconst Right = styled.nav`\r\n  flex: 1;\r\n  text-align: right;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n  color: white;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Header = props => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n\r\n  const handleLogout = async () => {\r\n    await dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <Nav>\r\n      <Title><Link to={`/home`}>BAYMAX</Link></Title>\r\n      <Right>\r\n          <Link to={`/`}><Button gradient onClick={() => handleLogout()}>\r\n            Logout\r\n          </Button>\r\n          </Link>\r\n      </Right>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\nimport { useStateValue } from '../../index';\r\nimport { login } from '../actions';\r\n\r\nconst useProducts = () => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const formData = async ({ values, actions }) => {\r\n    setIsLoading(true);\r\n\r\n    setIsLoading(false);\r\n    if (values.username !== '' && values.password !== '') {\r\n      dispatch(login(values.username));\r\n    }\r\n  };\r\n\r\n  return [auth, formData, isLoading];\r\n};\r\n\r\nexport default useProducts;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: calc(100vh - 50px);\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\n\r\nconst formGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default formGroup;\r\n","import styled from 'styled-components';\r\nimport theme from '../theme';\r\n\r\nconst ErrorText = styled.span`\r\n  text-align: center;\r\n  color: ${theme.forms.errorColor};\r\n`;\r\n\r\nexport default ErrorText;\r\n","/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react';\r\nimport { Formik } from 'formik';\r\n// import Button from '../../../components/button';\r\nimport FormGroup from '../../../components/form/formGroup';\r\n// import Input from '../../../components/form/input';\r\nimport ErrorText from '../../../components/form/error';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {span: 24 },\r\n};\r\n\r\nconst LoginForm = (props) => {\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n    props.onSubmit(values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          placeholder=\"Username\"\r\n          rules={[{ required: true, message: 'Please input your username!' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          rules={[{ required: true, message: 'Please input your password!' }]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" style={{ width: '100%'}}  htmlType=\"submit\">\r\n            Submit\r\n        </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\n// const LoginForm = props => (\r\n\r\n//   return (<>\r\n//   <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n//   <Form\r\n//     {...layout}\r\n//     name=\"basic\"\r\n//     initialValues={{ remember: true }}\r\n//     onFinish={onFinish}\r\n//     onFinishFailed={onFinishFailed}\r\n//   >\r\n//     <Form.Item\r\n//       label=\"Username\"\r\n//       name=\"username\"\r\n//       rules={[{ required: true, message: 'Please input your username!' }]}\r\n//     >\r\n//       <Input />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item\r\n//       label=\"Password\"\r\n//       name=\"password\"\r\n//       rules={[{ required: true, message: 'Please input your password!' }]}\r\n//     >\r\n//       <Input.Password />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n//       <Checkbox>Remember me</Checkbox>\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout}>\r\n//       <Button type=\"primary\" htmlType=\"submit\">\r\n//         Submit\r\n//         </Button>\r\n//     </Form.Item>\r\n//   </Form>\r\n//   <Formik initialValues={{ username: '', password: '' }} {...props}>\r\n//     {({ handleChange, handleBlur, values, handleSubmit, errors }) => (\r\n//       <FormGroup>\r\n//         {errors.genericError && <ErrorText>{errors.genericError}</ErrorText>}\r\n//         <Input\r\n//           name=\"username\"\r\n//           id=\"username\"\r\n//           placeholder=\"Username\"\r\n//           onChange={handleChange('username')}\r\n//           onBlur={handleBlur('username')}\r\n//           error={errors.username}\r\n//           value={values.username}\r\n//         />\r\n//         <Input\r\n//           id=\"password\"\r\n//           name=\"password\"\r\n//           type=\"password\"\r\n//           placeholder=\"Password\"\r\n//           onChange={handleChange('password')}\r\n//           onBlur={handleBlur('password')}\r\n//           error={errors.password}\r\n//           value={values.password}\r\n//         />\r\n//         <Button primary large onClick={handleSubmit} style={{ background: 'skyblue', color: 'white' }} type=\"submit\">\r\n//           Login\r\n//         </Button>\r\n//       </FormGroup>\r\n//     )}\r\n//   </Formik>\r\n// </>);\r\n\r\n// );\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst BackDrop = styled.div`\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.67);\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid ${theme.colors.primary};\r\n  border-radius: 50%;\r\n  width: 120px;\r\n  height: 120px;\r\n  animation: spin 2s linear infinite;\r\n  margin: 40vh auto;\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loading = props => {\r\n  return (\r\n    props.show && (\r\n      <BackDrop>\r\n        <Spinner />\r\n      </BackDrop>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport useLogin from '../../state/auth/hooks/useLogin';\r\n\r\nimport Container from './containers/container';\r\nimport Form from './containers/form';\r\nimport Spinner from '../../components/spinner';\r\nimport { notification } from 'antd';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\n\r\nconst allowedRoles = [DOCTOR, PHARMACY, RECEPTION, UPCOMING, ADMIN]\r\nconst Login = ({ location, history }) => {\r\n  const { from } = location.state || { from: { pathname: '/home' } };\r\n  const [auth, setLogin, isLoading] = useLogin();\r\n\r\n  useEffect(() => {\r\n    if (auth.logged) {\r\n      history.push(from);\r\n    }\r\n  }, [auth, from, history]);\r\n\r\n  function checkAllowedUsers(values) {\r\n    for (const roleName of allowedRoles) {\r\n      if (roleName == values.username && roleName == values.password) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  return (\r\n    <Container>\r\n      <Spinner show={isLoading} />\r\n      <Form onSubmit={(values, actions) => {\r\n        console.log(\"values\", values);\r\n        console.log(\"actions\", actions);\r\n        if (checkAllowedUsers(values)) {\r\n          setLogin({ values, actions });\r\n        } else {\r\n          notification[\"error\"]({\r\n            message: 'Invalid username or password!',\r\n            description:\r\n              'Please check the username and password and try again.',\r\n            duration: 5,\r\n          });\r\n        }\r\n\r\n      }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export const departments = [\"Accident and emergency (A&E)\",\r\n    \"Admissions\",\r\n    \"Anesthetics\",\r\n    \"Breast Screening\",\r\n    \"Burn Center\",\r\n    \"Cardiology\",\r\n    \"Central Sterile Services Department (CSSD)\",\r\n    \"Chaplaincy\",\r\n    \"Coronary Care Unit (CCU)\",\r\n    \"Critical Care\",\r\n    \"Diagnostic Imaging\",\r\n    \"Discharge Lounge\",\r\n    \"Elderly services\",\r\n    \"Finance Department\",\r\n    \"Gastroenterology\",\r\n    \"General Services\",\r\n    \"General Surgery\",\r\n    \"Gynecology\",\r\n    \"Haematology\",\r\n    \"Health & Safety\",\r\n    \"Intensive Care Unit (ICU)\",\r\n    \"Human Resources\",\r\n    \"Infection Control\",\r\n    \"Information Management\",\r\n    \"Maternity\",\r\n    \"Medical Records\",\r\n    \"Microbiology\",\r\n    \"Neonatal\",\r\n    \"Nephrology\",\r\n    \"Neurology\",\r\n    \"Nutrition and Dietetics\",\r\n    \"Obstetrics/Gynecology\",\r\n    \"Occupational Therapy\",\r\n    \"Oncology\",\r\n    \"Ophthalmology\",\r\n    \"Orthopaedics\",\r\n    \"Otolaryngology (Ear, Nose, and Throat)\",\r\n    \"Pain Management\",\r\n    \"Patient Accounts\",\r\n    \"Patient Services\",\r\n    \"Pharmacy\",\r\n    \"Physiotherapy\",\r\n    \"Purchasing & Supplies\",\r\n    \"Radiology\",\r\n    \"Radiotherapy\",\r\n    \"Renal\",\r\n    \"Rheumatology\",\r\n    \"Sexual Health\",\r\n    \"Social Work\",\r\n    \"Urology\"];\r\n\r\nexport const doctorsSpeciality = [\"Allergist\",\r\n    \"Anaesthesiologist\",\r\n    \"Andrologist\",\r\n    \"Cardiologist\",\r\n    \"Cardiac Electrophysiologist\",\r\n    \"Dermatologist\",\r\n    \"Emergency Room (ER) Doctors\",\r\n    \"Endocrinologist\",\r\n    \"Epidemiologist\",\r\n    \"Family Medicine Physician\",\r\n    \"Gastroenterologist\",\r\n    \"Geriatrician\",\r\n    \"Hyperbaric Physician\",\r\n    \"Hematologist\",\r\n    \"Hepatologist\",\r\n    \"Immunologist\",\r\n    \"Infectious Disease Specialist\",\r\n    \"Intensivist\",\r\n    \"Internal Medicine Specialist\",\r\n    \"Maxillofacial Surgeon / Oral Surgeon\",\r\n    \"Medical Examiner\",\r\n    \"Medical Geneticist\",\r\n    \"Neonatologist\",\r\n    \"Nephrologist\",\r\n    \"Neurologist\",\r\n    \"Neurosurgeon\",\r\n    \"Nuclear Medicine Specialist\",\r\n    \"Obstetrician/Gynecologist (OB/GYN)\",\r\n    \"Occupational Medicine Specialist\",\r\n    \"Oncologist\",\r\n    \"Ophthalmologist\",\r\n    \"Orthopedic Surgeon / Orthopedist\",\r\n    \"Otolaryngologist (also ENT Specialist)\",\r\n    \"Parasitologist\",\r\n    \"Pathologist\",\r\n    \"Perinatologist\",\r\n    \"Periodontist\",\r\n    \"Pediatrician\",\r\n    \"Physiatrist\",\r\n    \"Plastic Surgeon\",\r\n    \"Psychiatrist\",\r\n    \"Pulmonologist\",\r\n    \"Radiologist\",\r\n    \"Rheumatologist\",\r\n    \"Sleep Doctor / Sleep Disorders Specialist\",\r\n    \"Spinal Cord Injury Specialist\",\r\n    \"Sports Medicine Specialist\",\r\n    \"Surgeon\",\r\n    \"Thoracic Surgeon\",\r\n    \"Urologist\",\r\n    \"Vascular Surgeon\",\r\n    \"Veterinarian\",\r\n    \"Palliative Care Specialist\",\r\n    \"Acupuncturist\",\r\n    \"Audiologist\",\r\n    \"Ayurvedic Practioner\",\r\n    \"Chiropractor\",\r\n    \"Diagnostician\",\r\n    \"Homeopathic Doctor\",\r\n    \"Microbiologist\",\r\n    \"Naturopathic Doctor\",\r\n    \"Pharmacist\",\r\n    \"Physiotherapist\",\r\n    \"Podiatrist / Chiropodist\",\r\n    \"Registered Massage Therapist\"];\r\n\r\nexport const qualifications = [\"MS\", \"MD\", \"MBBS\"];\r\n","const api = {\r\n  // url: 'http://ec2-18-221-50-135.us-east-2.compute.amazonaws.com:8080',\r\n  url: 'http://localhost:8080',\r\n  token: '',\r\n};\r\n\r\nexport default api;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const registration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/patient/registration`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const doctorsRegistration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/doctorService/createNewDoctorsRecord`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n","import { useState } from 'react';\r\nimport { doctorsRegistration } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useDoctorRegistration = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await doctorsRegistration(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useDoctorRegistration;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport '../addDoctor/addDoctor.css';\r\nimport { departments, doctorsSpeciality, qualifications } from '../../../utils/departmentList';\r\nimport useDoctorRegistration from '../../../state/registration/hooks/useDoctorRegistration';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\nconst speciality = doctorsSpeciality.map(speciality => <Option key={speciality}>{speciality}</Option>);\r\nconst qualification = qualifications.map(qualification => <Option key={qualification}>{qualification}</Option>);\r\n\r\n\r\nfunction handleChange(value) {\r\n    console.log(`Selected: ${value}`);\r\n}\r\n\r\nconst AddDoctor = () => {\r\n    const [status, isLoading, setRequest] = useDoctorRegistration();\r\n\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The Doctor has been registered successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [status]);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n        setRequest(body);\r\n    };\r\n\r\n\r\n    return (\r\n        <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n            <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Department\" name={['user', 'department']}>\r\n                <Select>\r\n                    {department}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'experience']} label=\"Experience\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item label=\"Specialization\" name={['user', 'speciality']}>\r\n                <Select>\r\n                    {speciality}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item label=\"Highest Qualification\" name={['user', 'highestQualification']}>\r\n                <Select>\r\n                    {qualification}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'designation']} label=\"Designation\">\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'consulationCharge']} label=\"Consultation Charges\" rules={[{ type: 'number', min: 0, max: 10000 }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default AddDoctor;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const bookAppointment = (body) => {\r\n  return axios\r\n    .post(`${api.url}/HMServiceController/createNewAppointment`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByDoctorId = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentList?numberOfDays=30&startIndex=0&pazeSize=30&doctorId=` + doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByPatientId = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentListByPatientId?numberOfDays=30&startIndex=0&pazeSize=30&patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};","import { useState } from 'react';\r\nimport { bookAppointment } from '../queries';\r\n\r\nconst useBookAppointment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await bookAppointment(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useBookAppointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getAllPatients = () => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientByName = (patientName) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientByName?patientName=` + patientName)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientById = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientById?patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n\r\nexport const getAllDoctors = () => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAllDoctorsByDepartment = (name) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsListByDepartment?departmentName=` + name)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n","import { useState } from 'react';\r\nimport { getAllDoctorsByDepartment } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctorByDepartment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (deptname) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctorsByDepartment(deptname);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctorByDepartment;\r\n","import { useState } from 'react';\r\nimport { getAllDoctors } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctors = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctors();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctors;\r\n","import { useState } from 'react';\r\nimport { getPatientById } from '../queries';\r\n\r\nconst usePatientById = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState({});\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientById(patientId);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientById;\r\n","import React from 'react';\r\nimport { Divider, Descriptions, Badge } from 'antd';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\n\r\nconst PatientDetails = (prop) => {\r\n    // const [patient, isLoading, setRequest] = usePatientSearchbyId();\r\n\r\n    // useEffect(() => {\r\n    //     if(prop.patientId != null) {\r\n    //         setRequest(prop.patientId);\r\n    //     }\r\n    // }, [prop.patientId]);\r\n\r\n    return (\r\n        <>\r\n            <Divider>Patient Details</Divider>\r\n            <Descriptions bordered>\r\n                <Descriptions.Item label=\"Name\">{prop.patientDetails.patientName}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{prop.patientDetails.visitType}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{prop.patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Contact\">{prop.patientDetails.contactNum}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"success\" text=\"Active\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n        </>);\r\n};\r\n\r\nexport default PatientDetails;\r\n","const timeSlot = (date, startTime, endTime, interval) => {\r\n    // date.setHours(startTime);\r\n    let startDate = date;\r\n    startDate.setHours(startTime);\r\n    // date.setHours(endTime);\r\n    let endDate = date;\r\n    endDate.setHours(endTime);\r\n    console.log(startDate);\r\n    console.log(endDate);\r\n    let start = startDate.getTime();\r\n    let end = endDate.getTime();\r\n    var timeSlots = [];\r\n\r\n    while (start < end) {\r\n        timeSlots.push([new Date(start), new Date(start += interval * 60000)]);\r\n    }\r\n    return timeSlots;\r\n}\r\n\r\nexport default timeSlot;","const hospitalDetails = {\r\n    name: 'Medi World Hospital',\r\n    address: 'East Ramakrishna Nagar, Near ICICI Bank, New Bypass Road, Patna-800027',\r\n    contact: '8002727800',\r\n};\r\n\r\nexport default hospitalDetails;","import React, { useRef } from 'react';\r\nimport { Descriptions, Divider } from 'antd';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class AppointmentCardPrint extends React.Component {\r\n    render() {\r\n        const appointmentDetails = this.props.appointmentDetails;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <div style={{ marginTop: '50px' }}>\r\n                       <h3 style={{fontWeight: 'bold', fontSize: '30px'}}>Appointment Card</h3>\r\n                    </div>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                    <div style={{ fontSize: '25px' ,  float: 'left'}}>\r\n                        <p><b>Patient Name:</b> {appointmentDetails.patientName}</p>\r\n                        <p><b>Doctor Name:</b> {appointmentDetails.doctorName}</p>\r\n                        <p><b>Date and Time:</b> {appointmentDetails.dateAndTime}</p>\r\n                        <p><b>Department: </b>{appointmentDetails.department}</p>\r\n                    </div>  \r\n                    </div>\r\n\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { Button, Calendar, Card, Col, Divider, notification, Row, Select, Input, Form } from 'antd';\r\nimport moment from 'moment';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useBookAppointment from '../../state/appointment/hooks/useBookAppointment';\r\nimport useGetAllDoctorByDepartment from '../../state/patientSearch/hooks/useGetAllDoctorByDepartment';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport { departments } from '../../utils/departmentList';\r\nimport '../appointment/appointment.css';\r\nimport PatientDetails from '../patientDetails';\r\nimport timeSlot from '../../utils/timeSlot';\r\nimport { AppointmentCardPrint } from './components/appointmentCardPrint';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\n\r\nfunction disabledDate(current) {\r\n    // Can not select days before today and today\r\n    return current && current < moment().endOf('day');\r\n}\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\n\r\nconst Appointment = ({ location, history }) => {\r\n    let doctorsList = [];\r\n    let timeSlots = [];\r\n    let appointmentDetails = {\r\n        patientName: '',\r\n        doctorName: '',\r\n        dateAndTime: '',\r\n        department: ''\r\n    };\r\n    // let selectedDoctor = \"\";\r\n    const map = new Map();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"all\");\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const componentRef = useRef();\r\n    const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [patientDetails, isLoading2, setPatientSearchById] = usePatientSearchbyId();\r\n    const [doctorBydepartment, isLoadings, callDoctorByDepartment] = useGetAllDoctorByDepartment();\r\n    const [status, isLoading1, setBookAppointment] = useBookAppointment();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        if (selectedDepartment === \"all\") {\r\n            setRequest();\r\n            if (queryParams.patientId != null) {\r\n                setPatientSearchById(queryParams.patientId);\r\n            } else {\r\n                setPatientSearchById(patientDetails.patientId);\r\n            }\r\n\r\n\r\n        } else {\r\n            callDoctorByDepartment(selectedDepartment);\r\n        }\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Appointment successfully booked for patient with id ' + queryParams.patientId + 'and Doctor ' + selectedDoctor,\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [selectedDepartment, status]);\r\n\r\n    if (selectedDepartment !== \"all\") {\r\n        if (doctorBydepartment.length > 0) {\r\n            doctorsList = doctorBydepartment.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>;\r\n            });\r\n        }\r\n    } else {\r\n        if (doctors.length > 0) {\r\n            doctorsList = doctors.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>\r\n            });\r\n        }\r\n    }\r\n    function handleChange(value) {\r\n        setSelectedDepartment(value);\r\n    }\r\n    function onDateSelect(value) {\r\n        setSelectedDate(new Date(value));\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedDoctor(value);\r\n    }\r\n\r\n    function bookAppointment() {\r\n        const body = {\r\n            \"diseaseDesc\": \"test desc\",\r\n            \"advise\": \"test\",\r\n            \"patientId\": patientDetails.patientId,\r\n            \"patientName\": patientDetails.patientName,\r\n            \"doctorId\": selectedDoctor,\r\n            \"appointmentDate\": selectedDate.getTime(),\r\n            \"height\": 6,\r\n            \"weight\": 80,\r\n            \"Bp\": \"120/80\"\r\n        };\r\n        if (patientDetails.patientId != null) {\r\n            setBookAppointment(body);\r\n        } else {\r\n            notification[\"error\"]({\r\n                message: 'Failed',\r\n                description: 'Please Enter a valid patient Id!',\r\n                duration: 3\r\n            });\r\n        }\r\n\r\n    }\r\n    let MainButton = \"\";\r\n    let appointmentCard = \"\";\r\n    if (!status) {\r\n        MainButton = <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Book Appointment</Button>;\r\n    } else {\r\n        console.log(\"dsadsad\" + selectedDoctor);\r\n        MainButton = <Button type=\"primary\" size=\"large\" onClick={() => {\r\n            console.log(patientDetails.patientId,);\r\n            history.push({ pathname: '/home/billing', search: '?patientId='.concat(patientDetails.patientId) + '&doctorName=' + map.get(selectedDoctor).doctorName + '&charges=' + map.get(selectedDoctor).consulationCharge + '&context=consulation' })\r\n        }}>Go To Billing</Button>;\r\n        appointmentDetails = {\r\n            patientName: patientDetails.patientName,\r\n            doctorName: map.get(selectedDoctor).doctorName,\r\n            dateAndTime: selectedDate.toDateString(),\r\n            department: selectedDepartment\r\n        };\r\n        appointmentCard = (<Card title=\"Appointment Details\" extra={<a onClick={() => { handlePrint(); }}>Print</a>} style={{ width: 300 }}>\r\n            <p>Appointment booked for :</p>\r\n            <p>{patientDetails.patientName}</p>\r\n            <p>on {selectedDate.toDateString()}</p>\r\n            <p>At {selectedDepartment}</p>\r\n            <p>With Dr. {map.get(selectedDoctor).doctorName}</p>\r\n        </Card>);\r\n    }\r\n\r\n    timeSlots = timeSlot(new Date(), 2, 4, 15).map(val => <Option key={val} >val</Option>);\r\n    const onPatientSearch = value => {\r\n        setPatientSearchById(value);\r\n    };\r\n    return (\r\n        <>\r\n            <Search\r\n                placeholder=\"Search Patient By Id\"\r\n                allowClear\r\n                enterButton=\"Search\"\r\n                size=\"large\"\r\n                style={{ width: '40%' }}\r\n                onSearch={onPatientSearch}\r\n            />\r\n            <br />\r\n            <PatientDetails patientDetails={patientDetails} />\r\n            <br></br>\r\n            <Divider>Appointment Booking</Divider>\r\n            <Form name=\"nest-messages\" onFinish={bookAppointment}>\r\n                <Row>\r\n                    <Col span={8}>\r\n                        <div className=\"site-calendar-demo-card\">\r\n                            <Calendar fullscreen={false} onSelect={onDateSelect} disabledDate={disabledDate} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Form.Item name={['user', 'departmentName']}>\r\n                            <Select\r\n                                showSearch\r\n                                defaultValue=\"all\"\r\n                                onChange={handleChange}\r\n                                placeholder=\"Select Department\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                <Option value=\"all\">All</Option>\r\n                                {department}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'doctorName']} rules={[{ required: true }]}>\r\n                            <Select\r\n                                onChange={handleChangeOfDoctor}\r\n                                showSearch\r\n                                placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {doctorsList}\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'timeSlot']}>\r\n                            <Select placeholder=\"Select Time Slot\" style={{ width: 300 }}>\r\n                                {timeSlots}\r\n                                {/* <Option value=\"jack\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack1\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack2\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack3\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack4\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack5\">11:30 - 11:45</Option> */}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div style={{ display: 'none' }}>\r\n                            <AppointmentCardPrint ref={componentRef} appointmentDetails={appointmentDetails} />\r\n                        </div>\r\n                        {appointmentCard}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={12} offset={10}>\r\n                        {MainButton}\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>);\r\n};\r\n\r\nexport default Appointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePharmacyMedicine = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePharmacyMedicine`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveSupplier = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveSupplier`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const savePurchaseOrder = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deletePurchaseOrder = (body) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deletePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderDetails = (purchaseOrderId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderDetails?purchaseOrderId=` + purchaseOrderId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getSuppliersList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getSupplierList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineListByName = (medicineName) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineListByName?medicineName=` + medicineName)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineDetail = (medicineId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineDetails?medicineId=` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deleteMedicine = (medicineId) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deleteMedicineRecord/` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { getPharmacyMedicineList } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetPharmacyMedicines = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPharmacyMedicineList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicines;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const addMedicine = (body) => {\r\n  return axios\r\n    .post(`${api.url}/medicine/medicine`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getAllMedicines = () => {\r\n  return axios\r\n    .get(`${api.url}/medicine/medicineList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAllTests = () => {\r\n  return axios\r\n    .get(`${api.url}/test/testList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err\r\n    });\r\n};\r\n\r\nexport const addTest = (body) => {\r\n  return axios\r\n    .post(`${api.url}/test/test`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};","import { useState } from 'react';\r\nimport { getAllMedicines, getAllTests } from '../queries';\r\n\r\nconst useTestSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllTests();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useTestSearch;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col, AutoComplete } from 'antd';\r\nimport useGetPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useTestSearch from '../../../state/addMedicine/hooks/useSearchTest';\r\nconst { Option } = Select;\r\n\r\nconst AddItem = (props) => {\r\n    const medicineMap = new Map();\r\n    const testMap = new Map();\r\n    let options = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n    const [selected, setSelected] = useState(\"medicine\");\r\n    const [selectedValue, setSelectedValue] = useState(\"\");\r\n    const [medicines, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    const [tests, isLoading1, setTestSearch] = useTestSearch();\r\n    // const [options, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n    }, []);\r\n\r\n    if (selected == \"test\") {\r\n        options = [...tests.map(test => {\r\n            testMap.set(test.testName, test);\r\n            return { value: test.testName, label: test.testName };\r\n        })];\r\n    } else if (selected == \"medicine\") {\r\n        if (medicines.length > 0) {\r\n\r\n            medicines.forEach(medicine => {\r\n                medicineMap.set(medicine.medicineName, medicine);\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    } else if (selected == \"consultation\") {\r\n        if (medicines.length > 0) {\r\n            medicines.forEach(medicine => {\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    }\r\n\r\n    function onFinish(value) {\r\n        let amount = 0;\r\n        const obj = {\r\n            itemId: null,\r\n            name: selectedValue,\r\n            quantity: value.user.quantity,\r\n            itemType: selected,\r\n            amount: amount\r\n        }\r\n        if (selected == \"medicine\") {\r\n            const medicinedetail = medicineMap.get(value.user.name);\r\n            obj[\"amount\"] = medicinedetail.salePrice;\r\n            obj[\"itemId\"] = medicinedetail.medicineId;\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(value.user.name);\r\n            obj[\"amount\"] = testdetail.price;\r\n            obj[\"itemId\"] = null;\r\n        }\r\n\r\n        props.onItemAdded(obj);\r\n    }\r\n    function onItemTypeSelect(value) {\r\n        setSelected(value);\r\n        if (value == \"test\") {\r\n            setTestSearch();\r\n        }\r\n    }\r\n    function onSelect(data) {\r\n        setSelectedValue(data);\r\n    }\r\n    return (\r\n        <Form {...layout} name=\"nest-messages\" onFinish={onFinish} >\r\n            <Form.Item name={['user', 'name']} label=\"Item name\">\r\n                <AutoComplete\r\n                    dropdownClassName=\"certain-category-search-dropdown\"\r\n                    dropdownMatchSelectWidth={200}\r\n                    style={{ width: '100%' }}\r\n                    options={options}\r\n                    onSelect={onSelect}\r\n                    filterOption={(inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\r\n                >\r\n                    <Input.Search size=\"default\" placeholder=\"Item name\" />\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'quantity']} label=\"Quantity\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'itemType']} label=\"Item type\" >\r\n                <Select onSelect={onItemTypeSelect} defaultValue={selected} placeholder=\"Item type\">\r\n                    <Option value=\"medicine\">Medicine</Option>\r\n                    <Option value=\"test\">Test</Option>\r\n                    <Option value=\"consulation\">Consulation</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Add Item\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>);\r\n};\r\nexport default AddItem;","import React, { useRef } from 'react';\r\nimport '../components/billingPrint.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class BillPrint extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const billId = this.props.billId;\r\n        const paymentMode = this.props.paymentMode;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const finalCharges = this.props.finalCharges;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = itemList.map(item => {\r\n            return (\r\n                <tr>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.quantity}</td>\r\n                    <td>{item.amount}</td>\r\n                    <td>{item.gst}</td>\r\n                    <td>{item.discount}</td>\r\n                    <td>{item.total}</td>\r\n                </tr>)\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellPadding=\"5\" cellSpacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                                <td>BillId</td>\r\n                                <td>{billId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Payment mode</td>\r\n                                <td>{paymentMode}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(CGST + SGST)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemArray}\r\n                            <tr>\r\n                                <td colSpan=\"4\"></td>\r\n                                <td>Total</td>\r\n                                <td>{finalCharges.totalAmount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"4\"></td>\r\n                                <td>Discount(%)</td>\r\n                                <td>{finalCharges.totalDiscount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"4\"></td>\r\n                                <td>Tax</td>\r\n                                <td>{finalCharges.totalGST}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst FinalCharges = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({ discount: props.finalCharges.totalDiscount });\r\n  }, [props.finalCharges.totalDiscount]);\r\n\r\n  function onDiscountChange(value) {\r\n    props.onDiscountChange(value);\r\n  }\r\n  return (\r\n    <Form name=\"final_charges\" form={form}>\r\n      <Row gutter={24}>\r\n        <Col span={8} key={1}>\r\n          <Form.Item label=\"Total Amount\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalAmount}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={2}>\r\n          <Form.Item label=\"Total discount(%)\" name=\"discount\">\r\n            <InputNumber\r\n              min={0}\r\n              \r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace('%', '')}\r\n              onChange={onDiscountChange}\r\n            />\r\n            {/* <span className=\"ant-form-text\">{props.finalCharges.totalDiscount}</span> */}\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={3}>\r\n          <Form.Item label=\"Total GST\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalGST}</span>\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>);\r\n};\r\nexport default FinalCharges;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nconst rootURI = `${api.url}/HMServiceController/fetchBillDtails`;\r\nexport const searchBillDetails = (id, filterType) => {\r\n    let url = '';\r\n    if (filterType === 'patientId') {\r\n        url = `${rootURI}?patientId=` + id + '&billId=';\r\n    } else if (filterType === 'billId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    } else if (filterType === 'receiptId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    }\r\n    return axios\r\n        .get(url)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err.response;\r\n        });\r\n};\r\n\r\nexport const saveGenerateBill = (body) => {\r\n    return axios\r\n        .post(`${api.url}/HMServiceController/generateBill`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getBillListByDateRange = (toDate, fromDate, billType) => {\r\n    return axios\r\n        .get(`${api.url}/HMServiceController/fetchBillListByDateRange?toDate=` + toDate + '&fromDate=' + fromDate + '&billType=' + billType)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n","import { useState } from 'react';\r\nimport { saveGenerateBill } from '../queries';\r\n\r\nconst useSaveGenerateBill = () => {\r\n  const [responseObj, setResponseObj] = useState({});\r\n\r\n  const request = async (body) => {\r\n    const response = await saveGenerateBill(body);\r\n    if (response) {\r\n      if (response.response == \"success\") {\r\n        setResponseObj(response);\r\n      }\r\n    } else {\r\n      setResponseObj(null);\r\n    }\r\n  };\r\n\r\n  return [responseObj, request];\r\n};\r\n\r\nexport default useSaveGenerateBill;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getBillDetails = (searchValue, searchBy) => {\r\n\r\n    let searchURL = \"\";\r\n\r\n    if (searchBy == \"patientId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?billId=&patientId=` + searchValue;\r\n    } else if (searchBy == \"billId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?patientId=&billId=` + searchValue;\r\n    }\r\n    return axios\r\n        .get(searchURL)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { Form, Input, Select, Row, Col, Table, notification, Button } from 'antd';\r\nimport { saveGenerateBill } from '../../../state/billing/queries';\r\nconst EditableContext = React.createContext();\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    ...restProps\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef = useRef();\r\n    const form = useContext(EditableContext);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0,\r\n                }}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: `${title} is required.`,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n            </Form.Item>\r\n        ) : (\r\n                <div\r\n                    className=\"editable-cell-value-wrap\"\r\n                    style={{\r\n                        paddingRight: 24,\r\n                    }}\r\n                    onClick={toggleEdit}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n    }\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst components = {\r\n    body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n    },\r\n};\r\nconst ReturnItem = (props) => {\r\n    let errorMessagesRows = \"\";\r\n    let returnButton = \"\";\r\n    let printButton = \"\";\r\n    let backToMainButton = \"\";\r\n    const [initialRowData, setInitialRowData] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState({});\r\n    const [billGeneratedStatus, setBillGeneratedStatus] = useState(false);\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n    useEffect(() => {\r\n        setData(props.rowsData);\r\n        setInitialRowData(props.rowsData);\r\n    }, []);\r\n\r\n    let columns = [\r\n        {\r\n            title: 'Item Name',\r\n            dataIndex: 'name',\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            editable: \"true\",\r\n            width: '10%',\r\n        }\r\n    ];\r\n    columns = columns.map((col) => {\r\n        if (col.editable == \"false\") {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                handleSave: handleChangeFormField,\r\n            }),\r\n        };\r\n    });\r\n    if (billGeneratedStatus) {\r\n        printButton = <Button style={{ width: '90%' }} type=\"primary\">Print</Button>;\r\n        backToMainButton = <Button onClick={() => { props.isModalVisible(false); }} style={{ width: '90%' }} type=\"primary\">Go to Main Bill</Button>;\r\n    }\r\n\r\n    function updateMainBill() {\r\n        const selectedRows = data.filter(d => selectedRowKeys.includes(d.key));\r\n        props.onItemsReturned(selectedRows);\r\n    }\r\n    function handleChangeFormField(row) {\r\n        console.log(row);\r\n        console.log(initialRowData);\r\n\r\n        const newData = [...data];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        const initialItemValue = initialRowData[index];\r\n        if (row.quantity > initialItemValue.quantity) {\r\n            const message = `Item ${row.name} cannot have quantity more than ${initialItemValue.quantity}`;\r\n            setErrorMessage({ ...errorMessage, ... { [row.key]: message } });\r\n        } else {\r\n            const temp = { ...errorMessage };\r\n            delete temp[row.key];\r\n            setErrorMessage(temp);\r\n        }\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        // const finalCharges = getFinalCharges([row]);\r\n        // row.total = finalCharges.discountedAmount + finalCharges.totalGST;\r\n\r\n        // calculateTotalCharges(newData);\r\n    };\r\n    console.log(\"error meessages\", errorMessage);\r\n    if (errorMessage) {\r\n        const listOfErrors = [];\r\n        for (var key in errorMessage) {\r\n            if (errorMessage.hasOwnProperty(key)) {\r\n                listOfErrors.push(<p style={{ color: 'red' }} key={key}>{errorMessage[key]}</p>);\r\n            }\r\n        }\r\n        if (listOfErrors.length == 0) {\r\n            returnButton = <Button style={{ width: '90%' }} onClick={returnItems} type=\"primary\">Return</Button>;\r\n        } else {\r\n            returnButton = \"\";\r\n        }\r\n        errorMessagesRows = <div>{listOfErrors}</div>;\r\n    }\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n\r\n    function onSelectChange(selectedRowKeys) {\r\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n        setSelectedRowKeys(selectedRowKeys);\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: onSelectChange,\r\n    };\r\n\r\n    function returnItems() {\r\n        console.log(data);\r\n        console.log(selectedRowKeys);\r\n        const selectedRows = data.filter(d => selectedRowKeys.includes(d.key));\r\n        const body = {\r\n            billId: null,\r\n            billType: \"PHARMACY\",\r\n            createdAt: new Date(),\r\n            paymentStatus: \"paid\",\r\n            paymentMode: \"Cash\",\r\n            patientId: props.patientDetails.patientId,\r\n            name: props.patientDetails.patientName,\r\n            age: props.patientDetails.age,\r\n            gender: props.patientDetails.gender,\r\n            // totalCost: finalCharges.totalAmount,\r\n            // totalDiscount: finalCharges.totalDiscount,x\r\n            // totalGST: finalCharges.totalGST,\r\n            billDetailList: []\r\n        };\r\n        selectedRows.forEach(item => {\r\n            const billItem = {\r\n                id: null,\r\n                itemName: item.name,\r\n                itemId: item.itemId,\r\n                billMapId: null,\r\n                cost: item.total,\r\n                concessionPercentage: item.discount,\r\n                gstPercentage: item.gst,\r\n                mrp: item.amount,\r\n                concessionType: \"discount\",\r\n                quantity: item.quantity,\r\n                purchaseType: (item.type == \"medicine\" ? \"pharmacy-return\" : item.type)\r\n            };\r\n            body.billDetailList.push(billItem);\r\n        });\r\n        saveGenerateBill(body).then(response => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Return Bill Generated Successfully with id ' + response.billId,\r\n                duration: 3\r\n            });\r\n            setBillGeneratedStatus(true);\r\n            updateMainBill();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'Error while returning bill',\r\n                duration: 3\r\n            });\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span style={{ marginLeft: 8 }}>\r\n                {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\r\n            </span>\r\n            {errorMessagesRows}\r\n            <Table rowSelection={rowSelection} columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n            <br /><br /><br />\r\n            <Row gutter={24}>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {returnButton}\r\n\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {printButton}\r\n\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {backToMainButton}\r\n\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\nexport default ReturnItem;","export const SERVER_ERROR =`Server error, Please contact Administrator at (+91-8142638458)`;\r\n","import { Button, Col, Descriptions, Divider, Form, InputNumber, Switch, Input, notification, Radio, Row, Table, Popconfirm, Modal } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useRef, useState, useEffect, useContext, useLayoutEffect } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PatientDetails from '../patientDetails';\r\nimport AddItem from './components/addItemModal';\r\nimport { BillPrint } from './components/billPrint';\r\nimport FinalCharges from './components/finalCharges';\r\nimport useSaveGenerateBill from '../../state/billing/hooks/useGenerateBill';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport { getBillDetails } from './services';\r\nimport ReturnItem from './components/returnItemModal';\r\nimport { saveGenerateBill } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst EditableContext = React.createContext();\r\nconst { Search } = Input;\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef();\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n        <div\r\n          className=\"editable-cell-value-wrap\"\r\n          style={{\r\n            paddingRight: 24,\r\n          }}\r\n          onClick={toggleEdit}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst Billing = ({ location, history }) => {\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n  const queryParams = queryString.parse(location.search);\r\n  const components = {\r\n    body: {\r\n      row: EditableRow,\r\n      cell: EditableCell,\r\n    },\r\n  };\r\n  let columns = [\r\n    {\r\n      title: 'Item Name',\r\n      dataIndex: 'name',\r\n    },\r\n    {\r\n      title: 'Quantity',\r\n      dataIndex: 'quantity',\r\n      editable: \"true\",\r\n      width: '10%',\r\n    },\r\n    {\r\n      title: 'Amount',\r\n      dataIndex: 'amount',\r\n      sorter: {\r\n        compare: (a, b) => a.amount - b.amount,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'GST(CGST+SGST)',\r\n      dataIndex: 'gst',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.gst - b.gst,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'Discount(%)',\r\n      dataIndex: 'discount',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.discount - b.discount,\r\n        multiple: 2,\r\n      },\r\n    },\r\n    {\r\n      title: 'Total',\r\n      dataIndex: 'total',\r\n      sorter: {\r\n        compare: (a, b) => a.total - b.total,\r\n        multiple: 1,\r\n      },\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) =>\r\n        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n          <a> {queryParams.context != \"edit\" ? \"Delete\" : \"\"} </a>\r\n        </Popconfirm>\r\n    }\r\n  ];\r\n  columns = columns.map((col) => {\r\n    if (col.editable == \"false\") {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        editable: col.editable,\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        handleSave: handleSave,\r\n      }),\r\n    };\r\n  });\r\n  function handleSave(row) {\r\n    const newData = [...data];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    const finalCharges = getFinalCharges([row]);\r\n    row.total = (finalCharges.discountedAmount + finalCharges.totalGST).toFixed(2);\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    setData(newData);\r\n    calculateTotalCharges(newData);\r\n  };\r\n\r\n  const defaultbillDetails = {\r\n    billId: '',\r\n    createdAt: (new Date()).toDateString() + ' ' + (new Date()).toLocaleTimeString()\r\n  };\r\n\r\n  const defaultFinalCharges = {\r\n    totalAmount: 0,\r\n    totalDiscount: 0,\r\n    totalGST: 0\r\n  };\r\n\r\n  const printBillButton = <Col className=\"gutter-row\" span={3}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={handlePrint}>Print</Button>\r\n  </Col>;\r\n  let generateBillButton = <Col className=\"gutter-row\" span={3}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={generateBill}>Generate {queryParams.context == \"edit\" ? \"new \" : \"\"}bill</Button>\r\n  </Col>;\r\n  let printButton = \"\";\r\n  const [newPatientForm] = Form.useForm();\r\n  const [state, setState] = useState(\"initial\");\r\n  const [paymentMode, setPaymentMode] = useState(\"Cash\");\r\n  // const [billResponse, isLoading, setBillSearch] = useBillSearch();\r\n  const [patientDetails, setPatientDetails] = useState({});\r\n  const [newPatientSwitch, setNewPatientSwitch] = useState(false);\r\n  const [generateBillStatus, setGenerateBillStatus] = useSaveGenerateBill();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isReturnModalVisible, setIsReturnModalVisible] = useState(false);\r\n  const [billDetails, setBillDetails] = useState(defaultbillDetails);\r\n  const [finalCharges, setFinalCharges] = useState(defaultFinalCharges);\r\n  const [data, setData] = useState([]);;\r\n\r\n  let patientInfo = <div>\r\n    <Search placeholder=\"Search by Patient Id\" allowClear onSearch={patientSearch} style={{ width: '30%' }} />\r\n    <PatientDetails searchType=\"patientId\" patientDetails={patientDetails} />\r\n  </div>;\r\n  // let billSearchComp = <BillSearch onSearch={onBillSearch} />;\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const showReturnItemModal = () => {\r\n    setIsReturnModalVisible(true);\r\n  };\r\n\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const submitReturn = () => {\r\n    setIsReturnModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n  const cancelReturnModal = () => {\r\n    setIsReturnModalVisible(false);\r\n  };\r\n  useEffect(() => {\r\n    // calculateTotalCharges(mockData);\r\n    // setData(mockData);\r\n    if (queryParams.context == 'registration') {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Registration',\r\n          quantity: 1,\r\n          type: 'registration',\r\n          amount: 50,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: 50,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'consulation') {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Consultation ' + '(' + (queryParams.doctorName) + ')',\r\n          quantity: 1,\r\n          type: 'consultation',\r\n          amount: queryParams.charges,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: Number(queryParams.charges) + 0,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'edit') {\r\n      onBillSearch(queryParams.billId, \"billId\");\r\n    }\r\n  }, []);\r\n  if (state == \"billGenerated\") {\r\n    generateBillButton = \"\";\r\n    printButton = printBillButton;\r\n  }\r\n\r\n  if (queryParams.context == \"edit\") {\r\n    printButton = printBillButton;\r\n  }\r\n  if (newPatientSwitch) {\r\n    patientInfo = <div>\r\n      <Divider>Patient Details</Divider>\r\n      <Form layout=\"inline\" form={newPatientForm}>\r\n        <Form.Item name=\"patientName\" label=\"Name\">\r\n          <Input placeholder=\"name\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"age\" label=\"Age\">\r\n          <InputNumber placeholder=\"age\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"contact\" label=\"Contact\">\r\n          <Input placeholder=\"phone number\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"referal doctor\" label=\"Referal doctor\">\r\n          <Input placeholder=\"doctor name\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>;\r\n  }\r\n  function getFinalCharges(dataList) {\r\n    const finalCharges = {\r\n      totalAmount: 0,\r\n      totalGST: 0,\r\n      totalDiscount: 0,\r\n      discountedAmount: 0\r\n    }\r\n\r\n    dataList.forEach(data => {\r\n      const amount = Number.parseInt(data.amount) * Number.parseInt(data.quantity);\r\n      const discountedAmount = Number.parseInt(amount) - ((Number.parseInt(data.discount) / 100) * Number.parseInt(amount));\r\n      finalCharges.totalAmount += Number.parseInt(amount);\r\n      finalCharges.totalDiscount += Number.parseInt(data.discount);\r\n      finalCharges.discountedAmount += discountedAmount;\r\n      finalCharges.totalGST += Number.parseInt(data.gst);\r\n    });\r\n    return finalCharges;\r\n  }\r\n  function onChange(pagination, filters, sorter, extra) {\r\n    console.log('params', pagination, filters, sorter, extra);\r\n  }\r\n\r\n  function onBillSearch(searchValue, searchFilter) {\r\n    getBillDetails(searchValue, searchFilter).then(data => {\r\n      if (data && data[0]) {\r\n        const billDetails = data[0];\r\n        setBillDetails({\r\n          billId: billDetails.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        setPaymentMode(billDetails.paymentMode);\r\n        if (billDetails[\"patientId\"]) {\r\n          patientSearch(billDetails.patientId);\r\n        } else {\r\n          setPatientDetails({ patientId: null, patientName: billDetails.name, age: billDetails.age, gender: billDetails.gender, visitType: \"General\" });\r\n        }\r\n        if (billDetails[\"billDetailList\"]) {\r\n\r\n          const tempData = billDetails[\"billDetailList\"].map((item, index) => {\r\n            return {\r\n              key: item.itemName + index,\r\n              id: item.id,\r\n              itemId: item.itemId,\r\n              name: item.itemName,\r\n              type: item.purchaseType,\r\n              billMapId: item.billMapId,\r\n              quantity: item.quantity,\r\n              amount: item.mrp,\r\n              gst: 0,\r\n              discount: item.concessionPercentage,\r\n              total: (Number(item.mrp) - ((Number(item.concessionPercentage) / 100) * Number(item.mrp))) * item.quantity,\r\n            }\r\n          });\r\n\r\n          setData(tempData);\r\n          calculateTotalCharges(tempData);\r\n        }\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  function patientSearch(patientId) {\r\n    getPatientById(patientId).then(patientDetails => {\r\n      setPatientDetails(patientDetails);\r\n    }).catch(() => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: 'Error while searching patient with Id' + patientId,\r\n        duration: 3\r\n      });\r\n    });\r\n  }\r\n  function onItemAdded(itemFormValue) {\r\n    console.log(itemFormValue);\r\n    const newData = {\r\n      key: Math.random(),\r\n      name: itemFormValue.name,\r\n      itemId: itemFormValue.itemId,\r\n      quantity: itemFormValue.quantity,\r\n      amount: itemFormValue.amount,\r\n      type: itemFormValue.itemType,\r\n      gst: 0,\r\n      discount: 0,\r\n      total: itemFormValue.quantity * itemFormValue.amount,\r\n    }\r\n    const tempDataList = [...data, newData];\r\n\r\n    setData(tempDataList);\r\n    calculateTotalCharges(tempDataList);\r\n    setIsModalVisible(false);\r\n  }\r\n  function handleDelete(key) {\r\n    const dataSource = data.filter((item) => item.key !== key);\r\n    calculateTotalCharges(dataSource);\r\n    setData(dataSource);\r\n  };\r\n\r\n  function calculateTotalCharges(tempDataList) {\r\n    const finalCharges = getFinalCharges(tempDataList);\r\n    console.log(finalCharges);\r\n    setFinalCharges({\r\n      totalAmount: (finalCharges.discountedAmount + finalCharges.totalGST).toFixed(2),\r\n      totalDiscount: ((finalCharges.totalAmount - finalCharges.discountedAmount) / finalCharges.totalAmount * 100).toFixed(2),\r\n      totalGST: (finalCharges.totalGST).toFixed(2)\r\n    });\r\n  }\r\n\r\n  function onDiscountChange(discountValue) {\r\n    console.log(\"Discount changed\", discountValue);\r\n    let tempData = [];\r\n    tempData = data.map(item => {\r\n      return {\r\n        ...item,\r\n        discount: discountValue\r\n      }\r\n    });\r\n    calculateTotalCharges(tempData);\r\n    setData(tempData);\r\n  }\r\n\r\n  function paymentMethod(e) {\r\n    setPaymentMode(e.target.value);\r\n  }\r\n\r\n  function generateBill() {\r\n    const body = {\r\n      billId: (billDetails.billId),\r\n      billType: \"PHARMACY\",\r\n      createdAt: new Date(),\r\n      paymentStatus: (paymentMode == \"Due\" ? \"dues\" : \"paid\"),\r\n      paymentMode: paymentMode,\r\n      patientId: patientDetails.patientId,\r\n      name: patientDetails.name,\r\n      age: patientDetails.age,\r\n      gender: patientDetails.gender,\r\n      totalCost: finalCharges.totalAmount,\r\n      totalDiscount: finalCharges.totalDiscount,\r\n      totalGST: finalCharges.totalGST,\r\n      billDetailList: []\r\n    };\r\n    data.forEach(item => {\r\n      const billItem = {\r\n        id: null,\r\n        itemName: item.name,\r\n        itemId: item.itemId,\r\n        billMapId: null,\r\n        cost: item.total,\r\n        concessionPercentage: item.discount,\r\n        gstPercentage: item.gst,\r\n        mrp: item.amount,\r\n        concessionType: \"discount\",\r\n        quantity: item.quantity,\r\n        purchaseType: (item.type == \"medicine\" ? \"pharmacy-purchase\" : item.type)\r\n      };\r\n      body.billDetailList.push(billItem);\r\n    });\r\n    console.log(\"body\", body);\r\n    if (newPatientSwitch) {\r\n      const newPatientFormValues = newPatientForm.getFieldsValue();\r\n      body.name = newPatientFormValues.patientName;\r\n      body.age = newPatientFormValues.age;\r\n      body.patientId = null;\r\n      setPatientDetails({\r\n        patientName: newPatientFormValues.patientName,\r\n        patientId: \"N/A\",\r\n        age: newPatientFormValues.age,\r\n      });\r\n    }\r\n    saveGenerateBill(body).then(generateBillStatus => {\r\n      if (generateBillStatus.response == \"success\") {\r\n        notification[\"success\"]({\r\n          message: 'SUCCESS',\r\n          description: 'Bill Generated Successfully with id ' + generateBillStatus.billId,\r\n          duration: 3\r\n        });\r\n        setBillDetails({\r\n          billId: generateBillStatus.billId,\r\n          createdAt: (new Date()).toDateString()\r\n        });\r\n        setState(\"billGenerated\");\r\n\r\n      }\r\n    }).catch(err => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: SERVER_ERROR,\r\n        duration: 3\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n  function onNewPatientSwitchChange(checked) {\r\n    setNewPatientSwitch(checked);\r\n  }\r\n\r\n  function onItemsReturned(returnedRows) {\r\n    let tempData = [...data];\r\n    let itemKeysToRemove = [];\r\n    data.forEach((mainRow, mainIndex) => {\r\n      returnedRows.forEach(returnedRow => {\r\n        if (returnedRow.key == mainRow.key) {\r\n          if (mainRow.quantity == returnedRow.quantity) {\r\n            console.log(\"remove\", tempData[mainIndex]);\r\n            itemKeysToRemove.push(mainRow.key);\r\n\r\n          } else {\r\n            mainRow.quantity = mainRow.quantity - returnedRow.quantity;\r\n            console.log(\"edit\", tempData[mainIndex]);\r\n            console.log(\"with\", mainRow);\r\n            tempData.splice(mainIndex, 1, { ...tempData, ...mainRow });\r\n          }\r\n        }\r\n      });\r\n    });\r\n    tempData = tempData.filter(item => !itemKeysToRemove.includes(item.key));\r\n\r\n    setData(tempData);\r\n    calculateTotalCharges(tempData);\r\n  }\r\n  return (\r\n    <>\r\n      <Modal title=\"Add Item\" visible={isModalVisible} footer={null} onOk={handleOk} onCancel={handleCancel}>\r\n        <AddItem onItemAdded={onItemAdded} />\r\n      </Modal>\r\n      <Modal title=\"Return Item\" visible={isReturnModalVisible} footer={null} onOk={submitReturn} onCancel={cancelReturnModal}>\r\n        <ReturnItem rowsData={data} patientDetails={patientDetails} onItemAdded={onItemAdded} onItemsReturned={onItemsReturned} isModalVisible={setIsReturnModalVisible} />\r\n      </Modal>\r\n      New Patient <Switch onChange={onNewPatientSwitchChange} /> <br /> <br />\r\n      {patientInfo}\r\n      <div style={{ display: 'none' }}>\r\n        <BillPrint ref={componentRef} itemList={data} paymentMode={paymentMode} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} />\r\n      </div>\r\n      <Divider>Bill Details</Divider>\r\n      <Descriptions>\r\n        <Descriptions.Item label=\"Bill Id\">{billDetails.billId}</Descriptions.Item>\r\n        {/* <Descriptions.Item label=\"Receipt Id\">{queryParams.receiptId}</Descriptions.Item> */}\r\n        <Descriptions.Item label=\"Date and time\">{billDetails.createdAt}</Descriptions.Item>\r\n      </Descriptions>\r\n      <Button\r\n        onClick={showModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"none\" : \"\")\r\n        }}>Add Item\r\n        </Button>\r\n      <Button\r\n        onClick={showReturnItemModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"\" : \"none\")\r\n        }}>Return Item\r\n        </Button>\r\n      <Table columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n\r\n      <FinalCharges finalCharges={finalCharges} onDiscountChange={onDiscountChange} />\r\n      <Divider>Payment</Divider>\r\n      <Radio.Group onChange={paymentMethod} value={paymentMode}>\r\n        <Radio value=\"Cash\">Cash</Radio>\r\n        <Radio value=\"Card\">Card</Radio>\r\n        <Radio value=\"UPI\">UPI</Radio>\r\n        <Radio value=\"Paytm\">Paytm</Radio>\r\n        <Radio value=\"Due\">Due</Radio>\r\n      </Radio.Group>\r\n      <br /><br /><br />\r\n      <Row gutter={24}>\r\n        {generateBillButton}\r\n        {/* <Col className=\"gutter-row\" span={3}>\r\n          <Button type=\"primary\">Cancel</Button>\r\n        </Col> */}\r\n        {printButton}\r\n\r\n        <Col className=\"gutter-row\" span={3}>\r\n          <Button style={{ width: '90%' }} type=\"primary\" onClick={() => history.push({ pathname: '/home/appointment', search: '?patientId='.concat(queryParams.patientId) })}>Go To Appointment</Button>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Billing;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Select, DatePicker } from 'antd';\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\nconst BillSearchComp = (props) => {\r\n    const defaultSearch = \"billId\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n    let inputSearch = <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Bill by\" />;\r\n\r\n    if (filterValue == \"dateRange\") {\r\n        inputSearch = <RangePicker onChange={onDateRangeSelect} disabledDate={disabledDate} />;\r\n    }\r\n    \r\n    function onDateRangeSelect(values) {\r\n      props.onSearch(values, filterValue);\r\n    }\r\n    function disabledDate(current) {\r\n        // Can not select days before today and today\r\n        return current && current > moment().endOf('day');\r\n    }\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n        <Input.Group compact>\r\n            <Select defaultValue={defaultSearch} onSelect={setfilterValue}>\r\n                <Option key=\"patientId\" value=\"patientId\">Patient Id</Option>\r\n                <Option key=\"billId\" value=\"billId\">Bill Id</Option>\r\n                <Option key=\"dateRange\" value=\"dateRange\">Date Range</Option>\r\n            </Select>\r\n            { inputSearch }\r\n        </Input.Group>);\r\n};\r\nexport default BillSearchComp;\r\n","import React, { useEffect } from 'react';\r\nimport BillSearch from '../billing/components/billSearch';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, AutoComplete, Badge, Descriptions, Row, Col, Button, Space } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UserOutlined, DownloadOutlined, OrderedListOutlined } from '@ant-design/icons';\r\nconst renderTitle = (title: string) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title: string, count: number) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\nconst options = [\r\n    {\r\n        label: renderTitle('Libraries'),\r\n        options: [renderItem('AntDesign', 10000), renderItem('AntDesign UI', 10600)],\r\n    },\r\n    {\r\n        label: renderTitle('Solutions'),\r\n        options: [renderItem('AntDesign UI FAQ', 60100), renderItem('AntDesign FAQ', 30010)],\r\n    },\r\n    {\r\n        label: renderTitle('Articles'),\r\n        options: [renderItem('AntDesign design language', 100000)],\r\n    },\r\n];\r\n\r\nconst Canteen = () => {\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <BillSearch />\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Button type=\"dashed\" icon={<PlusOutlined />}>\r\n                        New\r\n                    </Button>\r\n                    <Button type=\"dashed\" style={{ marginLeft: '5px' }} icon={<OrderedListOutlined />}>\r\n                        <Link to=\"/home/canteenStock\">View Stock</Link>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Descriptions title=\"Patient Info\">\r\n                <Descriptions.Item label=\"Patient Name\">Rishiraj</Descriptions.Item>\r\n                <Descriptions.Item label=\"Phone\">919829128</Descriptions.Item>\r\n                <Descriptions.Item label=\"Department\">Ward 1</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"warning\" text=\"pending\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <br /><br />\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'itemName']}\r\n                                            fieldKey={[field.fieldKey, 'itemName']}\r\n                                            rules={[{ required: true, message: 'Missing Item name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search placeholder=\"Search item\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <Input placeholder=\"Price\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'gst']}\r\n                                            fieldKey={[field.fieldKey, 'gst']}\r\n                                        >\r\n                                            <Input placeholder=\"gst\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n            <Descriptions title=\"\">\r\n                <Descriptions.Item label=\"Total Amount\">100</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total GST\">15</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total discount\">0</Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <Form.Item>\r\n                <Row>\r\n                    <Col span={12} offset={11}>\r\n                        <Button type=\"primary\" shape=\"round\" icon={<DownloadOutlined />} size='large'>Print</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Pay Now</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Add to Bill</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form.Item>\r\n        </>\r\n\r\n    );\r\n};\r\nexport default Canteen;\r\n","import { PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Divider, Form, Input, InputNumber, Select, Table } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { Option } = Select;\r\nconst defaultCategories = ['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian'];\r\nconst columns = [\r\n    {\r\n        title: 'Item Name',\r\n        dataIndex: 'itemName',\r\n        defaultSortOrder: 'descend',\r\n        sorter: (a, b) => a.itemName - b.itemName,\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price'\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        filters: defaultCategories.map(cat => {\r\n            return {\r\n                text: cat,\r\n                value: cat,\r\n            }\r\n        }),\r\n        onFilter: (value, record) => record.category.indexOf(value) === 0,\r\n        sorter: (a, b) => a.category.length - b.category.length,\r\n        sortDirections: ['descend'],\r\n    }\r\n];\r\n\r\nconst CanteenStock = () => {\r\n    let index = 0;\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    const [, forceUpdate] = useState();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian']);\r\n\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const onFinish = values => {\r\n        console.log('Finish:', values);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"itemName\"\r\n                    rules={[{ required: true, message: 'Please enter item name!' }]}\r\n                >\r\n                    <Input placeholder=\"Item Name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please enter a price!' }]}\r\n                >\r\n                    <InputNumber placeholder=\"Price\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"Category\"\r\n                >\r\n                    <Select\r\n                        style={{ width: 240 }}\r\n                        placeholder=\"Select category\"\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                <Divider style={{ margin: '4px 0' }} />\r\n                                <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                    <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                    <a\r\n                                        style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                        onClick={addItem}\r\n                                    >\r\n                                        <PlusOutlined /> Add item\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {items.map(item => (\r\n                            <Option key={item}>{item}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Item\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default CanteenStock;\r\n","import { useState } from 'react';\r\nimport { getAllPatients } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst usePatientSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllPatients();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientSearch;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByDoctorId } from '../queries';\r\n\r\nconst useGetAppointmentByDoctorId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (doctorId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByDoctorId(doctorId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByDoctorId;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByPatientId } from '../queries';\r\n\r\nconst useGetAppointmentByPatientId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByPatientId(patientId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByPatientId;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, DatePicker, Button, TimePicker, Select, Space, Input } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport useGetAppointmentByDoctorId from '../../state/appointment/hooks/useGetAppointmentsByDoctorId';\r\nimport useGetAppointmentByPatientId from '../../state/appointment/hooks/useGetAppointmentByPatientId';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\nfunction PickerWithType({ type, onChange }) {\r\n    if (type === 'time') return <TimePicker onChange={onChange} />;\r\n    if (type === 'date') return <DatePicker onChange={onChange} />;\r\n    return <DatePicker picker={type} onChange={onChange} />;\r\n}\r\n\r\nfunction DoctorAppointment({ location, history }) {\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Patient Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n        },\r\n        {\r\n            title: 'Time Slot',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color=\"green\" key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Booked',\r\n                    value: 'booked',\r\n                },\r\n                {\r\n                    text: 'Appointment done',\r\n                    value: 'done',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => {\r\n                let proceed = \"\";\r\n                if (record.status != \"done\") {\r\n                    proceed = <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/prescription', search: '?patientId=' + record.patientId + '&patientName=' + record.patientName + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        Proceed\r\n                </Button>\r\n                }\r\n                return <Space size=\"middle\">\r\n                    {proceed}\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        View\r\n            </Button>\r\n                </Space>\r\n            },\r\n        }\r\n    ];\r\n    let doctorsList = [];\r\n    const [type, setType] = useState('time');\r\n    const [patientAppointments, isLoading2, setAppointmentByPatientId] = useGetAppointmentByPatientId();\r\n    // const [selectedDoctor, setSelectedDoctor] = useState(\"initial\");\r\n    const [filter, setFilter] = useState(\"none\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [appointments, isLoading1, setAppointmentByDoctorId] = useGetAppointmentByDoctorId();\r\n    let data = [];\r\n    useEffect(() => {\r\n        setRequest();\r\n    }, []);\r\n\r\n    if (doctors.length > 0) {\r\n        doctorsList = doctors.map(doctor => <Option key={doctor.doctorId} >{doctor.doctorName}</Option>);\r\n    }\r\n    console.log(\"asadada\", appointments);\r\n    if (filter == \"doctor\" && appointments.length > 0) {\r\n        data = appointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['booked'])\r\n            };\r\n        });\r\n    }\r\n    if (filter == \"patient\" && patientAppointments.length > 0) {\r\n        data = patientAppointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['booked'])\r\n            };\r\n        });\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        setAppointmentByDoctorId(value);\r\n        setFilter(\"doctor\");\r\n    }\r\n\r\n    const onPatientSearch = value => {\r\n        setAppointmentByPatientId(value);\r\n        setFilter(\"patient\");\r\n    };\r\n    return (\r\n        <>\r\n            <Space>\r\n                <Select\r\n                    onChange={handleChangeOfDoctor}\r\n                    showSearch\r\n                    placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }>\r\n                    {doctorsList}\r\n                </Select>\r\n                {/* <Select value={type} onChange={setType}>\r\n                    <Option value=\"time\">Time</Option>\r\n                    <Option value=\"date\">Date</Option>\r\n                    <Option value=\"week\">Week</Option>\r\n                    <Option value=\"month\">Month</Option>\r\n                    <Option value=\"quarter\">Quarter</Option>\r\n                    <Option value=\"year\">Year</Option>\r\n                </Select>\r\n                <PickerWithType type={type} onChange={value => console.log(value)} /> */}\r\n                <Search\r\n                    placeholder=\"Search Patient By Id\"\r\n                    allowClear\r\n                    enterButton=\"Search\"\r\n                    size=\"medium\"\r\n                    style={{ width: '100%', marginLeft: '200px' }}\r\n                    onSearch={onPatientSearch}\r\n                />\r\n            </Space>\r\n            <br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DoctorAppointment;","import { useState } from 'react';\r\nimport { addMedicine } from '../queries';\r\n\r\nconst useAddMedicine = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addMedicine(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddMedicine;\r\n","import { useState } from 'react';\r\nimport { getAllMedicines } from '../queries';\r\n\r\nconst useMedicineSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllMedicines();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useMedicineSearch;","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\n\r\nconst AddMedicine = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddMedicine();\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Medicine added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    console.log(\"medicines list\", medicines);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"medicineName\": form.name,\r\n            \"medicineType\": form.type,\r\n            \"strength\": form.strength,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Medicine Name',\r\n            dataIndex: 'medicineName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Strength',\r\n            dataIndex: 'strength'\r\n        },\r\n        {\r\n            title: 'Medicine Type',\r\n            dataIndex: 'medicineType',\r\n            filters: [\r\n                {\r\n                    text: 'Aspirin',\r\n                    value: 'aspirin',\r\n                },\r\n                {\r\n                    text: 'Painkillers',\r\n                    value: 'painkiller',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.medicineType.indexOf(value) === 0,\r\n            sorter: (a, b) => a.medicineType.length - b.medicineType.length,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                medicineName: medicine.medicineName,\r\n                price: medicine.price,\r\n                strength: medicine.strength,\r\n                medicineType: medicine.medicineType,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please medicine name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"type\"\r\n                    rules={[{ required: true, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine type\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"strength\"\r\n                    rules={[{ required: true, message: 'Please input strength!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Strength\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Medicine\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddMedicine;","import { useState } from 'react';\r\nimport { addMedicine, addTest } from '../queries';\r\n\r\nconst useAddTest = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addTest(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddTest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Table, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport useAddTest from '../../../state/addMedicine/hooks/useAddTest';\r\nimport Spinner from '../../../components/spinner';\r\nimport useSearchTest from '../../../state/addMedicine/hooks/useSearchTest';\r\n\r\nconst AddTest = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddTest();\r\n    const [medicines, isLoadings, setMedicineSearch] = useSearchTest();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Test added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"testName\": form.name,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Test Name',\r\n            dataIndex: 'testName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.testName - b.testName,\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                testName: medicine.testName,\r\n                price: medicine.price\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please select test name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Test name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Test\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddTest;","import { Button, Col, Form, Row, Space, Table, Tag } from 'antd';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nconst columns = [\r\n    {\r\n        title: 'Package Name',\r\n        dataIndex: 'packageName',\r\n        key: 'packageName',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Package End Date',\r\n        dataIndex: 'packageEndDate',\r\n        key: 'packageEndDate',\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '2',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '3',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n];\r\n\r\nconst Package = () => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            <Link to=\"/home/newPackage\">Create New</Link>\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Package;\r\n","import React, { } from 'react';\r\nimport { Table, Input, Select, Button } from 'antd';\r\nconst ViewPatientRecords = (props) => {\r\n    let history = props.history;\r\n    let dataModal = [];\r\n    const columnsModal = [\r\n        { title: 'Appointment ID', dataIndex: 'appointmentId', key: 'appointmentId' },\r\n        { title: 'Appointment Date', dataIndex: 'appointmentDate', key: 'appointmentDate' },\r\n        { title: 'Disease summary', dataIndex: 'diseaseDesc', key: 'diseaseDesc' },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            render: (text, record) => <Button type=\"primary\" onClick={() => {\r\n                history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n            }}>View</Button>,\r\n        },\r\n    ];\r\n    props.patientAppointments.map(data => {\r\n        if (data.status == \"done\") {\r\n            dataModal.push({ ...data, appointmentDate: (new Date(data.appointmentDate)).toDateString() });\r\n        }\r\n    });\r\n    // const dataModal = [\r\n    //     {\r\n    //         key: 1,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"15 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 2,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"23 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 3,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"30 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 4,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"14 Sep 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    // ];\r\n\r\n    return (\r\n        <>\r\n            <Table\r\n                columns={columnsModal}\r\n                expandable={{\r\n                    expandedRowRender: record => <p style={{ margin: 0 }}>{record.description}</p>,\r\n                    rowExpandable: record => record.app !== '14 Aug',\r\n                }}\r\n                dataSource={dataModal}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewPatientRecords;","import { useState } from 'react';\r\nimport { getPatientByName } from '../queries';\r\n\r\nconst usePatientByName = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientName) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientByName(patientName);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientByName;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Input, Space, Button, Modal, Select, notification } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport ViewPatientRecords from './components/viewPatientRecords';\r\nimport Spinner from '../../components/spinner';\r\nimport usePatientById from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../patientDetails';\r\nimport usePatientByName from '../../state/patientSearch/hooks/usePatientSearchByName';\r\nimport { getAppointmentByPatientId } from '../../state/appointment/queries';\r\nimport { responsiveArray } from 'antd/lib/_util/responsiveObserve';\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nconst PatientSearch = ({ history }) => {\r\n    const [filterValue, setfilterValue] = useState(\"patientName\");\r\n    const [isPatientRecordModalVisible, setIsPatientRecordModalVisible] = useState(false);\r\n    const [name, setName] = useState([]);\r\n    const [showPatient, setShowPatient] = useState(\"all\");\r\n    const [patients, isLoading, setRequest] = usePatientSearch();\r\n    const [patientDetails, isLoading1, setPatientSearchbyId] = usePatientById();\r\n    const [currentPatientDetails, setCurrentPatientDetails] = useState({});\r\n    const [currentPatientAppointments, setCurrentPatientAppointments] = useState({});\r\n    const [patientDetailsByName, isLoading2, setPatientSearchbyName] = usePatientByName();\r\n    let data = [];\r\n\r\n    useEffect(() => {\r\n        if (showPatient === \"all\") {\r\n            setRequest();\r\n        }\r\n    }, [showPatient]);\r\n\r\n    function onPatientSearch(searchValue) {\r\n        console.log(searchValue);\r\n\r\n        if (searchValue == '') {\r\n            setRequest();\r\n            setShowPatient(\"all\");\r\n        } else if (filterValue == \"patientId\") {\r\n            setPatientSearchbyId(searchValue);\r\n            setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"patientName\") {\r\n            setPatientSearchbyName(searchValue);\r\n            setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    if (showPatient == \"patientId\" && patientDetails != null) {\r\n        const row = [{\r\n            key: patientDetails.patientId,\r\n            patientId: patientDetails.patientId,\r\n            name: patientDetails.patientName,\r\n            age: patientDetails.age,\r\n            phone: patientDetails.contactNum,\r\n            address: patientDetails.street,\r\n            status: ['registered']\r\n        }];\r\n        data = row;\r\n    }\r\n\r\n    if (showPatient == \"patientName\" && patientDetailsByName != null) {\r\n        data = patientDetailsByName.map((patient, index) => {\r\n            return {\r\n                key: patient.patientId,\r\n                patientId: patient.patientId,\r\n                name: patient.patientName,\r\n                age: patient.age,\r\n                phone: patient.contactNum,\r\n                address: patient.street,\r\n                status: ['registered'],\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"all\" && patients.length > 0) {\r\n        data = patients.map((patient, index) => {\r\n            return {\r\n                key: patient.patientId,\r\n                patientId: patient.patientId,\r\n                name: patient.patientName,\r\n                age: patient.age,\r\n                phone: patient.contactNum,\r\n                address: patient.street,\r\n                status: ['registered'],\r\n            };\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: text => <span>{text}</span>,\r\n            sorter: (a, b) => a.name.length - b.name.length,\r\n            sortDirections: ['descend', 'ascend'],\r\n        },\r\n        {\r\n            title: 'Patient Id',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId',\r\n        },\r\n        {\r\n            title: 'Age',\r\n            dataIndex: 'age',\r\n            key: 'age',\r\n        },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        let color = tag.length > 5 ? 'geekblue' : 'green';\r\n                        if (tag === 'loser') {\r\n                            color = 'volcano';\r\n                        }\r\n                        return (\r\n                            <Tag color={color} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Registered',\r\n                    value: 'registered',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'discharged',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        setCurrentPatientDetails(record);\r\n                        getAppointmentByPatientId(record.patientId).then(response => {\r\n                            setCurrentPatientAppointments(response);\r\n                            setIsPatientRecordModalVisible(true);\r\n                        }).catch(err => {\r\n                            notification[\"error\"]({\r\n                                message: 'Error',\r\n                                description: 'Error while searching records with Patient Id' + record.patientId,\r\n                                duration: 3\r\n                            });\r\n                        });\r\n                    }}>\r\n                        View records\r\n                    </Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"patientName\">Patient Name</Option>\r\n                    <Option value=\"patientId\">Patient Id</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onPatientSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n            <Modal title=\"Patient Records\" visible={isPatientRecordModalVisible} footer={null} width={800} onCancel={() => setIsPatientRecordModalVisible(false)} >\r\n                <ViewPatientRecords patientDetails={currentPatientDetails} patientAppointments={currentPatientAppointments} history={history} />\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PatientSearch;","import React, { useEffect } from 'react';\r\n\r\nconst Pharmacy = () => {\r\n    return (\r\n        <>\r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pharmacy;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePrescription = (body) => {\r\n    return axios\r\n        .post(`${api.url}/doctorService/savePrescription`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPrescriptionByAppointmentId = (appointmentId) => {\r\n    return axios\r\n        .get(`${api.url}/doctorService/getPrescriptionDetails?appointmentId=` + appointmentId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { savePrescription } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useSavePrescription = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState({});\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await savePrescription(body);\r\n\r\n    setStatus(response);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useSavePrescription;\r\n","import { PrinterOutlined, MinusCircleOutlined, PlusOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useMedicineSearch from '../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useSearchTest from '../../state/addMedicine/hooks/useSearchTest';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport useSavePrescription from '../../state/prescription/hooks/useSavePrescription';\r\nimport PatientDetails from '../patientDetails';\r\nimport '../prescription/prescription.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst renderTitle = (title) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title, count) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\n\r\n\r\nconst Prescription = ({ location, history }) => {\r\n    let options = [];\r\n    const optionsTests = [];\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [form] = Form.useForm();\r\n    const [medicineForm] = Form.useForm();\r\n    const [vitalsForm] = Form.useForm();\r\n    const [adviceForm] = Form.useForm();\r\n\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    const [response, isLoading1, setSavePrescription] = useSavePrescription();\r\n    const [tests, isLoading, setTestSearch] = useSearchTest();\r\n    // const [tests, isLoading, setTestSearch] = usePre();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        getPatientDetails(queryParams.patientId);\r\n        if (response.status == \"SUCCESS\") {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient prescription has been generated successfully',\r\n                duration: 3\r\n            });\r\n        } else if (response.status == 500) {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error saving the prescription, please check with admin',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [response]);\r\n    function getPatientDetails(patientId) {\r\n        getPatientById(patientId).then(data => {\r\n            setPatientDetails(data);\r\n        });\r\n    }\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n        console.log('Dawaiyaan', form.getFieldsValue());\r\n        console.log('tests:', medicineForm.getFieldsValue());\r\n        console.log('vitals:', vitalsForm.getFieldsValue());\r\n        const medicineList = medicineForm.getFieldsValue().users;\r\n        const testList = form.getFieldsValue().users;\r\n        const patientVitals = vitalsForm.getFieldsValue();\r\n        const body = {\r\n            appointmentDto: {\r\n                appointmentId: queryParams.appointmentId,\r\n                appointmentDate: new Date().getTime(),\r\n                patientId: queryParams.patientId,\r\n                patientName: queryParams.patientName,\r\n                doctorId: queryParams.doctorId,\r\n                height: patientVitals.height,\r\n                weight: patientVitals.weight,\r\n                Bp: patientVitals.bp,\r\n                temprature: patientVitals.temparature,\r\n                advise: adviceForm.getFieldsValue().advice,\r\n                status: \"done\"\r\n            },\r\n            prescribedMedsDtoList: null,\r\n            prescribedTestingDtoList: null\r\n        };\r\n\r\n        if (medicineList != null && medicineList.length > 0) {\r\n            body.prescribedMedsDtoList = medicineList.map(medicine => {\r\n                return { medName: medicine.medicineName, days: medicine.numberOfDays, dosage: medicine.dosage, comment: medicine.comments };\r\n            });\r\n        }\r\n\r\n        if (testList != null && testList.length > 0) {\r\n            body.prescribedTestingDtoList = testList.map(test => {\r\n                return {\r\n                    testName: test.testName,\r\n                    dateOfBooking: test.date,\r\n                    comment: test.comments\r\n                };\r\n            });\r\n        }\r\n        setSavePrescription(body);\r\n        setSubmitted(true);\r\n    };\r\n    const handleSearch = (value) => {\r\n        setMedicineSearch();\r\n    };\r\n\r\n    const handleTestSearch = (value) => {\r\n        setTestSearch();\r\n    };\r\n\r\n    if (tests.length > 0) {\r\n        tests.forEach(test => {\r\n            optionsTests.push({ value: test.testName });\r\n        });\r\n    }\r\n\r\n    if (medicines.length > 0) {\r\n        var map = new Map();\r\n\r\n        medicines.forEach(medicine => {\r\n            if (map.has(medicine.medicineType)) {\r\n                map.set(medicine.medicineType, [...map.get(medicine.medicineType), medicine.medicineName]);\r\n            } else {\r\n                map.set(medicine.medicineType, [medicine.medicineName])\r\n            }\r\n        });\r\n        console.log(map);\r\n        for (let [key, value] of map) {\r\n            console.log(key + \" = \" + value);\r\n            options.push({\r\n                label: renderTitle(key),\r\n                options: value.map(val => renderItem(val, 100)),\r\n            });\r\n        }\r\n    }\r\n    let formActions = <Button size=\"large\" type=\"primary\">Submit</Button>;\r\n    if (submitted && response.status != 500) {\r\n        formActions = (<><Button type=\"primary\" shape=\"round\" onClick={() => {\r\n            history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + queryParams.patientId + '&doctorId=' + queryParams.doctorId + '&appointmentId=' + queryParams.appointmentId });\r\n        }} icon={<PrinterOutlined />} size='large'>Print</Button>\r\n            <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large' onClick={value => history.push({ pathname: '/home/doctorAppointment' })}>Go to My Appoinments</Button></>);\r\n    }\r\n    return (\r\n        <>\r\n            <PatientDetails patientDetails={patientDetails} />\r\n            <br></br>\r\n            <Divider>Patient Vitals</Divider>\r\n\r\n            <Form\r\n                form={vitalsForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"BP\" name=\"bp\">\r\n                            <InputNumber name=\"bp\" style={{ width: '90%' }} placeholder=\"Blood pressure\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Temparature\" name=\"temparature\">\r\n                            <InputNumber name=\"temparature\" style={{ width: '90%' }} placeholder=\"Temp In degrees Celsius\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Height\" name=\"height\">\r\n                            <InputNumber name=\"height\" style={{ width: '90%' }} placeholder=\"Height in feet\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Weight\" name=\"weight\">\r\n                            <Input name=\"weight\" style={{ width: '90%' }} placeholder=\"Weight in (kgs)\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </Form>\r\n            <Divider>Prescribe Medicines</Divider>\r\n            {/* <PrescribeMedicine /> */}\r\n\r\n            <Form name=\"dynamic_form_nest_item\" form={medicineForm} onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map((field, index) => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'medicineName']}\r\n                                            fieldKey={[field.fieldKey, 'medicineName']}\r\n                                            rules={[{ required: true, message: 'Missing Medicine name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleSearch}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Medicine\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'dosage']}\r\n                                            fieldKey={[field.fieldKey, 'dosage']}\r\n                                            rules={[{ required: true, message: 'Missing Dosage' }]}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Dosage per day (M-A-N)\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">1-0-0</Option>\r\n                                                <Option value=\"1-1-0\">1-1-0</Option>\r\n                                                <Option value=\"1-1-1\">1-1-1</Option>\r\n                                                <Option value=\"0-0-1\">0-0-1</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'numberOfDays']}\r\n                                            fieldKey={[field.fieldKey, 'numberOfDays']}\r\n                                            rules={[{ required: true, message: 'Missing Number of days' }]}\r\n                                        >\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Medicines\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n\r\n            <br></br>\r\n            <Divider>Prescribe Tests</Divider>\r\n            <Form name=\"dynamic_form_nest_item2\" form={form} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'testName']}\r\n                                            fieldKey={[field.fieldKey, 'testName']}\r\n                                            rules={[{ required: true, message: 'Missing test name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleTestSearch}\r\n                                                style={{ width: 200 }}\r\n                                                options={optionsTests}\r\n                                                placeholder=\"Type test name\"\r\n                                                filterOption={(inputValue, option) =>\r\n                                                    option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                                                }\r\n                                            />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'date']}\r\n                                            fieldKey={[field.fieldKey, 'date']}\r\n                                            rules={[{ required: false }]}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Tests\r\n                                   </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                form={adviceForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={20}>\r\n                        <Form.Item name='advice' label=\"Summary\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <Row>\r\n                <Col span={12} onClick={onFinish} offset={11}>\r\n                    {formActions}\r\n                </Col>\r\n            </Row>\r\n        </>);\r\n};\r\n\r\nexport default Prescription;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport useRegistration from '../../state/registration/hooks/useRegistration';\r\nimport Spinner from '../../components/spinner';\r\nimport { registration } from '../../state/registration/queries';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst Registration = ({ location, history }) => {\r\n    const onFinish = formData => {\r\n\r\n        const form = formData.user;\r\n        const body = {\r\n            \"patientName\": form.name,\r\n            \"age\": form.age,\r\n            \"contactNum\": form.phone,\r\n            \"altContactNum\": form.alternatecontact,\r\n            \"street\": form.address,\r\n            \"state\": form.state,\r\n            \"country\": form.country,\r\n            \"visitType\": form.visit\r\n        };\r\n        registration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient has been registered successfully',\r\n                duration: 3\r\n            });\r\n            history.push({ pathname: '/home/billing', search: '?patientId=' + data.patientId + '&receiptId=' + data.recieptId + '&context=registration' });\r\n        }).catch(errr => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error in registration',\r\n                duration: 3\r\n            });\r\n\r\n        });\r\n        // setRequest(body);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'gender']} label=\"Gender\" rules={[{ required: true }]}>\r\n                    <Select\r\n                        placeholder=\"Select Gender\"\r\n                        allowClear>\r\n                        <Option value=\"male\">male</Option>\r\n                        <Option value=\"female\">female</Option>\r\n                        <Option value=\"other\">other</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'email']} label=\"Email\" rules={[{ type: 'email' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'age']} label=\"Age\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'phone']} label=\"Phone Number\" rules={[{ required: true, message: 'Please input your phone number!' }]}>\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'alternatecontact']} label=\"Alternate Contact Number\">\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'address']} label=\"Address\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'state']} label=\"State\">\r\n                    <Select\r\n                        defaultValue=\"bihar\"\r\n                        placeholder=\"Select State\"\r\n                        allowClear>\r\n                        <Option value=\"bihar\">Bihar</Option>\r\n                        <Option value=\"up\">UP</Option>\r\n                        <Option value=\"Karnataka\">Karnataka</Option>\r\n                        <Option value=\"Jharkhand\">Jharkhand</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'country']} label=\"Country\">\r\n                    <Select\r\n                        defaultValue=\"india\"\r\n                        placeholder=\"Select Country\"\r\n                        allowClear>\r\n                        <Option value=\"india\">India</Option>\r\n                        <Option value=\"us\">US</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'visit']} label=\"Visit Type\" >\r\n                    <Select placeholder=\"Select Visit type\">\r\n                        <Option value=\"general\">General</Option>\r\n                        <Option value=\"emergency\">Emergency</Option>\r\n                        <Option value=\"referral\">Referral</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" size='large' htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, { useEffect } from 'react';\r\nimport { Carousel } from 'antd';\r\nimport corousal1 from '../../../assets/images/corousal1.jpg';\r\nimport corousal2 from '../../../assets/images/corousal2.jpg';\r\nimport corousal3 from '../../../assets/images/corousal3.jpg';\r\nimport corousal4 from '../../../assets/images/corousal4.jpg';\r\nimport '../homescreen/homescreen.css';\r\nconst contentStyle = {\r\n    height: '700px',\r\n    color: '#fff',\r\n    lineHeight: '500px',\r\n    textAlign: 'center',\r\n    background: '#364d79',\r\n    fontSize: \"32px\"\r\n};\r\n\r\n\r\n\r\nconst HomeScreen = () => {\r\n    return (\r\n        <Carousel autoplay>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal1})` }}>\r\n                    Welcome to Baymax Healthcare\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal2})` }}>\r\n                    Manage everything from central place\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal3})` }}>\r\n                    Secure and reliable\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal4})` }}>\r\n                    Access records from anywhere\r\n                </div>\r\n            </div>\r\n        </Carousel>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import { useState } from 'react';\r\nimport { getPharmacyMedicineDetail } from '../queries';\r\n\r\nconst useGetPharmacyMedicineDetail = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPharmacyMedicineDetail(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicineDetail;","import React, { useState, useEffect } from 'react';\r\nimport { PlusOutlined, OrderedListOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport { medicineDistributionUnits } from './utils';\r\nimport queryString from 'query-string';\r\nimport useSavePharmacyMedicine from '../../../state/pharmacy/hooks/useSavePharmacyMedicine';\r\nimport useGetPharmacyMedicineDetail from '../../../state/pharmacy/hooks/useGetMedicinedetail';\r\nimport { setNestedObjectValues } from 'formik';\r\nimport { savePharmacyMedicine } from '../../../state/pharmacy/queries';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst medicineUnits = medicineDistributionUnits.map(medicineDistributionUnit => <Option key={medicineDistributionUnit}>{medicineDistributionUnit}</Option>);\r\nconst AddNewMedicine = ({ location, history }) => {\r\n    let index = 0;\r\n    const [form] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Aspirin', 'Tablets', 'Syrup']);\r\n    const [medicineDetail, setRequest1] = useGetPharmacyMedicineDetail();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            setRequest1(queryParams.medicineId);\r\n        }\r\n    }, []);\r\n\r\n    if (medicineDetail != null && queryParams.mode == \"edit\") {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: medicineDetail.medicineId,\r\n                medicineName: medicineDetail.medicineName,\r\n                genericName: medicineDetail.genericName,\r\n                boxSize: Number.parseInt(medicineDetail.boxSize),\r\n                expDate: medicineDetail.expiryDate,\r\n                medicineShelf: medicineDetail.medicineShelf,\r\n                details: medicineDetail.details,\r\n                category: medicineDetail.category,\r\n                unit: medicineDetail.unit,\r\n                triggerValue: Number.parseFloat(medicineDetail.triggerValue),\r\n                image: medicineDetail.image,\r\n                salePrice: Number.parseFloat(medicineDetail.salePrice),\r\n                supplierPrice: medicineDetail.suppliersPrice,\r\n                tax: medicineDetail.tax,\r\n                supplierName: medicineDetail.supplierName,\r\n                availability: medicineDetail.availability,\r\n                stockQuantity: medicineDetail.stockQuantity,\r\n            }\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        console.log(form);\r\n        const body = {\r\n            medicineName: form.medicineName,\r\n            genericName: form.genericName,\r\n            boxSize: form.boxSize,\r\n            details: form.details,\r\n            category: form.category,\r\n            unit: form.unit,\r\n            triggerValue: form.triggerValue,\r\n            image: form.image,\r\n            salePrice: form.salePrice,\r\n            availability: form.availability,\r\n            stockQuantity: form.stockQuantity\r\n        };\r\n\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            body[\"medicineId\"] = queryParams.medicineId;\r\n        }\r\n\r\n        savePharmacyMedicine(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Medicine ${form.medicineName} ${queryParams.mode == 'edit' ? 'edited' : 'added'} successfully`,\r\n                duration: 3\r\n            });\r\n            clearForm();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while saving Medicine`,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n    function clearForm() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: null,\r\n                medicineName: \"\",\r\n                genericName: \"\",\r\n                boxSize: 0,\r\n                details: \"\",\r\n                category: \"\",\r\n                unit: \"\",\r\n                triggerValue: 0,\r\n                image: null,\r\n                salePrice: 0,\r\n                availability: \"In stock\",\r\n                stockQuantity: 0\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageSuppliers' });\r\n            }} type=\"dashed\" icon={<PlusOutlined />}>Add Supplier</Button>\r\n            <Button type=\"dashed\" onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button>\r\n            <br /><br /><br />\r\n            <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'availability']} label=\"Availability\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"In stock\">In Stock</Option>\r\n                                <Option value=\"Out of stock\">Out Of Stock</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'stockQuantity']} label=\"Stock Quantity\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineName']} label=\"Medicine Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'genericName']} label=\"Generic Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'boxSize']} label=\"Box Size\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'expiryDate']} label=\"Expiry Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineShelf']} label=\"Medicine Shelf\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'details']} label=\"Details\">\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'category']} label=\"Category\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select category\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'unit']} label=\"Unit\">\r\n                            <Select\r\n                                showSearch\r\n                                placeholder=\"Select Distribution Unit\" style={{ width: '100%' }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {medicineUnits}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'image']} label=\"Image\">\r\n                            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\r\n                                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'triggerValue']} label=\"Reorder value\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salePrice']} label=\"Sale price per unit\" rules={[{ required: true }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save and Add another\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default AddNewMedicine;\r\n","export const medicineDistributionUnits = [\"ampoule\",\r\n    \"bag\",\r\n    \"bottle\",\r\n    \"box\",\r\n    \"bundle\",\r\n    \"capsule\",\r\n    \"case\",\r\n    \"container\",\r\n    \"cream\",\r\n    \"each\",\r\n    \"gel\",\r\n    \"nebule\",\r\n    \"ointment\",\r\n    \"pack\",\r\n    \"pair\",\r\n    \"pallet\",\r\n    \"patch\",\r\n    \"pcs\",\r\n    \"pill\",\r\n    \"plastic\",\r\n    \"polyamp\",\r\n    \"roll\",\r\n    \"spray\",\r\n    \"suppository\",\r\n    \"suspension\",\r\n    \"set\",\r\n    \"syrup\",\r\n    \"tablet\",\r\n    \"tray\",\r\n    \"tube\",\r\n    \"vial\", \r\n    \"strips\"];","import { Space, Table, Input, Select, Typography, notification, Tag } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport { getPharmacyMedicineList, getPharmacyMedicineListByName, deleteMedicine } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nconst { Text } = Typography;\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         name: 'Paraceta',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217',\r\n//         stock: 100\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n// ];\r\n\r\nconst ManageMedicines = ({ location, history }) => {\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text, record) => (\r\n                <Text type={record.stockQuantity - record.triggerValue > 0 ? 'success' : 'danger'}>{text}</Text>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Category',\r\n            dataIndex: 'category',\r\n            key: 'category',\r\n            filters: [\r\n                {\r\n                    text: 'Tablet',\r\n                    value: 'Tablet',\r\n                },\r\n                {\r\n                    text: 'Syrup',\r\n                    value: 'Syrup',\r\n                }\r\n            ],\r\n            onFilter: (value, record) => record.category == value,\r\n            sorter: (a, b) => a.category - b.category,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Purchase Price',\r\n            dataIndex: 'supplierPrice',\r\n            key: 'supplierPrice',\r\n        },\r\n        {\r\n            title: 'Selling Price',\r\n            dataIndex: 'salePrice',\r\n            key: 'salePrice',\r\n        },\r\n        {\r\n            title: 'Generic name',\r\n            dataIndex: 'genericName',\r\n            key: 'genericName',\r\n        },\r\n        {\r\n            title: 'Expiry date',\r\n            dataIndex: 'expDate',\r\n            key: 'expDate',\r\n        },\r\n        {\r\n            title: 'Stock',\r\n            dataIndex: 'availability',\r\n            key: 'availability',\r\n            render: text => (text == 'In stock' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n        },\r\n        {\r\n            title: 'Stock Quantity',\r\n            dataIndex: 'stockQuantity',\r\n            key: 'stockQuantity',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=prefetch' + '&medicineName=' + record.name });\r\n                    }}>Place Order</a>\r\n                    {/* <a>Stock</a> */}\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addNewMedicine', search: '?mode=edit' + '&medicineId=' + record.medicineId });\r\n                    }}>Edit</a>\r\n                    <a onClick={() => {\r\n                        deleteMedicineRecord(record.medicineId);\r\n                    }}>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [medicineData, setMedicineData] = useState([]);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [filterValue, setfilterValue] = useState(\"medicineName\");\r\n    useEffect(() => {\r\n        getAllMedicines();\r\n    }, []);\r\n\r\n    if (medicineData.length > 0) {\r\n        const tempData = [];\r\n        medicineData.forEach((medicine, index) => {\r\n            tempData.push({\r\n                key: index,\r\n                name: medicine.medicineName,\r\n                medicineId: medicine.medicineId,\r\n                category: medicine.category,\r\n                supplierPrice: medicine.supplierPrice,\r\n                triggerValue: medicine.triggerValue,\r\n                salePrice: medicine.salePrice,\r\n                genericName: medicine.genericName,\r\n                expDate: medicine.expDate,\r\n                availability: medicine.availability,\r\n                stockQuantity: medicine.stockQuantity\r\n            });\r\n        });\r\n        data = [...tempData];\r\n    }\r\n\r\n    function onMedicineSearch(value) {\r\n        getPharmacyMedicineListByName(value).then(data => {\r\n            if (data) {\r\n                setMedicineData([...data]);\r\n            }\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: `Error while searching`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function deleteMedicineRecord(medicineId) {\r\n        deleteMedicine(medicineId).then(data => {\r\n            getAllMedicines();\r\n            notification[\"success\"]({\r\n                message: 'Success',\r\n                description: 'Medicine deleted successfully',\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function getAllMedicines() {\r\n        getPharmacyMedicineList().then(data => {\r\n            setMedicineData([...data]);\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"medicineName\">Medicine Name</Option>\r\n                    <Option value=\"genericName\">Generic Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onMedicineSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageMedicines;","import { useState } from 'react';\r\nimport { getPurchaseOrderList } from '../queries';\r\n\r\nconst UseGetAllPurchaseOrder = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPurchaseOrderList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default UseGetAllPurchaseOrder;","import { useState } from 'react';\r\nimport { deletePurchaseOrder } from '../queries';\r\n\r\nconst useDeletePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    const response = await deletePurchaseOrder(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n    } else {\r\n      setStatus(false);\r\n    }\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useDeletePurchaseOrder;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space, notification, Input, Select } from 'antd';\r\nimport UseGetAllPurchaseOrder from '../../../state/pharmacy/hooks/UseGetAllPurchaseOrders';\r\nimport useDeletePurchaseOrder from '../../../state/pharmacy/hooks/useDeletePurchaseOrder';\r\nimport { getRenderPropValue } from 'antd/lib/_util/getRenderPropValue';\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n// ];\r\n\r\nfunction resolveTag(tag) {\r\n    if (tag == \"cancelled\") {\r\n        return \"red\";\r\n    } else if (tag == \"orderPlaced\") {\r\n        return \"orange\";\r\n    } else {\r\n        return \"green\";\r\n    }\r\n\r\n}\r\nconst PurchaseOrder = ({ location, history }) => {\r\n\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Invoice No.',\r\n            dataIndex: 'invoiceNumber',\r\n            key: 'invoiceNumber',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Order Date',\r\n            dataIndex: 'orderDate',\r\n            key: 'orderDate',\r\n            render: text => <a>{text}</a>,\r\n            sorter: (a, b) => a.orderDate - b.orderDate,\r\n        },\r\n        {\r\n            title: 'Delivery Date',\r\n            dataIndex: 'deliveryDate',\r\n            key: 'deliveryDate',\r\n            sorter: (a, b) => a.deliveryDate - b.deliveryDate,\r\n        },\r\n        {\r\n            title: 'Supplier',\r\n            dataIndex: 'supplier',\r\n            key: 'supplier',\r\n            filters: [\r\n                {\r\n                    text: 'ACME',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'GSK',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Medimex',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.supplier == value,\r\n        },\r\n        {\r\n            title: 'Store',\r\n            dataIndex: 'store',\r\n            key: 'store',\r\n        },\r\n        {\r\n            title: 'Total Amount',\r\n            dataIndex: 'totalAmount',\r\n            key: 'totalAmount',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color={resolveTag(tag)} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Cancelled',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Order Placed',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=edit' + '&purchaseOrderId=' + record.purchaseOrderId });\r\n                    }}>View</a>\r\n                    <a onClick={() => deletePurchaseOrder(record)}>Cancel</a>\r\n                    {/* <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>edit</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [filterValue, setfilterValue] = useState(\"invoiceNumber\");\r\n    const [purchaseOrders, isLoading, setGetAllPurchaseOrder] = UseGetAllPurchaseOrder();\r\n    const [status, setDeletePurchaseOrder] = useDeletePurchaseOrder();\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n        setGetAllPurchaseOrder();\r\n    }, []);\r\n\r\n    function deletePurchaseOrder(record) {\r\n        const body = {\r\n            purchaseOrderId: record.purchaseOrderId,\r\n            supplierName: null,\r\n            orderDate: null,\r\n            storeName: null,\r\n            // totalAmount: null,\r\n            deliveryDate: null,\r\n            rol: null,\r\n            productDetails: null,\r\n        };\r\n        setDeletePurchaseOrder(body);\r\n    }\r\n    if (purchaseOrders.length > 0) {\r\n        data = purchaseOrders.map((order, index) => {\r\n            return {\r\n                key: index,\r\n                invoiceNumber: order.invoiceNumber,\r\n                purchaseOrderId: order.purchaseOrderId,\r\n                orderDate: (new Date(order.orderDate)).toDateString(),\r\n                deliveryDate: (new Date(order.deliveryDate)).toDateString(),\r\n                supplier: order.supplierName,\r\n                store: order.storeName,\r\n                totalAmount: order.totalAmount,\r\n                status: (order.status != null ? [order.status] : ['Order Placed'])\r\n            };\r\n        });\r\n    }\r\n    function onOrderSearch(searchValue) {\r\n\r\n        if (searchValue == '') {\r\n            // setRequest();\r\n            // // setShowPatient(\"all\");\r\n        } else if (filterValue == \"invoiceNumber\") {\r\n            // setPatientSearchbyId(searchValue);\r\n            // setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"supplierName\") {\r\n            // setPatientSearchbyName(searchValue);\r\n            // setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"invoiceNumber\">Invoice Number</Option>\r\n                    <Option value=\"supplierName\">Supplier</Option>\r\n                    {/* <Option value=\"SupplierName\">Supplier Name</Option> */}\r\n                </Select>\r\n                <Input.Search onSearch={onOrderSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getSuppliersList } from '../queries';\r\n\r\nconst useGetAllSuppliers = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getSuppliersList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetAllSuppliers;","import { useState } from 'react';\r\nimport { savePurchaseOrder } from '../queries';\r\n\r\nconst useSavePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const request = async (body) => {\r\n    const response = await savePurchaseOrder(body);\r\n\r\n    setStatus(response);\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useSavePurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getPurchaseOrderDetails } from '../queries';\r\n\r\nconst useGetPurchaseOrderDetails = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPurchaseOrderDetails(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPurchaseOrderDetails;","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useSavePurchaseOrder from '../../../state/pharmacy/hooks/useSavePurchaseOrder';\r\nimport useGetPurchaseOrderDetails from '../../../state/pharmacy/hooks/useGetPurchaseOrderDetails';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPurchaseOrder = ({ location, history }) => {\r\n    const medicineMap = new Map();\r\n    let options = [];\r\n    const supplierOptions = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    let index = 0;\r\n    const [purchaseDetailsForm] = Form.useForm();\r\n    const [productListForm] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n    const [suppliers, isLoadings, setSupplierSearch] = useGetAllSuppliers();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [status, setSavePurchaseOrder] = useSavePurchaseOrder();\r\n    const [orderDetail, setGetPurchaseOrderDetails] = useGetPurchaseOrderDetails();\r\n    // const [purchaseOrderList, isLoading1, setPurchaseOrderListFetch] = UseGetAllPurchaseOrder();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setSupplierSearch();\r\n        if (status && submitted) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n            setSubmitted(false);\r\n        }\r\n        if (queryParams.mode == \"edit\" && queryParams.purchaseOrderId != null && submitted == false && status == false) {\r\n            setGetPurchaseOrderDetails(queryParams.purchaseOrderId);\r\n        }\r\n    }, [status, submitted]);\r\n\r\n\r\n    if (orderDetail != null) {\r\n        console.log(orderDetail);\r\n        purchaseDetailsForm.setFieldsValue({\r\n            user: {\r\n                supplierName: orderDetail.supplierName,\r\n                orderDate: moment(new Date(orderDetail.orderDate), 'YYYY-MM-DD'),\r\n                storeName: orderDetail.storeName,\r\n                status: orderDetail.status,\r\n                invoiceNumber: orderDetail.invoiceNumber,\r\n                deliveryDate: moment(new Date(orderDetail.deliveryDate), 'YYYY-MM-DD'),\r\n                rol: orderDetail.rol\r\n            }\r\n        });\r\n        productListForm.setFieldsValue({\r\n            user: {\r\n                totalAmount: orderDetail.totalAmount,\r\n                totalGST: orderDetail.totalGST,\r\n                totalDiscount: orderDetail.totalDiscount,\r\n            }\r\n        });\r\n        if (orderDetail.productDetails != null) {\r\n            const productList = [];\r\n            orderDetail.productDetails.forEach(product => {\r\n                productList.push({\r\n                    productId: product.productId,\r\n                    productName: product.productName,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    batchNumber: product.batchNumber,\r\n                    expiryDate: moment(new Date(product.expiryDate), 'YYYY-MM-DD'),\r\n                    discount: product.discount,\r\n                    tax: product.tax,\r\n                });\r\n            });\r\n            productListForm.setFieldsValue({\r\n                users: [...productList]\r\n            });\r\n        }\r\n\r\n    }\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach(supplier => {\r\n            supplierOptions.push({ value: supplier.supplierName, label: supplier.supplierName });\r\n        });\r\n    }\r\n    if (medicines.length > 0) {\r\n        medicines.forEach(medicine => {\r\n            options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            medicineMap.set(medicine.medicineName, medicine);\r\n        });\r\n    }\r\n    if (queryParams.mode == \"prefetch\") {\r\n\r\n        productListForm.setFieldsValue({\r\n            users: [{\r\n                productId: null,\r\n                productName: queryParams.medicineName,\r\n                quantity: 1,\r\n                unit: \"\",\r\n                purchaseCost: \"\",\r\n                batchNumber: \"\",\r\n                expDate: \"\",\r\n                discount: \"\",\r\n                tax: \"\"\r\n            }]\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const purchaseDetails = purchaseDetailsForm.getFieldsValue().user;\r\n        const productList = productListForm.getFieldsValue().users;\r\n        const finalCharges = productListForm.getFieldsValue().user;\r\n        const body = {\r\n            purchaseOrderId: queryParams.purchaseOrderId,\r\n            supplierName: purchaseDetails.supplierName,\r\n            orderDate: purchaseDetails.orderDate,\r\n            storeName: purchaseDetails.storeName,\r\n            invoiceNumber: purchaseDetails.invoiceNumber,\r\n            totalAmount: finalCharges.totalAmount,\r\n            totalGST: finalCharges.totalGST,\r\n            totalDiscount: finalCharges.totalDiscount,\r\n            deliveryDate: purchaseDetails.deliveryDate,\r\n            rol: purchaseDetails.rol,\r\n            status: purchaseDetails.status,\r\n            productDetails: [],\r\n        };\r\n        if (productList != null && productList.length > 0) {\r\n            productList.forEach(product => {\r\n                const medicine = medicineMap.get(product.productName);\r\n                body.productDetails.push({\r\n                    productId: product.productId,\r\n                    purchaseOrderId: queryParams.purchaseOrderId,\r\n                    medicineId: medicine.medicineId,\r\n                    productName: product.productName,\r\n                    batchNumber: product.batchNumber,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    discount: product.discount,\r\n                    tax: product.tax\r\n                });\r\n            });\r\n        }\r\n        setSubmitted(true);\r\n        setSavePurchaseOrder(body);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n        // setMedicineSearch();\r\n    }\r\n\r\n    const onSearchSupplier = (value) => {\r\n        // setSupplierSearch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/purchaseOrderList' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button>\r\n            <br /><br /><br />\r\n            <Form form={purchaseDetailsForm}  {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'rol']} label=\"ROL\">\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear>\r\n                                <Option value=\"orderPlaced\">Order Placed</Option>\r\n                                <Option value=\"delivered\">Delivered</Option>\r\n                                <Option value=\"cancelled\">Cancelled</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'supplierName']} label=\"Suppliers Name\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                onSearch={onSearchSupplier}\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                                options={supplierOptions}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Supplier name\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'deliveryDate']} label=\"Delivery Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'invoiceNumber']} label=\"Invoice Number\">\r\n                            <Input style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'orderDate']} label=\"Order Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'storeName']} label=\"Store Name\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select Store\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'salesStartDate']} label=\"Sales Start Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salesEndDate']} label=\"Sales End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form form={productListForm} name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'batchNumber']}\r\n                                            fieldKey={[field.fieldKey, 'batchNumber']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 150 }} placeholder=\"Batch No.\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'unit']}\r\n                                            fieldKey={[field.fieldKey, 'unit']}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Unit\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">bottle</Option>\r\n                                                <Option value=\"1-1-0\">box</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'purchaseCost']}\r\n                                            fieldKey={[field.fieldKey, 'purchaseCost']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 150 }} placeholder=\"Purchase Cost\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'expiryDate']}\r\n                                            fieldKey={[field.fieldKey, 'expiryDate']}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'discount']}\r\n                                            fieldKey={[field.fieldKey, 'discount']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"discount\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'tax']}\r\n                                            fieldKey={[field.fieldKey, 'tax']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"tax\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalGST']} label=\"Total GST\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalDiscount']} label=\"Total Discount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPurchaseOrder;\r\n","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst IndentPreparation = () => {\r\n    let options = [];\r\n    let index = 0;\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientId']} label=\"Patient Search\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Reg. No\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'indentDate']} label=\"Indent Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientName']} label=\"Patient Name\">\r\n                            <Input placeholder=\"Patient Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'consultantName']} label=\"Consultant Name\">\r\n                            <Input placeholder=\"Consultant Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'mobileNumber']} label=\"Mobile\">\r\n                            <Input placeholder=\"Mobile Number\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'comments']} label=\"Comments\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'address']} label=\"Address\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'uom']}\r\n                                            fieldKey={[field.fieldKey, 'uom']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 125 }} placeholder=\"UOM\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'mrp']}\r\n                                            fieldKey={[field.fieldKey, 'mrp']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"MRP\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'stockQuantity']}\r\n                                            fieldKey={[field.fieldKey, 'stockQuantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Stock Quantity\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item htmlType=\"submit\">\r\n                            <Button type=\"primary\">\r\n                                Bill\r\n                            </Button>\r\n                            <Button type=\"primary\" style={{ marginLeft: '15px' }} >\r\n                                Add New\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default IndentPreparation;","import { useState } from 'react';\r\nimport { saveSupplier } from '../queries';\r\n\r\nconst useAddSupplier = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n    const response = await saveSupplier(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddSupplier;\r\n","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table, Space } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useAddSupplier from '../../../state/pharmacy/hooks/useAddSupplier';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\n\r\nconst ManageSupplier = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddSupplier();\r\n    const [suppliers, isLoadings, setMedicineSearch] = useGetAllSuppliers();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Supplier added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (suppliers.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = formData => {\r\n        const body = {\r\n            \"supplierName\": formData.name,\r\n            \"email\": formData.email,\r\n            \"phoneNumber\": formData.phone,\r\n            \"address\": formData.address,\r\n        };\r\n        setRequest(body);\r\n        form.setFieldsValue({\r\n            \"name\": \"\",\r\n            \"email\": \"\",\r\n            \"phone\": \"\",\r\n            \"address\": \"\",\r\n        });\r\n        \r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'supplierName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email'\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber'\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={()=> editSupplier(record)}>Edit</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    function editSupplier(record) {\r\n        form.setFieldsValue({\r\n            \"name\": record.supplierName,\r\n            \"email\": record.email,\r\n            \"phone\": record.phoneNumber,\r\n            \"address\": record.address,\r\n        });\r\n    }\r\n\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach((supplier, index) => {\r\n            data.push({\r\n                key: index,\r\n                supplierId: supplier.supplierId,\r\n                supplierName: supplier.supplierName,\r\n                email: supplier.email,\r\n                phoneNumber: supplier.phoneNumber,\r\n                address: supplier.address,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Supplier name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[{ required: false, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    rules={[{ required: false, message: 'Please input contact!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Contact\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"address\"\r\n                    rules={[{ required: false, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Address\" />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Supplier\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageSupplier;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space } from 'antd';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Patient Reg No',\r\n        dataIndex: 'regNo',\r\n        key: 'regNo',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Patient Name',\r\n        dataIndex: 'patientName',\r\n        key: 'patientName',\r\n    },\r\n    {\r\n        title: 'Indent Date and Time',\r\n        dataIndex: 'indentDate',\r\n        key: 'indentDate',\r\n    },\r\n    {\r\n        title: 'Submitted By',\r\n        dataIndex: 'submittedBy',\r\n        key: 'submittedBy',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n    },\r\n    {\r\n        key: '2',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n    {\r\n        key: '3',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n];\r\n\r\nconst IndentList = () => {\r\n    return (\r\n        <>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IndentList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\nconst Certificates = () => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'name']} label=\"Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'guardianName']} label=\"Guardian Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'relation']} label=\"Relation\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'dateAndTime']} label=\"Date and time\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <ReactQuill theme=\"snow\" value={value} onChange={setValue} />\r\n\r\n            <Row style={{ textAlign: 'right', marginTop: 30 }}>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Generate\r\n                            </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Certificates;\r\n","import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Form, Input, Switch, InputNumber, Row, Select, Space } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPackage = () => {\r\n    let options = [];\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"dashed\" icon={<PlusOutlined />}>All Packages</Button>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageName']} label=\"Package Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageEndDate']} label=\"Package End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packagePrice']} label=\"Package Price\" rules={[{ required: true, type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\" >\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"price\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPackage;\r\n","import React, { useEffect } from 'react';\r\n\r\nconst InProgress = () => {\r\n    return (\r\n        <>\r\n        <h1 style={{fontSize: '56px'}}>The Page is in Progress ...</h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InProgress;\r\n","import { useState } from 'react';\r\nimport { getPrescriptionByAppointmentId } from '../queries';\r\n\r\nconst useGetPrescriptionByAppointmentId = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (appointmentId) => {\r\n        const response = await getPrescriptionByAppointmentId(appointmentId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPrescriptionByAppointmentId;","import React, { useRef } from 'react';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\nimport './printPrescription.css';\r\nexport class PrintPrescription extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const appointmentId = this.props.appointmentId;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const patientVitals = this.props.patientVitals;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        let medicineTable = \"\";\r\n        let testTable = \"\";\r\n        if (this.props.medicineList != null && this.props.medicineList.length > 0) {\r\n            const medicineList = this.props.medicineList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.medicineName}</td>\r\n                        <td>{item.dosage}</td>\r\n                        <td>{item.days}</td>\r\n                        <td>{item.comment}</td>\r\n                    </tr>)\r\n            });\r\n            medicineTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed medicines</h3>\r\n                <table class=\"itemTable\" >\r\n                    <tr>\r\n                        <th>Medicine Name</th>\r\n                        <th>Dosage</th>\r\n                        <th>Days</th>\r\n                        <th>Comment</th>\r\n                    </tr>\r\n                    {medicineList}\r\n                </table>\r\n            </div>\r\n        }\r\n        if (this.props.testList != null && this.props.testList.length > 0) {\r\n            const testList = this.props.testList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.testName}</td>\r\n                        <td>{item.dateOfBooking}</td>\r\n                        <td>{item.dateOfResult}</td>\r\n                        <td>{item.reportDesc}</td>\r\n                        <td>{item.testDesc}</td>\r\n                    </tr>)\r\n            });\r\n            testTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed tests</h3>\r\n                <table class=\"itemTable\">\r\n                    <tr>\r\n                        <th>Test Name</th>\r\n                        <th>Test Date</th>\r\n                        <th>Report Date</th>\r\n                        <th>Doctor comment</th>\r\n                        <th>Report summary</th>\r\n                    </tr>\r\n                    {testList}\r\n                </table>\r\n            </div>\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Info</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>{patientDetails.patientName}</th>\r\n                            <td>Age</td>\r\n                            <td>{patientDetails.age}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>PatientId</td>\r\n                            <td>{patientId}</td>\r\n                            <td>AppointmentId</td>\r\n                            <td>{appointmentId}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Date</td>\r\n                            <td>{todaysDate}</td>\r\n                            <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Vitals</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Height : {patientVitals.height}</th>\r\n                            <td>Weight : {patientVitals.weight}</td>\r\n                            <td>Bp : {patientVitals.Bp}</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Temperature : {patientVitals.temperature}</td>\r\n                            <td>Disease description : {patientVitals.diseaseDesc}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            {/* <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td> */}\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    {medicineTable}\r\n                    {testTable}\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Appointment summary : {patientVitals.advise}</th>\r\n                        </tr>\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        {/* <div>Cashier Signature</div> */}\r\n                        <div style={{ float: 'right' }}>Doctor's Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Table, Descriptions, Button } from 'antd';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useGetPrescriptionByAppointmentId from '../../../state/prescription/hooks/useGetPrescriptionByAppointmentId';\r\nimport queryString from 'query-string';\r\nimport usePatientById from '../../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../../patientDetails';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport { PrintPrescription } from '../printPrescription';\r\nconst medicinecolumns = [\r\n    {\r\n        title: 'Medicine Name',\r\n        dataIndex: 'medicineName',\r\n    },\r\n    {\r\n        title: 'Dosage',\r\n        dataIndex: 'dosage',\r\n    },\r\n    {\r\n        title: 'Days',\r\n        dataIndex: 'days',\r\n    },\r\n    {\r\n        title: 'Comment',\r\n        dataIndex: 'comment',\r\n    },\r\n];\r\n\r\nconst testcolumns = [\r\n    {\r\n        title: 'Test Name',\r\n        dataIndex: 'testName',\r\n    },\r\n    {\r\n        title: 'Test Date',\r\n        dataIndex: 'dateOfBooking',\r\n    },\r\n    {\r\n        title: 'Report Date',\r\n        dataIndex: 'dateOfResult',\r\n    },\r\n    {\r\n        title: 'Doctor comment',\r\n        dataIndex: 'testDesc',\r\n\r\n    },\r\n    {\r\n        title: 'Report Summary',\r\n        dataIndex: 'reportDesc',\r\n\r\n    }\r\n];\r\n\r\n\r\nconst ViewPrescription = ({ location, history }) => {\r\n    const medicineData = [];\r\n    const testData = [];\r\n\r\n    let appointmentDetails = {\r\n        appointmentId: '',\r\n        diseaseDesc: '',\r\n        advise: '',\r\n        patientId: '',\r\n        patientName: '',\r\n        doctorId: '',\r\n        height: '',\r\n        weight: '',\r\n        Bp: '',\r\n        createdAt: '',\r\n        appointmentDate: '',\r\n        timeSlot: '',\r\n        status: '',\r\n        temperature: ''\r\n    };\r\n\r\n    const queryParams = queryString.parse(location.search);\r\n    const [prescriptionDetails, setPrescriptionDetails] = useGetPrescriptionByAppointmentId();\r\n    const [patientDetails, isLoading, setPatientSearchById] = usePatientById(queryParams.patientId);\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        setPrescriptionDetails(queryParams.appointmentId);\r\n        setPatientSearchById(queryParams.patientId);\r\n    }, []);\r\n\r\n    if (prescriptionDetails != null) {\r\n        console.log(prescriptionDetails);\r\n        if (prescriptionDetails.appointmentDto != null) {\r\n            const appointmentDto = prescriptionDetails.appointmentDto;\r\n            console.log('le bhgat', appointmentDto);\r\n            appointmentDetails = {\r\n                appointmentId: appointmentDto.appointmentId,\r\n                diseaseDesc: appointmentDto.diseaseDesc,\r\n                advise: appointmentDto.advise,\r\n                patientId: appointmentDto.patientId,\r\n                patientName: appointmentDto.patientName,\r\n                doctorId: appointmentDto.doctorId,\r\n                height: appointmentDto.height,\r\n                weight: appointmentDto.weight,\r\n                Bp: appointmentDto.Bp,\r\n                createdAt: appointmentDto.createdAt,\r\n                appointmentDate: appointmentDto.appointmentDate,\r\n                timeSlot: appointmentDto.timeSlot,\r\n                status: appointmentDto.status,\r\n            }\r\n        }\r\n\r\n        if (prescriptionDetails.prescribedMedsDtoList != null) {\r\n            prescriptionDetails.prescribedMedsDtoList.forEach((medicine, index) => {\r\n                medicineData.push({\r\n                    key: medicine.medName + index,\r\n                    medicineName: medicine.medName,\r\n                    dosage: medicine.dosage,\r\n                    days: medicine.days,\r\n                    comment: medicine.comment\r\n\r\n                });\r\n            });\r\n        }\r\n        if (prescriptionDetails.prescribedTestingDtoList != null) {\r\n            prescriptionDetails.prescribedTestingDtoList.forEach((test, index) => {\r\n                testData.push({\r\n                    key: test + index,\r\n                    testName: test.testDesc,\r\n                    dateOfBooking: test.dateOfBooking,\r\n                    dateOfResult: test.dateOfResult,\r\n                    reportDesc: test.reportDesc,\r\n                    testDesc: test.comment,\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" style={{ float: \"right\" }} shape=\"round\" icon={<PrinterOutlined />} size=\"default\" onClick={handlePrint}>\r\n                Print\r\n        </Button>\r\n            <div style={{ display: 'none' }}>\r\n                <PrintPrescription ref={componentRef} patientVitals={appointmentDetails} appointmentId={appointmentDetails.appointmentId} patientId={queryParams.patientId} medicineList={medicineData} testList={testData} patientDetails={patientDetails} />\r\n            </div>\r\n            <h4>Patient Info</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Name\">{patientDetails.patientName} </Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"AppointmentId\">{appointmentDetails.appointmentId}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{patientDetails.visitType}</Descriptions.Item>\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Patient Vitals</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Height\">{appointmentDetails.height}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Weight\">{appointmentDetails.weight}</Descriptions.Item>\r\n                <Descriptions.Item label=\"BP\">{appointmentDetails.Bp}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Temperature\">{appointmentDetails.temperature}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Disease description\">{appointmentDetails.diseaseDesc}</Descriptions.Item>\r\n\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Prescribed Medicines</h4>\r\n            <Table columns={medicinecolumns} dataSource={medicineData} size=\"middle\" />\r\n            <hr />\r\n            <h4>Prescribed Tests</h4>\r\n            <Table columns={testcolumns} dataSource={testData} size=\"middle\" />\r\n            <hr />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Appointment Summary\">{appointmentDetails.advise}</Descriptions.Item>\r\n            </Descriptions>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default ViewPrescription;","export const registration = { label: \"Registration\", link: \"/registration\" }\r\nexport const patientSearch = { label: \"Search Patients\", link: \"/patientSearch\" }\r\nexport const doctorAppointment = { label: \"Doctor Appointment\", link: \"/doctorAppointment\" }\r\nexport const addDoctor = { label: \"Add Doctors\", link: \"/addDoctor\" }\r\nexport const addMedicine = { label: \"Add Medicines\", link: \"/addMedicine\" }\r\nexport const addTest = { label: \"Add Test\", link: \"/addTest\" }\r\nexport const serviceCatalogue = { label: \"Service Catalogue\", link: \"/inProgress\" }\r\nexport const addNewMedicine = { label: \"Add New Medicine\", link: \"/addNewMedicine\" }\r\nexport const manageMedicines = { label: \"Manage Medicines\", link: \"/manageMedicines\" }\r\nexport const purchaseOrderList = { label: \"Purchase Order List\", link: \"/purchaseOrderList\" }\r\nexport const newPurchaseOrder = { label: \"New Purchase Order\", link: \"/newPurchaseOrder\" }\r\nexport const manageSuppliers = { label: \"Manage Suppliers\", link: \"/manageSuppliers\" }\r\nexport const billing = { label: \"Billing\", link: \"/billing\" };\r\nexport const billSearch = { label: \"Bill Search\", link: \"/billSearch\" };\r\nexport const appointment = { label: \"Appointment\", link: \"/appointment\" };\r\nexport const certificates = { label: \"Certificates\", link: \"/certificates\" };\r\nexport const packageManagement = { label: \"Package Management\", link: \"/package\" };\r\nexport const canteen = { label: \"Canteen\", link: \"/canteen\" };\r\nexport const pharmacy = { label: \"Pharmacy\", link: \"/pharmacy\" };\r\nexport const reimbursements = { label: \"Reimbursements\", link: \"/inProgress\" };\r\nexport const insurance = { label: \"Insurance\", link: \"/inProgress\" };\r\nexport const certificateCreation = { label: \"Certificate creation\", link: \"/inProgress\" };\r\nexport const referrals = { label: \"Referrals\", link: \"/inProgress\" };\r\n\r\nexport const doctorRoutes = [doctorAppointment];\r\nexport const pharmacyRoutes = [addNewMedicine, manageMedicines, purchaseOrderList, newPurchaseOrder, manageSuppliers, billing, billSearch];\r\nexport const receptionRoutes = [registration, patientSearch, appointment, billing, billSearch];\r\nexport const upcomingRoutes = [certificates, packageManagement, canteen, pharmacy, reimbursements, insurance, certificateCreation, referrals];\r\nexport const adminRoutes = [addMedicine, addTest, addDoctor, serviceCatalogue]; \r\n","import { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from \"../utils/roles\";\r\nimport { adminRoutes, doctorRoutes, pharmacyRoutes, receptionRoutes, upcomingRoutes } from \"./allRoutesData\";\r\n\r\nconst map = new Map();\r\n\r\nmap.set(ADMIN, adminRoutes);\r\nmap.set(DOCTOR, doctorRoutes);\r\nmap.set(PHARMACY, pharmacyRoutes);\r\nmap.set(RECEPTION, receptionRoutes);\r\nmap.set(UPCOMING, upcomingRoutes);\r\n\r\nexport var getRoutes = function (roleList) {\r\n    const routes = {};\r\n    roleList.forEach(role => {\r\n        routes[role] = map.get(role);\r\n    });\r\n    return routes;\r\n}","import React, { useRef } from 'react';\r\nimport '../components/mainBillView.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class MainBillView extends React.Component {\r\n    render() {\r\n        const billItemList = this.props.billItemList;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = billItemList.map(item => {\r\n            let itemList = [];\r\n            if (item['billDetailList']) {\r\n                itemList = item['billDetailList'].map(billItem => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{(billItem.purchaseType == \"pharmacy-return\" ? billItem.itemName + '(' + billItem.purchaseType + ')' : billItem.itemName)}</td>\r\n                            <td>{billItem.quantity}</td>\r\n                            <td>{billItem.mrp}</td>\r\n                            <td>{billItem.gstPercentage}</td>\r\n                            <td>{billItem.concessionPercentage}</td>\r\n                            <td>{billItem.cost}</td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            }\r\n            return (\r\n                <div style={{ width: '100%' }}>\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Bill Id:</span> {item.billId} &nbsp;&nbsp;\r\n                    <span>Bill Date:</span> {new Date(item.createdAt).toDateString()} &nbsp;&nbsp;\r\n                    <span>Payment Mode:</span> {item.paymentMode}\r\n                    </div>\r\n                    <br />\r\n                    <table class=\"itemTable\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(%)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemList}\r\n                        </tbody>\r\n                    </table>\r\n                    <br />\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Total Amount :</span> {item.totalCost} &nbsp;&nbsp;\r\n                        <span>Total Discount :</span>  {item.totalDiscount} &nbsp;&nbsp;\r\n                        <span>Total GST :</span>  {item.totalGST}\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    {itemArray}\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import { Space, Table, Button, Row, Col,Tag, notification } from 'antd';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport moment from 'moment';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport BillSearchComp from '../billing/components/billSearch';\r\nimport { getBillDetails } from '../billing/services';\r\nimport { MainBillView } from './components/mainBillView';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { getBillListByDateRange } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst BillSearch = ({ history }) => {\r\n    const columns = [\r\n        {\r\n            title: 'Bill Id',\r\n            dataIndex: 'billId',\r\n            key: 'billId',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Patient Id',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId'\r\n        },\r\n        {\r\n            title: 'Bill Date',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n        },\r\n        {\r\n            title: 'Bill Total',\r\n            dataIndex: 'totalCost',\r\n            key: 'totalCost',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'paymentStatus',\r\n            key: 'paymentStatus',\r\n            filters: [\r\n                {\r\n                    text: 'dues',\r\n                    value: 'dues',\r\n                },\r\n                {\r\n                    text: 'paid',\r\n                    value: 'paid',\r\n                }\r\n            ],\r\n            onFilter: (value, record) => record.paymentStatus == value,\r\n            render: text => (text == 'paid' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n            \r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/billing', search: '?context=edit' + '&billId=' + record.billId });\r\n                    }}>View/Edit</a>\r\n                    {/* <a onClick={() => {\r\n                        printSingleBill(record);\r\n                    }}>Print</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [data, setData] = useState([]);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [searchCriteria, setSearchFilter] = useState({});\r\n    const [] = useState({});\r\n    let mainBillViewButton = \"\";\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        // \r\n    }, []);\r\n\r\n    if (searchCriteria.searchFilter == \"patientId\") {\r\n        console.log(searchCriteria);\r\n        mainBillViewButton = <Button type=\"primary\" onClick={viewMainBill}>View Main Bill</Button>;\r\n    }\r\n\r\n    function viewMainBill() {\r\n        handlePrint();\r\n    }\r\n    function changePatientdetails(patientId) {\r\n        getPatientById(patientId).then(patientDetails => {\r\n            setPatientDetails(patientDetails);\r\n        }).catch(() => {\r\n\r\n        });\r\n    }\r\n\r\n    function onBillSearch(searchValue, searchFilter) {\r\n        if (searchFilter != \"dateRange\") {\r\n            getBillDetails(searchValue, searchFilter).then(response => {\r\n                if (response) {\r\n                    setSearchFilter({\r\n                        searchFilter: searchFilter,\r\n                        searchValue: searchValue\r\n                    });\r\n                    if (searchFilter == \"patientId\") {\r\n                        changePatientdetails(searchValue);\r\n                    }\r\n                    if (response) {\r\n                        const temp = response.map((data, index) => {\r\n                            return {\r\n                                ...data, createdAt: new Date(data.createdAt).toDateString(), key: index\r\n                            }\r\n                        });\r\n                        setData([...temp]);\r\n                    }\r\n\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter} ${searchValue}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: `Error while searching ${searchFilter} ${searchValue}`,\r\n                    duration: 3\r\n                });\r\n            });\r\n        } else {\r\n            getBillListByDateRange(moment(searchValue[1]).toDate().getTime(), moment(searchValue[0]).toDate().getTime(), 'PHARMACY').then(data => {\r\n                console.log(data);\r\n                if (data) {\r\n                    const temp = data.map((item, index) => {\r\n                        return {\r\n                            ...item, createdAt: new Date(item.createdAt).toDateString(), key: index\r\n                        }\r\n                    });\r\n                    setData([...temp]);\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{ display: 'none' }}>\r\n                <MainBillView ref={componentRef} billItemList={data} patientDetails={patientDetails} patientId={searchCriteria.searchValue} />\r\n                {/* <BillPrint ref={componentRef} itemList={billPrintData} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} /> */}\r\n            </div>\r\n            <Row gutter={24}>\r\n                <Col span={10}>\r\n                    <BillSearchComp onSearch={onBillSearch} />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button type=\"primary\" onClick={() => { history.push({ pathname: '/home/billing' }) }}>Create New bill</Button>\r\n                </Col>\r\n                <Col span={4}>\r\n                    {mainBillViewButton}\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BillSearch;","import { MedicineBoxOutlined, MenuFoldOutlined, MenuUnfoldOutlined, UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons';\r\nimport { Layout, Menu } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport AddDoctor from '../admin/addDoctor';\r\nimport Appointment from '../appointment';\r\nimport Billing from '../billing';\r\nimport Canteen from '../canteen';\r\nimport CanteenStock from '../canteen/canteenStock';\r\nimport DoctorAppointment from '../doctorAppointment';\r\nimport '../home/home.css';\r\nimport AddMedicine from '../medicine/addMedicine';\r\nimport AddTest from '../medicine/addTest';\r\nimport PackageManagement from '../package';\r\nimport PatientSearch from '../patientSearch';\r\nimport Pharmacy from '../pharmacy';\r\nimport Prescription from '../prescription';\r\nimport Registration from '../registration';\r\nimport HomeScreen from './homescreen';\r\nimport AddNewMedicine from '../pharmacy/addNewMedicine';\r\nimport ManageMedicines from '../pharmacy/manageMedicine';\r\nimport PurchaseOrder from '../pharmacy/purchaseOrderList';\r\nimport NewPurchaseOrder from '../pharmacy/newPurchaseOrder';\r\nimport IndentPreparation from '../pharmacy/indentPreparations';\r\nimport ManageSupplier from '../pharmacy/manageSupplier';\r\nimport IndentList from '../pharmacy/indentPreparations/indentList';\r\nimport Certificates from '../certificates';\r\nimport Package from '../package';\r\nimport NewPackage from '../package/newPackage';\r\nimport InProgress from '../inProgress';\r\nimport ViewPrescription from '../prescription/viewPrescription';\r\nimport { useStateValue } from '../../state';\r\nimport { getRoutes } from '../../routes/routeResolver';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\nimport BillSearch from '../billSearch';\r\n\r\nconst { Header, Sider, Content, Footer } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Home = ({ location, history, match }) => {\r\n  const path = match.path;\r\n  let realRoutes = [];\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [itemSelected, setItemSelected] = useState(\"\");\r\n  const [routes, setRoutes] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    // setRoutes(getRoutes([RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING]));\r\n    setRoutes(getRoutes([...auth.roles]));\r\n  }, []);\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n    setItemSelected(\"\");\r\n  };\r\n\r\n  const handleClick = e => {\r\n    setItemSelected(e.key);\r\n  };\r\n\r\n  for (const [roleName, routeList] of Object.entries(routes)) {\r\n    const childroutes = routeList.map(route => {\r\n      return generateRouteObject(route);\r\n    });\r\n    if (auth.roles.length == 1) {\r\n      realRoutes = childroutes;\r\n    } else {\r\n      realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n    }\r\n    // realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n  }\r\n  function generateRouteObject(routeObject) {\r\n    return <Menu.Item key={routeObject.label}><Link to={`${path}${routeObject.link}`}>{routeObject.label}</Link></Menu.Item>\r\n  }\r\n  function subRoutesByRole(routes, roleName) {\r\n    return <SubMenu key={roleName} icon={<UserOutlined />} title={roleName}>{routes}</SubMenu>\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Sider trigger={null} collapsible collapsed={collapsed}>\r\n        <div className=\"logo\" />\r\n        <Menu onSelect={handleClick} theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          {realRoutes}\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n            className: 'trigger',\r\n            onClick: toggle,\r\n          })}\r\n          {itemSelected}\r\n        </Header>\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            margin: '24px 16px',\r\n            padding: 24,\r\n            minHeight: 280,\r\n            overflow: 'auto',\r\n            height: '100vh',\r\n          }}\r\n        >\r\n          <Route exact path=\"/home\" component={HomeScreen} />\r\n          <Route path={`${path}/billing`} component={Billing} />\r\n          <Route path={`${path}/billSearch`} component={BillSearch} />\r\n          <Route path={`${path}/registration`} component={Registration} />\r\n          <Route path={`${path}/patientSearch`} component={PatientSearch} />\r\n          <Route path={`${path}/addDoctor`} component={AddDoctor} />\r\n          <Route path={`${path}/appointment`} component={Appointment} />\r\n          <Route path={`${path}/doctorAppointment`} component={DoctorAppointment} />\r\n          <Route path={`${path}/prescription`} component={Prescription} />\r\n          <Route path={`${path}/addMedicine`} component={AddMedicine} />\r\n          <Route path={`${path}/addTest`} component={AddTest} />\r\n          <Route path={`${path}/packages`} component={PackageManagement} />\r\n          <Route path={`${path}/canteen`} component={Canteen} />\r\n          <Route path={`${path}/canteenStock`} component={CanteenStock} />\r\n          <Route path={`${path}/pharmacy`} component={Pharmacy} />\r\n          <Route path={`${path}/addNewMedicine`} component={AddNewMedicine} />\r\n          <Route path={`${path}/manageMedicines`} component={ManageMedicines} />\r\n          <Route path={`${path}/purchaseOrderList`} component={PurchaseOrder} />\r\n          <Route path={`${path}/newPurchaseOrder`} component={NewPurchaseOrder} />\r\n          <Route path={`${path}/indentPreparation`} component={IndentPreparation} />\r\n          <Route path={`${path}/indentList`} component={IndentList} />\r\n          <Route path={`${path}/certificates`} component={Certificates} />\r\n          <Route path={`${path}/package`} component={Package} />\r\n          <Route path={`${path}/newPackage`} component={NewPackage} />\r\n          <Route path={`${path}/manageSuppliers`} component={ManageSupplier} />\r\n          <Route path={`${path}/inProgress`} component={InProgress} />\r\n          <Route path={`${path}/viewPrescription`} component={ViewPrescription} />\r\n\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>BayMax ©2021</Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { StateProvider } from '../state';\r\nimport { INITIAL_STATE as AUTH_INITIAL_STATE } from '../state/auth/reducers';\r\nimport { INITIAL_STATE as PRODUCT_INITIAL_STATE } from '../state/product/reducers';\r\nimport reducers from '../state/reducers';\r\nimport BaseStyles from './base-styles';\r\nimport PrivateRoute from './private-route';\r\nimport Content from '../components/content';\r\nimport Header from '../components/header';\r\nimport Login from '../views/login';\r\nimport Home from '../views/home';\r\n\r\nconst Root = props => {\r\n  const initialState = {\r\n    auth: AUTH_INITIAL_STATE,\r\n    product: PRODUCT_INITIAL_STATE,\r\n  };\r\n  return (\r\n    <StateProvider initialState={initialState} reducer={reducers}>\r\n      <BaseStyles />\r\n      <Router>\r\n        <>\r\n          <Header />\r\n          <Content>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Login} />\r\n              {/* <PrivateRoute path=\"/home\" component={Home} /> */}\r\n              <Route path=\"/home\" component={Home} />\r\n            </Switch>\r\n          </Content>\r\n        </>\r\n      </Router>\r\n    </StateProvider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Root from './routes';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nrender(<Root />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.e8f986ac.jpg\";"],"sourceRoot":""}