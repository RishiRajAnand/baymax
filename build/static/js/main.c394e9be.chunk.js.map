{"version":3,"sources":["assets/images/logo.jpg","assets/images/corousal11.jpg","assets/images/corousal22.jpg","assets/images/corousal33.jpg","assets/images/corousal44.jpg","state/index.js","state/auth/actions.js","state/auth/reducers.js","utils/roles.js","state/product/reducers.js","state/product/actions.js","state/reducers.js","routes/base-styles.js","components/content.js","utils/services.js","state/registration/queries.js","views/appSettings/brandSettings/index.js","views/appSettings/index.js","components/header.js","state/auth/hooks/useLogin.js","views/login/containers/container.js","components/form/formGroup.js","components/theme.js","components/form/error.js","views/login/containers/form.js","components/spinner.js","views/login/index.js","utils/departmentList.js","state/registration/hooks/useDoctorRegistration.js","views/admin/addDoctor/index.js","state/appointment/queries.js","state/appointment/hooks/useBookAppointment.js","state/patientSearch/queries.js","state/patientSearch/hooks/useGetAllDoctorByDepartment.js","state/patientSearch/hooks/useGetAllDoctors.js","state/patientSearch/hooks/usePatientSearchbyId.js","views/patientDetails/index.js","utils/timeSlot.js","utils/constants.js","views/appointment/components/appointmentCardPrint.js","views/appointment/index.js","state/pharmacy/queries.js","state/pharmacy/hooks/useGetAllPharmacyMedicines.js","state/addMedicine/queries.js","state/addMedicine/hooks/useSearchTest.js","views/billing/components/addItemModal.js","views/billing/components/billPrint.js","views/billing/components/finalCharges.js","state/billing/queries.js","state/billing/hooks/useGenerateBill.js","views/billing/services.js","views/billing/components/returnItemModal.js","utils/constantMessages.js","views/billing/index.js","views/billing/components/billSearch.js","views/canteen/index.js","views/canteen/canteenStock/index.js","state/appointment/hooks/useGetAppointmentsByDoctorId.js","state/appointment/hooks/useGetAppointmentByPatientId.js","views/doctorAppointment/index.js","state/addMedicine/hooks/useAddMedicine.js","state/addMedicine/hooks/useSearchMedicine.js","views/medicine/addMedicine/index.js","state/addMedicine/hooks/useAddTest.js","views/medicine/addTest/index.js","views/package/index.js","views/patientSearch/components/viewPatientRecords.js","views/patientSearch/components/patientSearchComponent.js","state/patientSearch/hooks/usePatientSearchByName.js","views/patientSearch/index.js","views/pharmacy/index.js","state/prescription/queries.js","state/prescription/hooks/useSavePrescription.js","views/prescription/index.js","views/registration/index.js","views/home/homescreen/index.js","state/pharmacy/hooks/useGetMedicinedetail.js","views/pharmacy/addNewMedicine/index.js","views/pharmacy/manageMedicine/index.js","state/pharmacy/hooks/UseGetAllPurchaseOrders.js","state/pharmacy/hooks/useDeletePurchaseOrder.js","views/pharmacy/purchaseOrderList/index.js","state/pharmacy/hooks/useGetAllSupplier.js","state/pharmacy/hooks/useGetPurchaseOrderDetails.js","views/pharmacy/newPurchaseOrder/index.js","views/pharmacy/indentPreparations/index.js","views/pharmacy/manageSupplier/index.js","views/pharmacy/indentPreparations/indentList/index.js","views/certificates/index.js","views/package/newPackage/index.js","views/inProgress/index.js","state/prescription/hooks/useGetPrescriptionByAppointmentId.js","views/prescription/printPrescription/index.js","views/prescription/viewPrescription/index.js","routes/allRoutesData.js","routes/routeResolver.js","views/billSearch/components/mainBillView.js","views/billSearch/index.js","views/admin/viewDoctors/index.js","views/reports/index.js","views/home/index.js","routes/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","LOGIN","LOGOUT","INITIAL_STATE","logged","username","roles","state","action","type","payload","list","auth","product","authReducer","productReducer","BaseStyles","createGlobalStyle","reset","Content","styled","div","api","url","token","registration","body","axios","post","then","res","data","catch","err","getBrandDetails","get","doctorsRegistration","BrandSettings","props","Form","useForm","form","useState","branddetails","setBrandDetails","useEffect","Array","isArray","length","setFieldsValue","companyname","companyName","companyaddress","companyAddress","gstin","regNo","contactNo","contact","layout","onFinish","values","console","log","saveBrandDetails","id","email","website","notification","message","description","duration","Item","name","label","placeholder","style","width","htmlType","AppSettings","selectedMenuItem","setSelectedMenuItem","gutter","span","onClick","e","key","selectedKeys","mode","Nav","fixed","Right","nav","Title","h1","Header","dispatch","isModalVisible","setIsModalVisible","menu","Link","to","handleLogout","DropdownMenu","overlay","border","padding","SettingFilled","fontSize","verticalAlign","a","title","visible","footer","onOk","onCancel","useProducts","isLoading","setIsLoading","actions","password","Container","colors","primary","secondary","default","gradient","bg","forms","labelColor","light","errorColor","danger","theme","Object","freeze","viewports","smartphone","tablet","desktop","labelCol","wrapperCol","tailLayout","LoginForm","fontFamily","marginBottom","textAlign","backgroundColor","color","initialValues","remember","onSubmit","onFinishFailed","errorInfo","rules","required","Password","BackDrop","Spinner","Loading","show","allowedRoles","Login","location","history","from","pathname","useLogin","setLogin","push","roleName","checkAllowedUsers","departments","useDoctorRegistration","status","setStatus","response","Option","Select","validateMessages","types","number","range","department","map","speciality","qualification","AddDoctor","queryParams","queryString","parse","search","doctorId","user","doctorName","experience","highestQualification","designation","consulationCharge","icon","OrderedListOutlined","formData","min","max","offset","bookAppointment","getAppointmentByDoctorId","getAppointmentByPatientId","patientId","useBookAppointment","getAllPatients","getPatientByName","patientName","getPatientById","getAllDoctors","useGetAllDoctorByDepartment","patients","setPatients","deptname","useGetAllDoctors","usePatientById","PatientDetails","prop","bordered","patientDetails","visitType","age","contactNum","text","timeSlot","date","startHours","startminutes","endHours","endMinutes","interval","startDate","Date","setHours","setMinutes","endDate","start","getTime","end","timeSlots","hospitalDetails","webite","AppointmentCardPrint","appointmentDetails","this","marginTop","display","flexDirection","justifyContent","alignItems","margin","src","logo","marginLeft","fontWeight","address","height","background","float","dateAndTime","React","Component","Search","Input","disabledDate","current","moment","endOf","Appointment","doctorsList","Map","selectedDepartment","setSelectedDepartment","selectedDate","setSelectedDate","componentRef","useRef","selectedDoctor","setSelectedDoctor","selectedTimeSlot","setSelectedTimeSlot","doctors","setRequest","usePatientSearchbyId","setPatientSearchById","doctorBydepartment","callDoctorByDepartment","setBookAppointment","handlePrint","useReactToPrint","content","doctor","set","MainButton","appointmentCard","size","concat","toDateString","extra","val","toLocaleTimeString","format","allowClear","enterButton","onSearch","className","fullscreen","onSelect","showSearch","defaultValue","onChange","optionFilterProp","filterOption","input","option","toLowerCase","indexOf","ref","savePharmacyMedicine","saveSupplier","getCategoriesList","savePurchaseOrder","deletePurchaseOrder","delete","getPharmacyMedicineList","getPharmacyMedicineDetail","medicineId","useGetPharmacyMedicines","medicines","setMedicineList","addMedicine","addTest","useTestSearch","AddItem","medicineMap","testMap","options","selected","setSelected","setMedicineSearch","tests","setTestSearch","quantity","amount","test","testName","forEach","medicine","medicineName","obj","itemId","itemType","medicinedetail","salePrice","testdetail","price","onItemAdded","dropdownClassName","autoFocus","dropdownMatchSelectWidth","inputValue","toUpperCase","BillPrint","itemList","isGSTIncluded","billId","paymentMode","finalCharges","todaysDate","billDate","itemArray","item","index","gst","discount","total","cellPadding","cellSpacing","colSpan","totalAmount","totalDiscount","totalGST","FinalCharges","formatter","parser","replace","onDiscountChange","saveGenerateBill","useSaveGenerateBill","responseObj","setResponseObj","getBillDetails","searchValue","searchBy","searchURL","EditableContext","components","row","component","cell","editable","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","focus","toggleEdit","save","validateFields","childNode","onPressEnter","onBlur","paddingRight","ReturnItem","errorMessagesRows","returnButton","printButton","backToMainButton","initialRowData","setInitialRowData","setData","errorMessage","setErrorMessage","billGeneratedStatus","setBillGeneratedStatus","selectedRowKeys","setSelectedRowKeys","rowsData","columns","handleChangeFormField","newData","findIndex","initialItemValue","temp","splice","col","onCell","listOfErrors","hasOwnProperty","selectedRows","filter","d","includes","billType","createdAt","paymentStatus","gender","billDetailList","billItem","itemName","billMapId","cost","concessionPercentage","gstPercentage","mrp","concessionType","purchaseType","onItemsReturned","updateMainBill","hasSelected","rowSelection","dataSource","pagination","filters","sorter","rowClassName","SERVER_ERROR","EditableRow","EditableCell","Billing","getFinalCharges","discountedAmount","toFixed","calculateTotalCharges","defaultbillDetails","printBillButton","generateBillButton","billDetails","totalCost","newPatientSwitch","newPatientFormValues","newPatientForm","getFieldsValue","setPatientDetails","generateBillStatus","setBillDetails","setState","context","setPaymentMode","setIsGSTIncluded","isReturnModalVisible","setIsReturnModalVisible","setBillDate","setFinalCharges","patientInfo","patientSearch","searchType","dataList","Number","parseInt","itemFormValue","Math","random","tempDataList","tempData","charges","compare","b","multiple","render","onConfirm","handleDelete","returnedRows","itemKeysToRemove","mainRow","mainIndex","returnedRow","momentDate","dateString","checked","target","discountValue","Group","RangePicker","DatePicker","BillSearchComp","filterValue","setfilterValue","inputSearch","actualDates","toDate","date2","convertToActualDate","compact","renderTitle","href","rel","renderItem","count","UserOutlined","Canteen","PlusOutlined","autoComplete","List","fields","add","remove","field","align","fieldKey","MinusCircleOutlined","block","shape","DownloadOutlined","defaultSortOrder","cat","onFilter","category","sortDirections","CanteenStock","forceUpdate","setName","items","setItems","onNameChange","event","addItem","dropdownRender","flexWrap","flex","cursor","shouldUpdate","disabled","isFieldsTouched","getFieldsError","errors","useGetAppointmentByDoctorId","useGetAppointmentByPatientId","DoctorAppointment","tags","tag","proceed","appointmentId","patientAppointments","setAppointmentByPatientId","setFilter","appointments","setAppointmentByDoctorId","appointment","time","appointmentDate","useAddMedicine","useMedicineSearch","AddMedicine","strength","medicineType","prefix","useAddTest","AddTest","useSearchTest","packageName","packageEndDate","Package","ViewPatientRecords","dataModal","userDetails","columnsModal","keys","PatientSearchComp","usePatientByName","PatientSearch","isPatientRecordModalVisible","setIsPatientRecordModalVisible","showPatient","setShowPatient","allPatients","setAllPatients","dateFilteredPatient","setDateFilteredPatient","setPatientSearchbyId","currentPatientDetails","setCurrentPatientDetails","currentPatientAppointments","setCurrentPatientAppointments","patientDetailsByName","setPatientSearchbyName","street","patient","searchFilter","Pharmacy","savePrescription","getPrescriptionByAppointmentId","useSavePrescription","Prescription","optionsTests","submitted","setSubmitted","medicineForm","vitalsForm","adviceForm","setSavePrescription","medicineList","users","testList","patientVitals","appointmentDto","weight","Bp","bp","temprature","temparature","advise","advice","prescribedMedsDtoList","prescribedTestingDtoList","medName","days","numberOfDays","dosage","comment","comments","dateOfBooking","handleSearch","handleTestSearch","has","formActions","PrinterOutlined","TextArea","PhonePrefixSelector","noStyle","Registration","phone","alternatecontact","country","visit","recieptId","errr","addonBefore","HomeScreen","autoplay","backgroundImage","corousal1","corousal2","corousal3","corousal4","useGetPharmacyMedicineDetail","AddNewMedicine","newItemUnit","setNewItemUnit","itemUnits","setItemUnits","medicineDetail","setRequest1","genericName","boxSize","expDate","expiryDate","medicineShelf","details","unit","triggerValue","parseFloat","image","supplierPrice","tax","supplierName","availability","stockQuantity","onItemUnitNameChange","addItemCategory","saveItemCategory","categoryId","categoryName","addItemUnit","saveItemUnit","unitName","clearForm","rows","listType","UploadOutlined","Text","Typography","ManageMedicines","medicineData","setMedicineData","itemCategories","setItemCategories","useGetAllPharmacyMedicines","getAllMedicines","deleteMedicineRecord","deleteMedicine","UseGetAllPurchaseOrder","useDeletePurchaseOrder","resolveTag","PurchaseOrder","orderDate","deliveryDate","supplier","purchaseOrderId","storeName","rol","productDetails","setDeletePurchaseOrder","purchaseOrders","setGetAllPurchaseOrder","order","invoiceNumber","store","useGetAllSuppliers","useGetPurchaseOrderDetails","NewPurchaseOrder","supplierOptions","purchaseDetailsForm","productListForm","suppliers","setSupplierSearch","orderDetail","setGetPurchaseOrderDetails","productList","productId","productName","purchaseCost","batchNumber","purchaseDetails","onSearchProduct","minWidth","IndentPreparation","ManageSupplier","selectedRowId","setSelectedRowId","supplierId","phoneNumber","editSupplier","IndentList","Certificates","setValue","NewPackage","InProgress","useGetPrescriptionByAppointmentId","PrintPrescription","medicineTable","testTable","class","dateOfResult","reportDesc","testDesc","cellpadding","cellspacing","temperature","diseaseDesc","medicinecolumns","testcolumns","ViewPrescription","testData","prescriptionDetails","setPrescriptionDetails","addNewMedicine","link","manageMedicines","purchaseOrderList","newPurchaseOrder","manageSuppliers","billing","billSearch","reports","doctorRoutes","pharmacyRoutes","inventoryRoutes","receptionRoutes","upcomingRoutes","adminRoutes","MainBillView","billItemList","BillSearch","searchCriteria","setSearchFilter","mainBillViewButton","onBillSearch","fromDate","ViewDoctors","doctorList","setDoctorList","Reports","linedata","setLineData","asyncFetch","fetch","json","error","lineConfig","xField","yField","xAxis","tickCount","slider","barconfig","year","seriesField","legend","position","config","appendPadding","angleField","colorField","radius","_ref","percent","interactions","ringconfig","autoFit","dateFilters","precision","Layout","Sider","Footer","SubMenu","Menu","Home","path","match","realRoutes","collapsed","setCollapsed","itemSelected","setItemSelected","routes","setRoutes","roleList","role","getRoutes","entries","childroutes","route","routeObject","subRoutesByRole","trigger","collapsible","defaultSelectedKeys","createElement","MenuUnfoldOutlined","MenuFoldOutlined","minHeight","overflow","Route","exact","PackageManagement","Root","AUTH_INITIAL_STATE","PRODUCT_INITIAL_STATE","reducers","Switch","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","document","getElementById","URL","process","origin","addEventListener","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c394e9be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e8f986ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal11.05e570b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal22.44b12027.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal33.c1868764.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal44.2328ea2a.jpg\";","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export const LOGIN = 'auth/LOGIN';\r\nexport const LOGOUT = 'auth/CLEAR_USER';\r\n\r\nexport const login = (payload) => ({\r\n  type: LOGIN,\r\n  payload\r\n});\r\n\r\nexport const logout = () => ({\r\n  type: LOGOUT,\r\n});\r\n","import { allRoles, INVENTORY } from '../../utils/roles';\r\nimport { LOGIN, LOGOUT } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  logged: false,\r\n  username: \"\",\r\n  roles: [INVENTORY]\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return {\r\n        logged: true,\r\n        username: action.payload,\r\n        roles: [action.payload],\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...INITIAL_STATE,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const DOCTOR = \"doctor\";\r\nexport const PHARMACY = \"pharmacy\";\r\nexport const ADMIN = \"admin\";\r\nexport const RECEPTION = \"reception\";\r\nexport const INVENTORY = \"inventory\";\r\nexport const UPCOMING = \"upcoming\";\r\n\r\nexport const allRoles = [RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING, INVENTORY];","import { LIST_PRODUCTS } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  list: null,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LIST_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const LIST_PRODUCTS = 'product/LIST_PRODUCTS';\r\n\r\nexport const listProducts = payload => ({\r\n  type: LIST_PRODUCTS,\r\n  payload,\r\n});\r\n","import authReducer from './auth/reducers';\r\nimport productReducer from './product/reducers';\r\n\r\nexport default ({ auth, product }, action) => ({\r\n  auth: authReducer(auth, action),\r\n  product: productReducer(product, action),\r\n});\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst BaseStyles = createGlobalStyle`\r\n    ${reset}\r\n    body { margin: 0 };\r\n    html { font-family: 'Montserrat', sans-serif; }\r\n    * { box-sizing: border-box; };\r\n`;\r\n\r\nexport default BaseStyles;\r\n","import styled from 'styled-components';\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Content;\r\n","const api = {\r\n  url: 'http://ec2-18-221-50-135.us-east-2.compute.amazonaws.com:8080',\r\n  // url: 'http://localhost:8080',\r\n  token: '',\r\n};\r\n\r\nexport default api;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const registration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/patient/registration`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const saveBrandDetails = (body) => {\r\n  return axios\r\n    .post(`${api.url}/SettingsController/updateBrandDetails`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getBrandDetails = (body) => {\r\n  return axios\r\n    .get(`${api.url}/SettingsController/getBrandDetails`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\nexport const doctorsRegistration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/doctorService/createNewDoctorsRecord`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getDoctorDetailById = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorDetailById?doctorId=` +  doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Menu } from 'antd';\r\nimport { Form, Input, Button, Radio, InputNumber, notification } from 'antd';\r\nimport { getBrandDetails, saveBrandDetails } from '../../../state/registration/queries';\r\nconst BrandSettings = (props) => {\r\n    const [form] = Form.useForm();\r\n    const [branddetails, setBrandDetails] = useState({});\r\n    useEffect(() => {\r\n        getBrandDetail();\r\n    }, []);\r\n\r\n    function getBrandDetail() {\r\n        getBrandDetails().then(data => {\r\n            if (data && Array.isArray(data) && data.length > 0) {\r\n                form.setFieldsValue({\r\n                    companyname: data[0].companyName,\r\n                    companyaddress: data[0].companyAddress,\r\n                    gstin: data[0].gstin,\r\n                    regNo: data[0].regNo,\r\n                    contactNo: data[0].contact,\r\n                });\r\n                setBrandDetails(data[0]);\r\n            }\r\n        }).catch(err => {\r\n\r\n        })\r\n    }\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values);\r\n        const body = {\r\n            id: branddetails.id,\r\n            companyName: values.companyname,\r\n            companyAddress: values.companyaddress,\r\n            email: values.email,\r\n            gstin: values.gstin,\r\n            regNo: values.regNo,\r\n            email: values.email,\r\n            website: values.website,\r\n            contact: values.contactNo,\r\n        };\r\n\r\n        saveBrandDetails(body).then(data=> {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Brand details changed successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err=> {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while saving Item`,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    return (\r\n        <>\r\n            <Form\r\n                layout='vertical'\r\n                onFinish={onFinish}\r\n                form={form}\r\n            >\r\n                <Form.Item name=\"companyname\" label=\"Company's name\">\r\n                    <Input placeholder=\"Company's name to be printed in bills / receipts and certificates\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"companyaddress\" label=\"Company's address\">\r\n                    <Input placeholder=\"Company's address\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"email\" label=\"Company's email\">\r\n                    <Input placeholder=\"Company's email\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"website\" label=\"Company's website\">\r\n                    <Input placeholder=\"Company's website\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"gstin\" label=\"Company's GSTIN\">\r\n                    <Input placeholder=\"Company's GSTIN\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"regNo\" label=\"Company's Reg. No\">\r\n                    <Input placeholder=\"Company's Reg. No\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"contactNo\" label=\"Contact Number\">\r\n                    <InputNumber style={{ width: '100%' }} placeholder=\"Contact Number\" />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button htmlType=\"submit\" type=\"primary\">Submit</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\nexport default BrandSettings;","import React, { useState, useEffect } from 'react';\r\nimport { Menu, Row, Col } from 'antd';\r\nimport BrandSettings from './brandSettings';\r\nconst AppSettings = (props) => {\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState(\"brand\");\r\n    let form = \"\";\r\n\r\n    const handleClick = e => {\r\n        setSelectedMenuItem(e.key);\r\n    };\r\n\r\n    if (selectedMenuItem == \"brand\") {\r\n        form = <BrandSettings />;\r\n    }\r\n    return (\r\n        <div>\r\n            <Row gutter={16}>\r\n                <Col span={4}>\r\n                    <Menu style={{ width: '100%' }} onClick={handleClick} selectedKeys={[selectedMenuItem]} mode=\"inline\">\r\n                        <Menu.Item key=\"brand\">Brand</Menu.Item>\r\n                        {/* <Menu.Item key=\"profile\">Profile</Menu.Item> */}\r\n                    </Menu>\r\n                </Col>\r\n                <Col span={18}>{form}</Col>\r\n            </Row>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default AppSettings;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { useStateValue } from '../state';\r\nimport { logout } from '../state/auth/actions';\r\nimport { PageHeader, Menu, Dropdown, Button, Tag, Typography, Row, Modal } from 'antd';\r\nimport { SettingFilled } from '@ant-design/icons';\r\nimport AppSettings from '../views/appSettings';\r\n// import Button from './button';\r\n\r\nconst Nav = styled.div`\r\n  height: 50px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  background: #001529;\r\n  position: ${props => (props.fixed ? 'fixed' : 'relative')};\r\n`;\r\n\r\nconst Right = styled.nav`\r\n  flex: 1;\r\n  text-align: right;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n  color: white;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Header = props => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item>\r\n        <a onClick={() => setIsModalVisible(true)}>\r\n          Settings\r\n        </a>\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <a>\r\n          About Us\r\n        </a>\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <a>\r\n          Help\r\n        </a>\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <Link to={`/`}>\r\n          <a onClick={() => handleLogout()}>\r\n            Log Out\r\n        </a>\r\n        </Link>\r\n\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n  const DropdownMenu = () => (\r\n    <Dropdown key=\"more\" overlay={menu}>\r\n      <Button\r\n        style={{\r\n          border: 'none',\r\n          padding: 0,\r\n          width: '5em'\r\n        }}\r\n      >\r\n        <SettingFilled\r\n          style={{\r\n            fontSize: 20,\r\n            verticalAlign: 'top',\r\n          }}\r\n        />\r\n      </Button>\r\n    </Dropdown>\r\n  );\r\n  const handleLogout = async () => {\r\n    await dispatch(logout());\r\n  };\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n  return (\r\n    <Nav>\r\n      <Title><Link to={`/home`}>BAYMAX</Link></Title>\r\n      <Right>\r\n        <DropdownMenu key=\"more\" />\r\n        {/* <Link to={`/`} dis><Button gradient onClick={() => handleLogout()}>\r\n          Logout\r\n          </Button>\r\n        </Link> */}\r\n      </Right>\r\n      <Modal  width={1000} title=\"My Settings\" visible={isModalVisible} footer={null} onOk={() => { setIsModalVisible(false) }} onCancel={() => { setIsModalVisible(false) }}>\r\n        <AppSettings />\r\n      </Modal>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\nimport { useStateValue } from '../../index';\r\nimport { login } from '../actions';\r\n\r\nconst useProducts = () => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const formData = async ({ values, actions }) => {\r\n    setIsLoading(true);\r\n\r\n    setIsLoading(false);\r\n    if (values.username !== '' && values.password !== '') {\r\n      dispatch(login(values.username));\r\n    }\r\n  };\r\n\r\n  return [auth, formData, isLoading];\r\n};\r\n\r\nexport default useProducts;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: calc(100vh - 50px);\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\n\r\nconst formGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default formGroup;\r\n","const colors = {\r\n  primary: '#7159c1',\r\n  secondary: '#9b49c1',\r\n  default: '#fff',\r\n  gradient:\r\n    'linear-gradient(112deg, rgba(113,89,193,1) 0%, rgba(155,73,193,1) 100%);',\r\n  bg: 'linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%);',\r\n};\r\n\r\nconst viewports = {\r\n  smartphone: '360px',\r\n  tablet: '720px',\r\n  desktop: '1280px',\r\n};\r\n\r\nconst forms = {\r\n  labelColor: colors.light,\r\n  errorColor: colors.danger,\r\n};\r\n\r\nconst theme = Object.freeze({\r\n  colors,\r\n  forms,\r\n  viewports,\r\n});\r\n\r\nexport default theme;\r\n","import styled from 'styled-components';\r\nimport theme from '../theme';\r\n\r\nconst ErrorText = styled.span`\r\n  text-align: center;\r\n  color: ${theme.forms.errorColor};\r\n`;\r\n\r\nexport default ErrorText;\r\n","/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react';\r\nimport { Formik } from 'formik';\r\n// import Button from '../../../components/button';\r\nimport FormGroup from '../../../components/form/formGroup';\r\n// import Input from '../../../components/form/input';\r\nimport ErrorText from '../../../components/form/error';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { span: 24 },\r\n};\r\n\r\nconst LoginForm = (props) => {\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n    props.onSubmit(values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} /> */}\r\n      <h1 style={{ width: \"100%\", fontFamily: 'Georgia, sans-serif', padding: \"20px\", marginBottom: '20px', textAlign: 'center', backgroundColor: '#001529', color: \"white\", fontSize: '32px' }}>Baymax Inventory</h1>\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          placeholder=\"Username\"\r\n          rules={[{ required: true, message: 'Please input your username!' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          rules={[{ required: true, message: 'Please input your password!' }]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" style={{ width: '100%' }} htmlType=\"submit\">\r\n            Submit\r\n        </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\n// const LoginForm = props => (\r\n\r\n//   return (<>\r\n//   <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n//   <Form\r\n//     {...layout}\r\n//     name=\"basic\"\r\n//     initialValues={{ remember: true }}\r\n//     onFinish={onFinish}\r\n//     onFinishFailed={onFinishFailed}\r\n//   >\r\n//     <Form.Item\r\n//       label=\"Username\"\r\n//       name=\"username\"\r\n//       rules={[{ required: true, message: 'Please input your username!' }]}\r\n//     >\r\n//       <Input />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item\r\n//       label=\"Password\"\r\n//       name=\"password\"\r\n//       rules={[{ required: true, message: 'Please input your password!' }]}\r\n//     >\r\n//       <Input.Password />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n//       <Checkbox>Remember me</Checkbox>\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout}>\r\n//       <Button type=\"primary\" htmlType=\"submit\">\r\n//         Submit\r\n//         </Button>\r\n//     </Form.Item>\r\n//   </Form>\r\n//   <Formik initialValues={{ username: '', password: '' }} {...props}>\r\n//     {({ handleChange, handleBlur, values, handleSubmit, errors }) => (\r\n//       <FormGroup>\r\n//         {errors.genericError && <ErrorText>{errors.genericError}</ErrorText>}\r\n//         <Input\r\n//           name=\"username\"\r\n//           id=\"username\"\r\n//           placeholder=\"Username\"\r\n//           onChange={handleChange('username')}\r\n//           onBlur={handleBlur('username')}\r\n//           error={errors.username}\r\n//           value={values.username}\r\n//         />\r\n//         <Input\r\n//           id=\"password\"\r\n//           name=\"password\"\r\n//           type=\"password\"\r\n//           placeholder=\"Password\"\r\n//           onChange={handleChange('password')}\r\n//           onBlur={handleBlur('password')}\r\n//           error={errors.password}\r\n//           value={values.password}\r\n//         />\r\n//         <Button primary large onClick={handleSubmit} style={{ background: 'skyblue', color: 'white' }} type=\"submit\">\r\n//           Login\r\n//         </Button>\r\n//       </FormGroup>\r\n//     )}\r\n//   </Formik>\r\n// </>);\r\n\r\n// );\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst BackDrop = styled.div`\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.67);\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid ${theme.colors.primary};\r\n  border-radius: 50%;\r\n  width: 120px;\r\n  height: 120px;\r\n  animation: spin 2s linear infinite;\r\n  margin: 40vh auto;\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loading = props => {\r\n  return (\r\n    props.show && (\r\n      <BackDrop>\r\n        <Spinner />\r\n      </BackDrop>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport useLogin from '../../state/auth/hooks/useLogin';\r\n\r\nimport Container from './containers/container';\r\nimport Form from './containers/form';\r\nimport Spinner from '../../components/spinner';\r\nimport { notification } from 'antd';\r\nimport { ADMIN, DOCTOR, INVENTORY, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\n\r\nconst allowedRoles = [DOCTOR, PHARMACY, RECEPTION, UPCOMING, ADMIN, INVENTORY]\r\nconst Login = ({ location, history }) => {\r\n  const { from } = location.state || { from: { pathname: '/home' } };\r\n  const [auth, setLogin, isLoading] = useLogin();\r\n\r\n  useEffect(() => {\r\n    if (auth.logged) {\r\n      history.push(from);\r\n    }\r\n  }, [auth, from, history]);\r\n\r\n  function checkAllowedUsers(values) {\r\n    for (const roleName of allowedRoles) {\r\n      if (roleName == values.username && roleName == values.password) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  return (\r\n    <Container>\r\n      <Spinner show={isLoading} />\r\n      <Form onSubmit={(values, actions) => {\r\n        console.log(\"values\", values);\r\n        console.log(\"actions\", actions);\r\n        if (checkAllowedUsers(values)) {\r\n          setLogin({ values, actions });\r\n        } else {\r\n          notification[\"error\"]({\r\n            message: 'Invalid username or password!',\r\n            description:\r\n              'Please check the username and password and try again.',\r\n            duration: 5,\r\n          });\r\n        }\r\n\r\n      }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export const departments = [\r\n    \"Accident and emergency (A&E)\",\r\n    \"Admissions\",\r\n    \"Anesthetics\",\r\n    \"Breast Screening\",\r\n    \"Burn Center\",\r\n    \"Cardiology\",\r\n    \"Central Sterile Services Department (CSSD)\",\r\n    \"Chaplaincy\",\r\n    \"Coronary Care Unit (CCU)\",\r\n    \"Critical Care\",\r\n    \"Diagnostic Imaging\",\r\n    \"Discharge Lounge\",\r\n    \"Elderly services\",\r\n    \"Finance Department\",\r\n    \"Gastroenterology\",\r\n    \"General Services\",\r\n    \"General Surgery\",\r\n    \"Gynecology\",\r\n    \"Haematology\",\r\n    \"Health & Safety\",\r\n    \"Intensive Care Unit (ICU)\",\r\n    \"Human Resources\",\r\n    \"Infection Control\",\r\n    \"Information Management\",\r\n    \"Maternity\",\r\n    \"Medical Records\",\r\n    \"Microbiology\",\r\n    \"Neonatal\",\r\n    \"Nephrology\",\r\n    \"Neurology\",\r\n    \"Nutrition and Dietetics\",\r\n    \"Obstetrics/Gynecology\",\r\n    \"Occupational Therapy\",\r\n    \"Oncology\",\r\n    \"Ophthalmology\",\r\n    \"Orthopaedics\",\r\n    \"Otolaryngology (Ear, Nose, and Throat)\",\r\n    \"Pain Management\",\r\n    \"Patient Accounts\",\r\n    \"Patient Services\",\r\n    \"Pharmacy\",\r\n    \"Physiotherapy\",\r\n    \"Purchasing & Supplies\",\r\n    \"Radiology\",\r\n    \"Radiotherapy\",\r\n    \"Renal\",\r\n    \"Rheumatology\",\r\n    \"Sexual Health\",\r\n    \"Social Work\",\r\n    \"Urology\"];\r\n\r\nexport const doctorsSpeciality = [\"Allergist\",\r\n    \"Anaesthesiologist\",\r\n    \"Andrologist\",\r\n    \"Cardiologist\",\r\n    \"Cardiac Electrophysiologist\",\r\n    \"Dermatologist\",\r\n    \"Emergency Room (ER) Doctors\",\r\n    \"Endocrinologist\",\r\n    \"Epidemiologist\",\r\n    \"Family Medicine Physician\",\r\n    \"Gastroenterologist\",\r\n    \"Geriatrician\",\r\n    \"Hyperbaric Physician\",\r\n    \"Hematologist\",\r\n    \"Hepatologist\",\r\n    \"Immunologist\",\r\n    \"Infectious Disease Specialist\",\r\n    \"Intensivist\",\r\n    \"Internal Medicine Specialist\",\r\n    \"Maxillofacial Surgeon / Oral Surgeon\",\r\n    \"Medical Examiner\",\r\n    \"Medical Geneticist\",\r\n    \"Neonatologist\",\r\n    \"Nephrologist\",\r\n    \"Neurologist\",\r\n    \"Neurosurgeon\",\r\n    \"Nuclear Medicine Specialist\",\r\n    \"Obstetrician/Gynecologist (OB/GYN)\",\r\n    \"Occupational Medicine Specialist\",\r\n    \"Oncologist\",\r\n    \"Ophthalmologist\",\r\n    \"Orthopedic Surgeon / Orthopedist\",\r\n    \"Otolaryngologist (also ENT Specialist)\",\r\n    \"Parasitologist\",\r\n    \"Pathologist\",\r\n    \"Perinatologist\",\r\n    \"Periodontist\",\r\n    \"Pediatrician\",\r\n    \"Physiatrist\",\r\n    \"Plastic Surgeon\",\r\n    \"Psychiatrist\",\r\n    \"Pulmonologist\",\r\n    \"Radiologist\",\r\n    \"Rheumatologist\",\r\n    \"Sleep Doctor / Sleep Disorders Specialist\",\r\n    \"Spinal Cord Injury Specialist\",\r\n    \"Sports Medicine Specialist\",\r\n    \"Surgeon\",\r\n    \"Thoracic Surgeon\",\r\n    \"Urologist\",\r\n    \"Vascular Surgeon\",\r\n    \"Veterinarian\",\r\n    \"Palliative Care Specialist\",\r\n    \"Acupuncturist\",\r\n    \"Audiologist\",\r\n    \"Ayurvedic Practioner\",\r\n    \"Chiropractor\",\r\n    \"Diagnostician\",\r\n    \"Homeopathic Doctor\",\r\n    \"Microbiologist\",\r\n    \"Naturopathic Doctor\",\r\n    \"Pharmacist\",\r\n    \"Physiotherapist\",\r\n    \"Podiatrist / Chiropodist\",\r\n    \"Registered Massage Therapist\"];\r\n\r\nexport const qualifications = [\"MS\", \"MD\", \"MBBS\"];\r\n","import { useState } from 'react';\r\nimport { doctorsRegistration } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useDoctorRegistration = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await doctorsRegistration(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useDoctorRegistration;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport { OrderedListOutlined } from '@ant-design/icons';\r\nimport '../addDoctor/addDoctor.css';\r\nimport { departments, doctorsSpeciality, qualifications } from '../../../utils/departmentList';\r\nimport useDoctorRegistration from '../../../state/registration/hooks/useDoctorRegistration';\r\nimport { doctorsRegistration, getDoctorDetailById } from '../../../state/registration/queries';\r\nimport queryString from 'query-string';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\nconst speciality = doctorsSpeciality.map(speciality => <Option key={speciality}>{speciality}</Option>);\r\nconst qualification = qualifications.map(qualification => <Option key={qualification}>{qualification}</Option>);\r\n\r\n\r\nfunction handleChange(value) {\r\n    console.log(`Selected: ${value}`);\r\n}\r\n\r\nconst AddDoctor = ({ location, history }) => {\r\n    const [form] = Form.useForm();\r\n    const [status, isLoading, setRequest] = useDoctorRegistration();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.doctorId != null) {\r\n            getDoctorDetailById(queryParams.doctorId).then(data => {\r\n                form.setFieldsValue({\r\n                    user: {\r\n                        name: data.doctorName,\r\n                        department: data.department,\r\n                        experience: data.experience,\r\n                        speciality: data.speciality,\r\n                        highestQualification: data.highestQualification,\r\n                        designation: data.designation,\r\n                        consulationCharge: data.consulationCharge,\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        };\r\n        if (queryParams.mode == \"edit\" && queryParams.doctorId != null) {\r\n            body[\"doctorId\"] = queryParams.doctorId;\r\n        }\r\n        doctorsRegistration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `The Doctor has been ${(queryParams.mode == \"edit\" ? \"Edited\" : \"registered\" )} successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'Error while saving doctor details',\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/viewDoctors' });\r\n            }} type=\"dashed\" icon={<OrderedListOutlined />}>View doctors</Button>\r\n            <Form {...layout} form={form} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Department\" name={['user', 'department']}>\r\n                    <Select>\r\n                        {department}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'experience']} label=\"Experience\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item label=\"Specialization\" name={['user', 'speciality']}>\r\n                    <Select>\r\n                        {speciality}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Highest Qualification\" name={['user', 'highestQualification']}>\r\n                    <Select>\r\n                        {qualification}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'designation']} label=\"Designation\">\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'consulationCharge']} label=\"Consultation Charges\" rules={[{ type: 'number', min: 0, max: 10000 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddDoctor;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const bookAppointment = (body) => {\r\n  return axios\r\n    .post(`${api.url}/HMServiceController/createNewAppointment`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByDoctorId = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentList?numberOfDays=30&startIndex=0&pazeSize=30&doctorId=` + doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByPatientId = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentListByPatientId?numberOfDays=30&startIndex=0&pazeSize=30&patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};","import { useState } from 'react';\r\nimport { bookAppointment } from '../queries';\r\n\r\nconst useBookAppointment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await bookAppointment(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useBookAppointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getAllPatients = () => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientByName = (patientName) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientByName?patientName=` + patientName)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientById = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientById?patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n\r\nexport const getAllDoctors = () => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAllDoctorsByDepartment = (name) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsListByDepartment?departmentName=` + name)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n","import { useState } from 'react';\r\nimport { getAllDoctorsByDepartment } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctorByDepartment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (deptname) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctorsByDepartment(deptname);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctorByDepartment;\r\n","import { useState } from 'react';\r\nimport { getAllDoctors } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctors = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctors();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctors;\r\n","import { useState } from 'react';\r\nimport { getPatientById } from '../queries';\r\n\r\nconst usePatientById = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState({});\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientById(patientId);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientById;\r\n","import React from 'react';\r\nimport { Divider, Descriptions, Badge } from 'antd';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\n\r\nconst PatientDetails = (prop) => {\r\n    // const [patient, isLoading, setRequest] = usePatientSearchbyId();\r\n\r\n    // useEffect(() => {\r\n    //     if(prop.patientId != null) {\r\n    //         setRequest(prop.patientId);\r\n    //     }\r\n    // }, [prop.patientId]);\r\n\r\n    return (\r\n        <>\r\n            <Divider>Patient Details</Divider>\r\n            <Descriptions bordered>\r\n                <Descriptions.Item label=\"Name\">{prop.patientDetails.patientName}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{prop.patientDetails.visitType}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{prop.patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Contact\">{prop.patientDetails.contactNum}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"success\" text=\"Active\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n        </>);\r\n};\r\n\r\nexport default PatientDetails;\r\n","const timeSlot = (date, startHours, startminutes, endHours,endMinutes, interval) => {\r\n    // date.setHours(startTime);\r\n    let startDate = new Date(date);\r\n    startDate.setHours(startHours);\r\n    startDate.setMinutes(startminutes);\r\n    // date.setHours(endTime);\r\n    let endDate = new Date(date);\r\n    endDate.setHours(endHours);\r\n    endDate.setMinutes(endMinutes);\r\n    console.log(startDate);\r\n    console.log(endDate);\r\n    let start = startDate.getTime();\r\n    let end = endDate.getTime();\r\n    var timeSlots = [];\r\n\r\n    while (start < end) {\r\n        timeSlots.push([new Date(start), new Date(start += interval * 60000)]);\r\n    }\r\n    return timeSlots;\r\n}\r\n\r\nexport default timeSlot;","const hospitalDetails = {\r\n    companyName: 'GreenMart',\r\n    companyAddress: 'Buxar Baazar',\r\n    contact: '+91-9798421824',\r\n    regNo: '642/2021',\r\n    gstin: '283239823222',\r\n    email: 'dajdad@dnasa.com',\r\n    webite: 'www.supermarket.com'\r\n};\r\n\r\nexport default hospitalDetails;","import React, { useRef } from 'react';\r\nimport { Descriptions, Divider } from 'antd';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class AppointmentCardPrint extends React.Component {\r\n    render() {\r\n        const appointmentDetails = this.props.appointmentDetails;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <div style={{ marginTop: '50px' }}>\r\n                        <h3 style={{ fontWeight: 'bold', fontSize: '30px' }}>Appointment Card</h3>\r\n                    </div>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ fontSize: '25px', float: 'left' }}>\r\n                            <p><b>Patient Name:</b> {appointmentDetails.patientName}</p>\r\n                            <p><b>Doctor Name:</b> {appointmentDetails.doctorName}</p>\r\n                            <p><b>Date:</b> {appointmentDetails.dateAndTime}</p>\r\n                            <p><b>Time Slot:</b> {appointmentDetails.timeSlot}</p>\r\n                            <p><b>Department: </b>{appointmentDetails.department}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { Button, Calendar, Card, Col, Divider, notification, Row, Select, Input, Form } from 'antd';\r\nimport moment from 'moment';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useBookAppointment from '../../state/appointment/hooks/useBookAppointment';\r\nimport useGetAllDoctorByDepartment from '../../state/patientSearch/hooks/useGetAllDoctorByDepartment';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport { departments } from '../../utils/departmentList';\r\nimport '../appointment/appointment.css';\r\nimport PatientDetails from '../patientDetails';\r\nimport timeSlot from '../../utils/timeSlot';\r\nimport { AppointmentCardPrint } from './components/appointmentCardPrint';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\n\r\nfunction disabledDate(current) {\r\n    // Can not select days before today and today\r\n    return current && current < moment().endOf('day');\r\n}\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\n\r\nconst Appointment = ({ location, history }) => {\r\n\r\n    let doctorsList = [];\r\n    let timeSlots = [];\r\n    let appointmentDetails = {\r\n        patientName: '',\r\n        doctorName: '',\r\n        dateAndTime: '',\r\n        timeSlot: '',\r\n        department: ''\r\n    };\r\n    // let selectedDoctor = \"\";\r\n    const map = new Map();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"all\");\r\n    const [form] = Form.useForm();\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const componentRef = useRef();\r\n    const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n    const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\r\n\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [patientDetails, isLoading2, setPatientSearchById] = usePatientSearchbyId();\r\n    const [doctorBydepartment, isLoadings, callDoctorByDepartment] = useGetAllDoctorByDepartment();\r\n    const [status, isLoading1, setBookAppointment] = useBookAppointment();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        if (selectedDepartment === \"all\") {\r\n            setRequest();\r\n            if (queryParams.patientId != null) {\r\n                setPatientSearchById(queryParams.patientId);\r\n            } else {\r\n                setPatientSearchById(patientDetails.patientId);\r\n            }\r\n\r\n\r\n        } else {\r\n            callDoctorByDepartment(selectedDepartment);\r\n        }\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Appointment successfully booked for patient with id ' + queryParams.patientId + 'and Doctor ' + selectedDoctor,\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [selectedDepartment, status]);\r\n\r\n    if (selectedDepartment !== \"all\") {\r\n        if (doctorBydepartment.length > 0) {\r\n            doctorsList = doctorBydepartment.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>;\r\n            });\r\n        }\r\n    } else {\r\n        if (doctors.length > 0) {\r\n            doctorsList = doctors.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>\r\n            });\r\n        }\r\n    }\r\n    function handleChange(value) {\r\n        setSelectedDepartment(value);\r\n    }\r\n    function onDateSelect(value) {\r\n        setSelectedDate(new Date(value));\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedDoctor(value);\r\n    }\r\n    function handleChangeOfTimeSlot(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedTimeSlot(value);\r\n    }\r\n\r\n    function bookAppointment(formData) {\r\n        const body = {\r\n            \"diseaseDesc\": \"test desc\",\r\n            \"advise\": \"test\",\r\n            \"patientId\": patientDetails.patientId,\r\n            \"patientName\": patientDetails.patientName,\r\n            \"doctorId\": selectedDoctor,\r\n            \"appointmentDate\": selectedDate.getTime(),\r\n            \"timeSlot\": selectedTimeSlot,\r\n            \"height\": 6,\r\n            \"weight\": 80,\r\n            \"Bp\": \"120/80\",\r\n            \"status\": \"booked\"\r\n        };\r\n        console.log(body);\r\n        if (patientDetails.patientId != null) {\r\n            setBookAppointment(body);\r\n        } else {\r\n            notification[\"error\"]({\r\n                message: 'Failed',\r\n                description: 'Please Enter a valid patient Id!',\r\n                duration: 3\r\n            });\r\n        }\r\n\r\n    }\r\n    let MainButton = \"\";\r\n    let appointmentCard = \"\";\r\n    if (!status) {\r\n        MainButton = <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Book Appointment</Button>;\r\n    } else {\r\n        console.log(\"dsadsad\" + selectedDoctor);\r\n        MainButton = <Button type=\"primary\" size=\"large\" onClick={() => {\r\n            console.log(patientDetails.patientId,);\r\n            history.push({ pathname: '/home/billing', search: '?patientId='.concat(patientDetails.patientId) + '&doctorName=' + map.get(selectedDoctor).doctorName + '&charges=' + map.get(selectedDoctor).consulationCharge + '&context=consulation' })\r\n        }}>Go To Billing</Button>;\r\n        appointmentDetails = {\r\n            patientName: patientDetails.patientName,\r\n            doctorName: map.get(selectedDoctor).doctorName,\r\n            dateAndTime: selectedDate.toDateString(),\r\n            timeSlot: selectedTimeSlot,\r\n            department: selectedDepartment\r\n        };\r\n        appointmentCard = (<Card title=\"Appointment Details\" extra={<a onClick={() => { handlePrint(); }}>Print</a>} style={{ width: 300 }}>\r\n            <p>Appointment booked for :</p>\r\n            <p>{patientDetails.patientName}</p>\r\n            <p>on {selectedDate.toDateString()}</p>\r\n            <p>between {selectedTimeSlot}</p>\r\n            <p>At {selectedDepartment}</p>\r\n            <p>With Dr. {map.get(selectedDoctor).doctorName}</p>\r\n        </Card>);\r\n    }\r\n\r\n    timeSlots = timeSlot(new Date(), 9, 0, 18, 0, 15).map(val => {\r\n        const timeSlot = moment(val[0].toLocaleTimeString(), \"HH:mm:ss\").format(\"hh:mm A\") + \"-\" + moment(val[1].toLocaleTimeString(), \"HH:mm:ss\").format(\"hh:mm A\");\r\n        return <Option key={timeSlot}>{timeSlot}</Option>;\r\n    });\r\n    const onPatientSearch = value => {\r\n        setPatientSearchById(value);\r\n    };\r\n    return (\r\n        <>\r\n            <Search\r\n                placeholder=\"Search Patient By Id\"\r\n                allowClear\r\n                enterButton=\"Search\"\r\n                size=\"large\"\r\n                style={{ width: '40%' }}\r\n                onSearch={onPatientSearch}\r\n            />\r\n            <br />\r\n            <PatientDetails patientDetails={patientDetails} />\r\n            <br></br>\r\n            <Divider>Appointment Booking</Divider>\r\n            <Form form={form} name=\"nest-messages\" onFinish={bookAppointment}>\r\n                <Row>\r\n                    <Col span={8}>\r\n                        <div className=\"site-calendar-demo-card\">\r\n                            <Calendar fullscreen={false} onSelect={onDateSelect} disabledDate={disabledDate} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Form.Item name={['user', 'departmentName']}>\r\n                            <Select\r\n                                showSearch\r\n                                defaultValue=\"all\"\r\n                                onChange={handleChange}\r\n                                placeholder=\"Select Department\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                <Option value=\"all\">All</Option>\r\n                                {department}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'doctorName']} rules={[{ required: true }]}>\r\n                            <Select\r\n                                onChange={handleChangeOfDoctor}\r\n                                showSearch\r\n                                placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {doctorsList}\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'timeSlot']}>\r\n                            <Select onChange={handleChangeOfTimeSlot} placeholder=\"Select Time Slot\" style={{ width: 300 }}>\r\n                                {timeSlots}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div style={{ display: 'none' }}>\r\n                            <AppointmentCardPrint ref={componentRef} appointmentDetails={appointmentDetails} />\r\n                        </div>\r\n                        {appointmentCard}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={12} offset={10}>\r\n                        {MainButton}\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>);\r\n};\r\n\r\nexport default Appointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePharmacyMedicine = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePharmacyMedicine`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveSupplier = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveSupplier`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveItemCategory = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveItemCategory`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveItemUnit = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveItemUnit`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getCategoriesList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getAllItemCategories`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\nexport const getItemUnitsList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getAllItemUnits`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const savePurchaseOrder = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deletePurchaseOrder = (body) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deletePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderDetails = (purchaseOrderId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderDetails?purchaseOrderId=` + purchaseOrderId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getSuppliersList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getSupplierList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineListByName = (medicineName) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineListByName?medicineName=` + medicineName)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineDetail = (medicineId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineDetails?medicineId=` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deleteMedicine = (medicineId) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deleteMedicineRecord/` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { getPharmacyMedicineList } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetPharmacyMedicines = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPharmacyMedicineList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicines;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const addMedicine = (body) => {\r\n  return axios\r\n    .post(`${api.url}/medicine/medicine`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getAllMedicines = () => {\r\n  return axios\r\n    .get(`${api.url}/medicine/medicineList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAllTests = () => {\r\n  return axios\r\n    .get(`${api.url}/test/testList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err\r\n    });\r\n};\r\n\r\nexport const addTest = (body) => {\r\n  return axios\r\n    .post(`${api.url}/test/test`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};","import { useState } from 'react';\r\nimport { getAllMedicines, getAllTests } from '../queries';\r\n\r\nconst useTestSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllTests();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useTestSearch;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col, AutoComplete } from 'antd';\r\nimport useGetPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useTestSearch from '../../../state/addMedicine/hooks/useSearchTest';\r\nconst { Option } = Select;\r\n\r\nconst AddItem = (props) => {\r\n    const [form] = Form.useForm();\r\n    const medicineMap = new Map();\r\n    const testMap = new Map();\r\n    let options = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    const [selected, setSelected] = useState(\"medicine\");\r\n    const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n    const [medicines, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    const [tests, isLoading1, setTestSearch] = useTestSearch();\r\n    // const [options, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setFormdefaultValue();\r\n    }, []);\r\n\r\n\r\n    function setFormdefaultValue() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                quantity: 1,\r\n                amount: 0,\r\n            }\r\n        });\r\n    }\r\n    if (selected == \"test\") {\r\n        options = [...tests.map(test => {\r\n            testMap.set(test.testName, test);\r\n            return { value: test.testName, label: test.testName };\r\n        })];\r\n    } else if (selected == \"medicine\") {\r\n        if (medicines.length > 0) {\r\n\r\n            medicines.forEach(medicine => {\r\n                medicineMap.set(medicine.medicineName, medicine);\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    } else if (selected == \"consultation\") {\r\n        if (medicines.length > 0) {\r\n            medicines.forEach(medicine => {\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    }\r\n\r\n    function onFinish(value) {\r\n        console.log(\"arakadra\", value.user.name);\r\n        const obj = {\r\n            itemId: null,\r\n            name: value.user.name,\r\n            quantity: value.user.quantity,\r\n            itemType: selected,\r\n            amount: value.user.amount\r\n        }\r\n        if (selected == \"medicine\") {\r\n            const medicinedetail = medicineMap.get(value.user.name);\r\n            obj[\"amount\"] = medicinedetail.salePrice;\r\n            obj[\"itemId\"] = medicinedetail.medicineId;\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(value.user.name);\r\n            obj[\"amount\"] = testdetail.price;\r\n            obj[\"itemId\"] = null;\r\n        }\r\n        // console.log(obj);\r\n        props.onItemAdded(obj);\r\n    }\r\n    function onItemTypeSelect(value) {\r\n        setSelected(value);\r\n        if (value == \"test\") {\r\n            setTestSearch();\r\n        }\r\n    }\r\n    function onSelect(data) {\r\n        if (selected == \"medicine\") {\r\n            const medicinedetail = medicineMap.get(data);\r\n            if (medicinedetail) {\r\n                form.setFieldsValue({\r\n                    user: {\r\n                        amount: medicinedetail.salePrice,\r\n                    }\r\n                });\r\n            }\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(data);\r\n            if (testdetail) {\r\n                form.setFieldsValue({\r\n                    user: {\r\n                        amount: testdetail.salePrice,\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} >\r\n            <Form.Item name={['user', 'name']} label=\"Item name\">\r\n                <AutoComplete\r\n                    dropdownClassName=\"certain-category-search-dropdown\"\r\n                    autoFocus={true}\r\n                    allowClear={true}\r\n                    dropdownMatchSelectWidth={200}\r\n                    style={{ width: '100%' }}\r\n                    options={options}\r\n                    onChange={onSelect}\r\n                    filterOption={(inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\r\n                >\r\n                    <Input.Search size=\"default\" placeholder=\"Item name\" />\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'quantity']} label=\"Quantity\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'amount']} label=\"Amount\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'itemType']} label=\"Item type\" >\r\n                <Select onSelect={onItemTypeSelect} defaultValue={selected} placeholder=\"Item type\">\r\n                    <Option value=\"medicine\">Inventory</Option>\r\n                    <Option value=\"consulation\">Others</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Add Item\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>);\r\n};\r\nexport default AddItem;","import React, { useRef } from 'react';\r\nimport '../components/billingPrint.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class BillPrint extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const isGSTIncluded = this.props.isGSTIncluded;\r\n        const branddetails = this.props.branddetails;\r\n        const billId = this.props.billId;\r\n        const paymentMode = this.props.paymentMode;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const finalCharges = this.props.finalCharges;\r\n        const todaysDate = new Date(this.props.billDate).toDateString();\r\n\r\n        const itemArray = itemList.map((item, index) => {\r\n            return (\r\n                <tr>\r\n                    <td>{index + 1} .</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.quantity}</td>\r\n                    <td>{item.amount}</td>\r\n                    <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>{item.gst}</td>\r\n                    <td>{item.discount}</td>\r\n                    <td>{item.total}</td>\r\n                </tr>)\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ padding: '20px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        <p style={{ float: 'right', marginLeft: '20px', display: (branddetails.contact ? \"block\" : \"none\") }}>\r\n                            Reg No.- {branddetails.regNo}\r\n                        </p>\r\n\r\n                    </div>\r\n                    <div>\r\n                        {/* <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} /> */}\r\n                        <div>\r\n                            <h2 style={{ fontSize: '2em', fontWeight: 'bold' }}>{branddetails.companyName}</h2>\r\n                        </div>\r\n                        <div style={{ fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{branddetails.companyAddress}</p>\r\n                            <p style={{ display: (branddetails.contact ? \"block\" : \"none\") }}>Contact: {branddetails.contact}</p>\r\n                            <p style={{ display: (branddetails.website ? \"block\" : \"none\") }}>Website: {branddetails.website}</p>\r\n                            <p style={{ display: (branddetails.email ? \"block\" : \"none\") }}>Email: {branddetails.email}</p>\r\n                            <p style={{ display: (branddetails.gstin ? \"block\" : \"none\") }} >GSTIN: {branddetails.gstin}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellPadding=\"5\" cellSpacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>BillId</td>\r\n                                <td>{billId}</td>\r\n                            </tr>\r\n                            {/* <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                                <td>BillId</td>\r\n                                <td>{billId}</td>\r\n                            </tr> */}\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Payment mode</td>\r\n                                <td>{paymentMode}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>S.No</th>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount (&#x20B9;)</th>\r\n                                <th style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }} >GST(CGST + SGST) (&#x20B9;)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total (&#x20B9;)</th>\r\n                            </tr>\r\n                            {itemArray}\r\n                            <tr>\r\n                                <td colSpan={(isGSTIncluded ? \"5\" : \"4\")} ></td>\r\n                                <td>Total (&#x20B9;)</td>\r\n                                <td>{finalCharges.totalAmount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan={(isGSTIncluded ? \"5\" : \"4\")}></td>\r\n                                <td>Discount(%)</td>\r\n                                <td>{finalCharges.totalDiscount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }} colSpan=\"5\"></td>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>Tax (&#x20B9;)</td>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>{finalCharges.totalGST}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst FinalCharges = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({ discount: props.finalCharges.totalDiscount });\r\n  }, [props.finalCharges.totalDiscount]);\r\n\r\n  function onDiscountChange(value) {\r\n    props.onDiscountChange(value);\r\n  }\r\n  return (\r\n    <Form name=\"final_charges\" form={form}>\r\n      <Row gutter={24}>\r\n        <Col span={8} key={1}>\r\n          <Form.Item label=\"Total Amount (&#x20B9;)\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalAmount}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={2}>\r\n          <Form.Item label=\"Total discount(%)\" name=\"discount\">\r\n            <InputNumber\r\n              min={0}\r\n              \r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace('%', '')}\r\n              onChange={onDiscountChange}\r\n            />\r\n            {/* <span className=\"ant-form-text\">{props.finalCharges.totalDiscount}</span> */}\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={3}>\r\n          <Form.Item label=\"Total GST (&#x20B9;)\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalGST}</span>\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>);\r\n};\r\nexport default FinalCharges;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nconst rootURI = `${api.url}/HMServiceController/fetchBillDtails`;\r\nexport const searchBillDetails = (id, filterType) => {\r\n    let url = '';\r\n    if (filterType === 'patientId') {\r\n        url = `${rootURI}?patientId=` + id + '&billId=';\r\n    } else if (filterType === 'billId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    } else if (filterType === 'receiptId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    }\r\n    return axios\r\n        .get(url)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err.response;\r\n        });\r\n};\r\n\r\nexport const saveGenerateBill = (body) => {\r\n    return axios\r\n        .post(`${api.url}/HMServiceController/generateBill`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getBillListByDateRange = (toDate, fromDate, billType) => {\r\n    return axios\r\n        .get(`${api.url}/HMServiceController/fetchBillListByDateRange?toDate=` + toDate + '&fromDate=' + fromDate + '&billType=' + billType)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n","import { useState } from 'react';\r\nimport { saveGenerateBill } from '../queries';\r\n\r\nconst useSaveGenerateBill = () => {\r\n  const [responseObj, setResponseObj] = useState({});\r\n\r\n  const request = async (body) => {\r\n    const response = await saveGenerateBill(body);\r\n    if (response) {\r\n      if (response.response == \"success\") {\r\n        setResponseObj(response);\r\n      }\r\n    } else {\r\n      setResponseObj(null);\r\n    }\r\n  };\r\n\r\n  return [responseObj, request];\r\n};\r\n\r\nexport default useSaveGenerateBill;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getBillDetails = (searchValue, searchBy) => {\r\n\r\n    let searchURL = \"\";\r\n\r\n    if (searchBy == \"patientId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?billId=&name=&patientId=` + searchValue;\r\n    } else if (searchBy == \"billId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?patientId=&name=&billId=` + searchValue;\r\n    } else if (searchBy == \"name\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?patientId=&billId=&name=` + searchValue;\r\n    }\r\n    return axios\r\n        .get(searchURL)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { Form, Input, Select, Row, Col, Table, notification, Button } from 'antd';\r\nimport { saveGenerateBill } from '../../../state/billing/queries';\r\nconst EditableContext = React.createContext();\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    ...restProps\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef = useRef();\r\n    const form = useContext(EditableContext);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0,\r\n                }}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: `${title} is required.`,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n            </Form.Item>\r\n        ) : (\r\n                <div\r\n                    className=\"editable-cell-value-wrap\"\r\n                    style={{\r\n                        paddingRight: 24,\r\n                    }}\r\n                    onClick={toggleEdit}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n    }\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst components = {\r\n    body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n    },\r\n};\r\nconst ReturnItem = (props) => {\r\n    let errorMessagesRows = \"\";\r\n    let returnButton = \"\";\r\n    let printButton = \"\";\r\n    let backToMainButton = \"\";\r\n    const [initialRowData, setInitialRowData] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState({});\r\n    const [billGeneratedStatus, setBillGeneratedStatus] = useState(false);\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n    useEffect(() => {\r\n        setData(props.rowsData);\r\n        setInitialRowData(props.rowsData);\r\n    }, []);\r\n\r\n    let columns = [\r\n        {\r\n            title: 'Item Name',\r\n            dataIndex: 'name',\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            editable: \"true\",\r\n            width: '10%',\r\n        }\r\n    ];\r\n    columns = columns.map((col) => {\r\n        if (col.editable == \"false\") {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                handleSave: handleChangeFormField,\r\n            }),\r\n        };\r\n    });\r\n    if (billGeneratedStatus) {\r\n        printButton = <Button style={{ width: '90%' }} type=\"primary\">Print</Button>;\r\n        backToMainButton = <Button onClick={() => { props.isModalVisible(false); }} style={{ width: '90%' }} type=\"primary\">Go to Main Bill</Button>;\r\n    }\r\n\r\n    function updateMainBill() {\r\n        const selectedRows = data.filter(d => selectedRowKeys.includes(d.key));\r\n        props.onItemsReturned(selectedRows);\r\n    }\r\n    function handleChangeFormField(row) {\r\n        console.log(row);\r\n        console.log(initialRowData);\r\n\r\n        const newData = [...data];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        const initialItemValue = initialRowData[index];\r\n        if (row.quantity > initialItemValue.quantity) {\r\n            const message = `Item ${row.name} cannot have quantity more than ${initialItemValue.quantity}`;\r\n            setErrorMessage({ ...errorMessage, ... { [row.key]: message } });\r\n        } else {\r\n            const temp = { ...errorMessage };\r\n            delete temp[row.key];\r\n            setErrorMessage(temp);\r\n        }\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        // const finalCharges = getFinalCharges([row]);\r\n        // row.total = finalCharges.discountedAmount + finalCharges.totalGST;\r\n\r\n        // calculateTotalCharges(newData);\r\n    };\r\n    console.log(\"error meessages\", errorMessage);\r\n    if (errorMessage) {\r\n        const listOfErrors = [];\r\n        for (var key in errorMessage) {\r\n            if (errorMessage.hasOwnProperty(key)) {\r\n                listOfErrors.push(<p style={{ color: 'red' }} key={key}>{errorMessage[key]}</p>);\r\n            }\r\n        }\r\n        if (listOfErrors.length == 0) {\r\n            returnButton = <Button style={{ width: '90%' }} onClick={returnItems} type=\"primary\">Return</Button>;\r\n        } else {\r\n            returnButton = \"\";\r\n        }\r\n        errorMessagesRows = <div>{listOfErrors}</div>;\r\n    }\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n\r\n    function onSelectChange(selectedRowKeys) {\r\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n        setSelectedRowKeys(selectedRowKeys);\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: onSelectChange,\r\n    };\r\n\r\n    function returnItems() {\r\n        console.log(data);\r\n        console.log(selectedRowKeys);\r\n        const selectedRows = data.filter(d => selectedRowKeys.includes(d.key));\r\n        const body = {\r\n            billId: null,\r\n            billType: \"PHARMACY\",\r\n            createdAt: new Date(),\r\n            paymentStatus: \"paid\",\r\n            paymentMode: \"Cash\",\r\n            patientId: props.patientDetails.patientId,\r\n            name: props.patientDetails.patientName,\r\n            age: props.patientDetails.age,\r\n            gender: props.patientDetails.gender,\r\n            // totalCost: finalCharges.totalAmount,\r\n            // totalDiscount: finalCharges.totalDiscount,x\r\n            // totalGST: finalCharges.totalGST,\r\n            billDetailList: []\r\n        };\r\n        selectedRows.forEach(item => {\r\n            const billItem = {\r\n                id: null,\r\n                itemName: item.name,\r\n                itemId: item.itemId,\r\n                billMapId: null,\r\n                cost: item.total,\r\n                concessionPercentage: item.discount,\r\n                gstPercentage: item.gst,\r\n                mrp: item.amount,\r\n                concessionType: \"discount\",\r\n                quantity: item.quantity,\r\n                purchaseType: (item.type == \"medicine\" ? \"pharmacy-return\" : item.type)\r\n            };\r\n            body.billDetailList.push(billItem);\r\n        });\r\n        saveGenerateBill(body).then(response => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Return Bill Generated Successfully with id ' + response.billId,\r\n                duration: 3\r\n            });\r\n            setBillGeneratedStatus(true);\r\n            updateMainBill();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'Error while returning bill',\r\n                duration: 3\r\n            });\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span style={{ marginLeft: 8 }}>\r\n                {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\r\n            </span>\r\n            {errorMessagesRows}\r\n            <Table rowSelection={rowSelection} columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n            <br /><br /><br />\r\n            <Row gutter={24}>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {returnButton}\r\n\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {printButton}\r\n\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {backToMainButton}\r\n\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\nexport default ReturnItem;","export const SERVER_ERROR =`Server error, Please contact Administrator Rishi at (+91-8142638458)`;\r\n","import { Button, Col, Descriptions, Divider, Checkbox, Form, InputNumber, Switch, DatePicker, Input, notification, Radio, Row, Table, Popconfirm, Modal } from 'antd';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport React, { useRef, useState, useEffect, useContext, useLayoutEffect } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PatientDetails from '../patientDetails';\r\nimport AddItem from './components/addItemModal';\r\nimport { BillPrint } from './components/billPrint';\r\nimport FinalCharges from './components/finalCharges';\r\nimport useSaveGenerateBill from '../../state/billing/hooks/useGenerateBill';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport { getBillDetails } from './services';\r\nimport ReturnItem from './components/returnItemModal';\r\nimport { saveGenerateBill } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\nimport { getBrandDetails } from '../../state/registration/queries';\r\nimport hospitalDetails from '../../utils/constants';\r\n\r\nconst EditableContext = React.createContext();\r\nconst { Search } = Input;\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef();\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst Billing = ({ location, history }) => {\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n  const queryParams = queryString.parse(location.search);\r\n  const components = {\r\n    body: {\r\n      row: EditableRow,\r\n      cell: EditableCell,\r\n    },\r\n  };\r\n  function handleSave(row) {\r\n    const newData = [...data];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    const finalCharges = getFinalCharges([row]);\r\n    row.total = (finalCharges.discountedAmount + finalCharges.totalGST).toFixed(2);\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    setData(newData);\r\n    calculateTotalCharges(newData);\r\n  };\r\n\r\n  const defaultbillDetails = {\r\n    billId: '',\r\n    createdAt: (new Date()).toDateString() + ' ' + (new Date()).toLocaleTimeString()\r\n  };\r\n\r\n  const defaultFinalCharges = {\r\n    totalAmount: 0,\r\n    totalDiscount: 0,\r\n    totalGST: 0\r\n  };\r\n  const printBillButton = <Col className=\"gutter-row\" span={6}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={handlePrint}>Print</Button>\r\n  </Col>;\r\n  let generateBillButton = <Col className=\"gutter-row\" span={6}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={generateBill}>Generate {queryParams.context == \"edit\" ? \"new \" : \"\"}bill</Button>\r\n  </Col>;\r\n  let printButton = \"\";\r\n  const [newPatientForm] = Form.useForm();\r\n  const [state, setState] = useState(\"initial\");\r\n  const [paymentMode, setPaymentMode] = useState(\"Cash\");\r\n  const [isGSTIncluded, setIsGSTIncluded] = useState(true);\r\n  // const [billResponse, isLoading, setBillSearch] = useBillSearch();\r\n  const [patientDetails, setPatientDetails] = useState({});\r\n  const [newPatientSwitch, setNewPatientSwitch] = useState(true);\r\n  const [generateBillStatus, setGenerateBillStatus] = useSaveGenerateBill();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isReturnModalVisible, setIsReturnModalVisible] = useState(false);\r\n  const [billDetails, setBillDetails] = useState(defaultbillDetails);\r\n  const [billDate, setBillDate] = useState(moment(new Date()));\r\n\r\n  const [finalCharges, setFinalCharges] = useState(defaultFinalCharges);\r\n  const [data, setData] = useState([]);;\r\n  const [branddetails, setBrandDetails] = useState(hospitalDetails);\r\n  let patientInfo = <div>\r\n    <Search placeholder=\"Search by Patient Id\" allowClear onSearch={patientSearch} style={{ width: '30%' }} />\r\n    <PatientDetails searchType=\"patientId\" patientDetails={patientDetails} />\r\n  </div>;\r\n  // let billSearchComp = <BillSearch onSearch={onBillSearch} />;\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const showReturnItemModal = () => {\r\n    setIsReturnModalVisible(true);\r\n  };\r\n\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const submitReturn = () => {\r\n    setIsReturnModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n  const cancelReturnModal = () => {\r\n    setIsReturnModalVisible(false);\r\n  };\r\n  useEffect(() => {\r\n    // calculateTotalCharges(mockData);\r\n    // setData(mockData);\r\n    if (queryParams.context == 'registration') {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Registration',\r\n          quantity: 1,\r\n          type: 'registration',\r\n          amount: 500,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: 500,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'consulation') {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Consultation ' + '(' + (queryParams.doctorName) + ')',\r\n          quantity: 1,\r\n          type: 'consultation',\r\n          amount: queryParams.charges,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: Number(queryParams.charges) + 0,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'edit') {\r\n      onBillSearch(queryParams.billId, \"billId\");\r\n    }\r\n    updateBrandDetails();\r\n  }, []);\r\n\r\n  function updateBrandDetails() {\r\n    getBrandDetails().then(data => {\r\n      if (data && Array.isArray(data) && data.length > 0) {\r\n          setBrandDetails(data[0]);\r\n      }\r\n  });\r\n  }\r\n  if (state == \"billGenerated\") {\r\n    generateBillButton = \"\";\r\n    printButton = printBillButton;\r\n  }\r\n\r\n  if (queryParams.context == \"edit\") {\r\n    printButton = printBillButton;\r\n  }\r\n  if (newPatientSwitch) {\r\n    patientInfo = <div>\r\n      <Divider>Customer Details</Divider>\r\n      <Form layout=\"inline\" form={newPatientForm}>\r\n        <Form.Item name=\"patientName\" label=\"Name\">\r\n          <Input placeholder=\"name\" />\r\n        </Form.Item>\r\n        {/* <Form.Item name=\"age\" label=\"Age\">\r\n          <InputNumber placeholder=\"age\" />\r\n        </Form.Item> */}\r\n        <Form.Item name=\"contact\" label=\"Contact\">\r\n          <Input placeholder=\"phone number\" />\r\n        </Form.Item>\r\n        {/* <Form.Item name=\"referal doctor\" label=\"Referal doctor\">\r\n          <Input placeholder=\"doctor name\" />\r\n        </Form.Item> */}\r\n      </Form>\r\n    </div>;\r\n  }\r\n  function getFinalCharges(dataList) {\r\n    const finalCharges = {\r\n      totalAmount: 0,\r\n      totalGST: 0,\r\n      totalDiscount: 0,\r\n      discountedAmount: 0\r\n    }\r\n\r\n    dataList.forEach(data => {\r\n      const amount = Number.parseInt(data.amount) * Number.parseInt(data.quantity);\r\n      const discountedAmount = Number.parseInt(amount) - ((Number.parseInt(data.discount) / 100) * Number.parseInt(amount));\r\n      finalCharges.totalAmount += Number.parseInt(amount);\r\n      finalCharges.totalDiscount += Number.parseInt(data.discount);\r\n      finalCharges.discountedAmount += discountedAmount;\r\n      finalCharges.totalGST += Number.parseInt(data.gst);\r\n    });\r\n    return finalCharges;\r\n  }\r\n  function onChange(pagination, filters, sorter, extra) {\r\n    console.log('params', pagination, filters, sorter, extra);\r\n  }\r\n\r\n  function onBillSearch(searchValue, searchFilter) {\r\n    getBillDetails(searchValue, searchFilter).then(data => {\r\n      if (data && data[0]) {\r\n        const billDetails = data[0];\r\n        setBillDetails({\r\n          billId: billDetails.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        setBillDate(moment(new Date(billDetails.createdAt)));\r\n        setPaymentMode(billDetails.paymentMode);\r\n        if (billDetails[\"patientId\"]) {\r\n          patientSearch(billDetails.patientId);\r\n        } else {\r\n          setPatientDetails({ patientId: null, patientName: billDetails.name, age: billDetails.age, gender: billDetails.gender, visitType: \"General\" });\r\n        }\r\n        if (billDetails[\"billDetailList\"]) {\r\n\r\n          const tempData = billDetails[\"billDetailList\"].map((item, index) => {\r\n            return {\r\n              key: item.itemName + index,\r\n              id: item.id,\r\n              itemId: item.itemId,\r\n              name: item.itemName,\r\n              type: item.purchaseType,\r\n              billMapId: item.billMapId,\r\n              quantity: item.quantity,\r\n              amount: item.mrp,\r\n              gst: 0,\r\n              discount: item.concessionPercentage,\r\n              total: (Number(item.mrp) - ((Number(item.concessionPercentage) / 100) * Number(item.mrp))) * item.quantity,\r\n            }\r\n          });\r\n\r\n          setData(tempData);\r\n          calculateTotalCharges(tempData);\r\n        }\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  function patientSearch(patientId) {\r\n    getPatientById(patientId).then(patientDetails => {\r\n      setPatientDetails(patientDetails);\r\n    }).catch(() => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: 'Error while searching patient with Id' + patientId,\r\n        duration: 3\r\n      });\r\n    });\r\n  }\r\n  function onItemAdded(itemFormValue) {\r\n    console.log(itemFormValue);\r\n    const newData = {\r\n      key: Math.random(),\r\n      name: itemFormValue.name,\r\n      itemId: itemFormValue.itemId,\r\n      quantity: itemFormValue.quantity,\r\n      amount: itemFormValue.amount,\r\n      type: itemFormValue.itemType,\r\n      gst: 0,\r\n      discount: 0,\r\n      total: itemFormValue.quantity * itemFormValue.amount,\r\n    }\r\n    const tempDataList = [...data, newData];\r\n\r\n    setData(tempDataList);\r\n    calculateTotalCharges(tempDataList);\r\n    setIsModalVisible(false);\r\n  }\r\n  function handleDelete(key) {\r\n    const dataSource = data.filter((item) => item.key !== key);\r\n    calculateTotalCharges(dataSource);\r\n    setData(dataSource);\r\n  };\r\n\r\n  function calculateTotalCharges(tempDataList) {\r\n    const finalCharges = getFinalCharges(tempDataList);\r\n    console.log(finalCharges);\r\n    setFinalCharges({\r\n      totalAmount: (finalCharges.discountedAmount + finalCharges.totalGST).toFixed(2),\r\n      totalDiscount: ((finalCharges.totalAmount - finalCharges.discountedAmount) / finalCharges.totalAmount * 100).toFixed(2),\r\n      totalGST: (finalCharges.totalGST).toFixed(2)\r\n    });\r\n  }\r\n\r\n  function onDiscountChange(discountValue) {\r\n    console.log(\"Discount changed\", discountValue);\r\n    let tempData = [];\r\n    tempData = data.map(item => {\r\n      return {\r\n        ...item,\r\n        discount: discountValue\r\n      }\r\n    });\r\n    calculateTotalCharges(tempData);\r\n    setData(tempData);\r\n  }\r\n\r\n  function paymentMethod(e) {\r\n    setPaymentMode(e.target.value);\r\n  }\r\n\r\n  function generateBill() {\r\n    const body = {\r\n      billId: (billDetails.billId),\r\n      billType: \"PHARMACY\",\r\n      createdAt: (new Date(billDetails.createdAt)),\r\n      paymentStatus: (paymentMode == \"Due\" ? \"dues\" : \"paid\"),\r\n      paymentMode: paymentMode,\r\n      patientId: patientDetails.patientId,\r\n      name: patientDetails.name,\r\n      age: patientDetails.age,\r\n      gender: patientDetails.gender,\r\n      totalCost: finalCharges.totalAmount,\r\n      totalDiscount: finalCharges.totalDiscount,\r\n      totalGST: finalCharges.totalGST,\r\n      billDetailList: []\r\n    };\r\n    data.forEach(item => {\r\n      const billItem = {\r\n        id: null,\r\n        itemName: item.name,\r\n        itemId: item.itemId,\r\n        billMapId: null,\r\n        cost: item.total,\r\n        concessionPercentage: item.discount,\r\n        gstPercentage: item.gst,\r\n        mrp: item.amount,\r\n        concessionType: \"discount\",\r\n        quantity: item.quantity,\r\n        purchaseType: (item.type == \"medicine\" ? \"pharmacy-purchase\" : item.type)\r\n      };\r\n      body.billDetailList.push(billItem);\r\n    });\r\n    console.log(\"body\", body);\r\n    if (newPatientSwitch) {\r\n      const newPatientFormValues = newPatientForm.getFieldsValue();\r\n      body.name = newPatientFormValues.patientName;\r\n      body.age = newPatientFormValues.age;\r\n      body.patientId = null;\r\n      setPatientDetails({\r\n        patientName: newPatientFormValues.patientName,\r\n        patientId: \"N/A\",\r\n        age: newPatientFormValues.age,\r\n      });\r\n    }\r\n    saveGenerateBill(body).then(generateBillStatus => {\r\n      if (generateBillStatus.response == \"success\") {\r\n        notification[\"success\"]({\r\n          message: 'SUCCESS',\r\n          description: 'Bill Generated Successfully with id ' + generateBillStatus.billId,\r\n          duration: 3\r\n        });\r\n        setBillDetails({\r\n          billId: generateBillStatus.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        setState(\"billGenerated\");\r\n\r\n      }\r\n    }).catch(err => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: SERVER_ERROR,\r\n        duration: 3\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n  function onNewPatientSwitchChange(checked) {\r\n    setNewPatientSwitch(checked);\r\n  }\r\n\r\n  function onItemsReturned(returnedRows) {\r\n    let tempData = [...data];\r\n    let itemKeysToRemove = [];\r\n    data.forEach((mainRow, mainIndex) => {\r\n      returnedRows.forEach(returnedRow => {\r\n        if (returnedRow.key == mainRow.key) {\r\n          if (mainRow.quantity == returnedRow.quantity) {\r\n            console.log(\"remove\", tempData[mainIndex]);\r\n            itemKeysToRemove.push(mainRow.key);\r\n\r\n          } else {\r\n            mainRow.quantity = mainRow.quantity - returnedRow.quantity;\r\n            console.log(\"edit\", tempData[mainIndex]);\r\n            console.log(\"with\", mainRow);\r\n            tempData.splice(mainIndex, 1, { ...tempData, ...mainRow });\r\n          }\r\n        }\r\n      });\r\n    });\r\n    tempData = tempData.filter(item => !itemKeysToRemove.includes(item.key));\r\n\r\n    setData(tempData);\r\n    calculateTotalCharges(tempData);\r\n  }\r\n  function onBillDateChange(momentDate, dateString) {\r\n    let date = new Date(dateString);\r\n    setBillDetails({\r\n      createdAt: (date).toDateString()\r\n    });\r\n    setBillDate(moment(date));\r\n  }\r\n\r\n  function onGSTIncludedChange(e) {\r\n    setIsGSTIncluded(e.target.checked);\r\n  }\r\n\r\n\r\n  let columns = [\r\n    {\r\n      title: 'Item Name',\r\n      dataIndex: 'name',\r\n      editable: \"true\"\r\n    },\r\n    {\r\n      title: 'Quantity',\r\n      dataIndex: 'quantity',\r\n      editable: \"true\",\r\n      width: '10%',\r\n    },\r\n    {\r\n      title: 'Amount',\r\n      dataIndex: 'amount',\r\n      editable: \"true\",\r\n      sorter: {\r\n        compare: (a, b) => a.amount - b.amount,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'Discount(%)',\r\n      dataIndex: 'discount',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.discount - b.discount,\r\n        multiple: 2,\r\n      },\r\n    },\r\n    {\r\n      title: 'Total',\r\n      dataIndex: 'total',\r\n      sorter: {\r\n        compare: (a, b) => a.total - b.total,\r\n        multiple: 1,\r\n      },\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) =>\r\n        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n          <a> {queryParams.context != \"edit\" ? \"Delete\" : \"\"} </a>\r\n        </Popconfirm>\r\n    }\r\n  ];\r\n  if (isGSTIncluded) {\r\n    columns.splice(3, 0, {\r\n      title: 'GST(CGST+SGST)',\r\n      dataIndex: 'gst',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.gst - b.gst,\r\n        multiple: 3,\r\n      },\r\n    });\r\n  }\r\n\r\n  columns = columns.map((col) => {\r\n    if (col.editable == \"false\") {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        editable: col.editable,\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        handleSave: handleSave,\r\n      }),\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Modal title=\"Add Item\" visible={isModalVisible} footer={null} onOk={handleOk} onCancel={handleCancel}>\r\n        <AddItem onItemAdded={onItemAdded} />\r\n      </Modal>\r\n      <Modal title=\"Return Item\" visible={isReturnModalVisible} footer={null} onOk={submitReturn} onCancel={cancelReturnModal}>\r\n        <ReturnItem rowsData={data} patientDetails={patientDetails} onItemAdded={onItemAdded} onItemsReturned={onItemsReturned} isModalVisible={setIsReturnModalVisible} />\r\n      </Modal>\r\n      {/* New Patient <Switch onChange={onNewPatientSwitchChange} /> <br /> <br /> */}\r\n      {patientInfo}\r\n      <div style={{ display: 'none' }}>\r\n        <BillPrint ref={componentRef} branddetails={branddetails} itemList={data} paymentMode={paymentMode} isGSTIncluded={isGSTIncluded} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} billDate={billDetails.createdAt} patientId={patientDetails.patientId} />\r\n      </div>\r\n      <Divider>Bill Details</Divider>\r\n      <Row gutter={24}>\r\n        <Col span={4}>\r\n          <Descriptions>\r\n            <Descriptions.Item label=\"Bill Id\">{billDetails.billId}</Descriptions.Item>\r\n            {/* <Descriptions.Item label=\"Receipt Id\">{queryParams.receiptId}</Descriptions.Item> */}\r\n            {/* <Descriptions.Item label=\"Date and time\">{billDetails.createdAt}</Descriptions.Item> */}\r\n          </Descriptions>\r\n        </Col>\r\n        <Col span={16}>\r\n          <DatePicker onChange={onBillDateChange} value={billDate} />\r\n        </Col>\r\n        <Col span={4}>\r\n          <Checkbox checked={isGSTIncluded} onChange={onGSTIncludedChange}>Include GST</Checkbox>\r\n        </Col>\r\n      </Row>\r\n\r\n\r\n      <Button\r\n        onClick={showModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"none\" : \"\")\r\n        }}>Add Item\r\n        </Button>\r\n      <Button\r\n        onClick={showReturnItemModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"\" : \"none\")\r\n        }}>Return Item\r\n        </Button>\r\n      <Table columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n\r\n      <FinalCharges finalCharges={finalCharges} onDiscountChange={onDiscountChange} />\r\n      <Divider>Payment</Divider>\r\n      <Radio.Group onChange={paymentMethod} value={paymentMode}>\r\n        <Radio value=\"Cash\">Cash</Radio>\r\n        <Radio value=\"Card\">Card</Radio>\r\n        <Radio value=\"UPI\">UPI</Radio>\r\n        <Radio value=\"Paytm\">Paytm</Radio>\r\n        <Radio value=\"Due\">Due</Radio>\r\n      </Radio.Group>\r\n      <br /><br /><br />\r\n      <Row gutter={24}>\r\n        {generateBillButton}\r\n        {/* <Col className=\"gutter-row\" span={3}>\r\n          <Button type=\"primary\">Cancel</Button>\r\n        </Col> */}\r\n        {printButton}\r\n        {/* <Col className=\"gutter-row\" span={3}>\r\n          <Button style={{ width: '90%' }} type=\"primary\" onClick={() => history.push({ pathname: '/home/appointment', search: '?patientId='.concat(queryParams.patientId) })}>Go To Appointment</Button>\r\n        </Col> */}\r\n\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Billing;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Select, DatePicker } from 'antd';\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\nconst BillSearchComp = (props) => {\r\n    const defaultSearch = \"billId\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n    let inputSearch = <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Bill by\" />;\r\n\r\n    if (filterValue == \"dateRange\") {\r\n        inputSearch = <RangePicker onChange={onDateRangeSelect} disabledDate={disabledDate} />;\r\n    }\r\n    \r\n    function onDateRangeSelect(values) {\r\n        var actualDates = convertToActualDate(values);\r\n        props.onSearch(actualDates, filterValue);\r\n    }\r\n\r\n    function convertToActualDate(values) {\r\n        var date = moment(values[0]).toDate();\r\n        date.setHours(0);\r\n\r\n        var date2 = moment(values[1]).toDate();\r\n        date2.setHours(24);\r\n        return [date.getTime(), date2.getTime()];\r\n    }\r\n    function disabledDate(current) {\r\n        // Can not select days before today and today\r\n        return current && current > moment().endOf('day');\r\n    }\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n        <Input.Group compact>\r\n            <Select defaultValue={defaultSearch} onSelect={setfilterValue}>\r\n                {/* <Option key=\"patientId\" value=\"patientId\">Patient Id</Option> */}\r\n                <Option key=\"billId\" value=\"billId\">Bill Id</Option>\r\n                <Option key=\"name\" value=\"name\">Customer's name</Option>\r\n                <Option key=\"dateRange\" value=\"dateRange\">Date Range</Option>\r\n            </Select>\r\n            { inputSearch }\r\n        </Input.Group>);\r\n};\r\nexport default BillSearchComp;\r\n","import React, { useEffect } from 'react';\r\nimport BillSearch from '../billing/components/billSearch';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, AutoComplete, Badge, Descriptions, Row, Col, Button, Space } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UserOutlined, DownloadOutlined, OrderedListOutlined } from '@ant-design/icons';\r\nconst renderTitle = (title: string) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title: string, count: number) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\nconst options = [\r\n    {\r\n        label: renderTitle('Libraries'),\r\n        options: [renderItem('AntDesign', 10000), renderItem('AntDesign UI', 10600)],\r\n    },\r\n    {\r\n        label: renderTitle('Solutions'),\r\n        options: [renderItem('AntDesign UI FAQ', 60100), renderItem('AntDesign FAQ', 30010)],\r\n    },\r\n    {\r\n        label: renderTitle('Articles'),\r\n        options: [renderItem('AntDesign design language', 100000)],\r\n    },\r\n];\r\n\r\nconst Canteen = () => {\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <BillSearch />\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Button type=\"dashed\" icon={<PlusOutlined />}>\r\n                        New\r\n                    </Button>\r\n                    <Button type=\"dashed\" style={{ marginLeft: '5px' }} icon={<OrderedListOutlined />}>\r\n                        <Link to=\"/home/canteenStock\">View Stock</Link>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Descriptions title=\"Patient Info\">\r\n                <Descriptions.Item label=\"Patient Name\">Rishiraj</Descriptions.Item>\r\n                <Descriptions.Item label=\"Phone\">919829128</Descriptions.Item>\r\n                <Descriptions.Item label=\"Department\">Ward 1</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"warning\" text=\"pending\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <br /><br />\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'itemName']}\r\n                                            fieldKey={[field.fieldKey, 'itemName']}\r\n                                            rules={[{ required: true, message: 'Missing Item name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search placeholder=\"Search item\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <Input placeholder=\"Price\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'gst']}\r\n                                            fieldKey={[field.fieldKey, 'gst']}\r\n                                        >\r\n                                            <Input placeholder=\"gst\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n            <Descriptions title=\"\">\r\n                <Descriptions.Item label=\"Total Amount\">100</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total GST\">15</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total discount\">0</Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <Form.Item>\r\n                <Row>\r\n                    <Col span={12} offset={11}>\r\n                        <Button type=\"primary\" shape=\"round\" icon={<DownloadOutlined />} size='large'>Print</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Pay Now</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Add to Bill</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form.Item>\r\n        </>\r\n\r\n    );\r\n};\r\nexport default Canteen;\r\n","import { PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Divider, Form, Input, InputNumber, Select, Table } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { Option } = Select;\r\nconst defaultCategories = ['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian'];\r\nconst columns = [\r\n    {\r\n        title: 'Item Name',\r\n        dataIndex: 'itemName',\r\n        defaultSortOrder: 'descend',\r\n        sorter: (a, b) => a.itemName - b.itemName,\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price'\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        filters: defaultCategories.map(cat => {\r\n            return {\r\n                text: cat,\r\n                value: cat,\r\n            }\r\n        }),\r\n        onFilter: (value, record) => record.category.indexOf(value) === 0,\r\n        sorter: (a, b) => a.category.length - b.category.length,\r\n        sortDirections: ['descend'],\r\n    }\r\n];\r\n\r\nconst CanteenStock = () => {\r\n    let index = 0;\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    const [, forceUpdate] = useState();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian']);\r\n\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const onFinish = values => {\r\n        console.log('Finish:', values);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"itemName\"\r\n                    rules={[{ required: true, message: 'Please enter item name!' }]}\r\n                >\r\n                    <Input placeholder=\"Item Name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please enter a price!' }]}\r\n                >\r\n                    <InputNumber placeholder=\"Price\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"Category\"\r\n                >\r\n                    <Select\r\n                        style={{ width: 240 }}\r\n                        placeholder=\"Select category\"\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                <Divider style={{ margin: '4px 0' }} />\r\n                                <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                    <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                    <a\r\n                                        style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                        onClick={addItem}\r\n                                    >\r\n                                        <PlusOutlined /> Add item\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {items.map(item => (\r\n                            <Option key={item}>{item}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Item\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default CanteenStock;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByDoctorId } from '../queries';\r\n\r\nconst useGetAppointmentByDoctorId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (doctorId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByDoctorId(doctorId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByDoctorId;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByPatientId } from '../queries';\r\n\r\nconst useGetAppointmentByPatientId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByPatientId(patientId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByPatientId;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, DatePicker, Button, TimePicker, Select, Space, Input } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport useGetAppointmentByDoctorId from '../../state/appointment/hooks/useGetAppointmentsByDoctorId';\r\nimport useGetAppointmentByPatientId from '../../state/appointment/hooks/useGetAppointmentByPatientId';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\nfunction PickerWithType({ type, onChange }) {\r\n    if (type === 'time') return <TimePicker onChange={onChange} />;\r\n    if (type === 'date') return <DatePicker onChange={onChange} />;\r\n    return <DatePicker picker={type} onChange={onChange} />;\r\n}\r\n\r\nfunction DoctorAppointment({ location, history }) {\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Patient Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n        },\r\n        {\r\n            title: 'Date',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n        },\r\n        {\r\n            title: 'Time Slot',\r\n            dataIndex: 'timeSlot',\r\n            key: 'timeSlot',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color=\"green\" key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Booked',\r\n                    value: 'booked',\r\n                },\r\n                {\r\n                    text: 'Appointment done',\r\n                    value: 'done',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => {\r\n                let proceed = \"\";\r\n                if (record.status != \"done\") {\r\n                    proceed = <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/prescription', search: '?patientId=' + record.patientId + '&patientName=' + record.patientName + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        Proceed\r\n                </Button>\r\n                }\r\n                return <Space size=\"middle\">\r\n                    {proceed}\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        View\r\n            </Button>\r\n                </Space>\r\n            },\r\n        }\r\n    ];\r\n    let doctorsList = [];\r\n    const [type, setType] = useState('time');\r\n    const [patientAppointments, isLoading2, setAppointmentByPatientId] = useGetAppointmentByPatientId();\r\n    // const [selectedDoctor, setSelectedDoctor] = useState(\"initial\");\r\n    const [filter, setFilter] = useState(\"none\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [appointments, isLoading1, setAppointmentByDoctorId] = useGetAppointmentByDoctorId();\r\n    let data = [];\r\n    useEffect(() => {\r\n        setRequest();\r\n    }, []);\r\n\r\n    if (doctors.length > 0) {\r\n        doctorsList = doctors.map(doctor => <Option key={doctor.doctorId} >{doctor.doctorName}</Option>);\r\n    }\r\n    console.log(\"asadada\", appointments);\r\n    if (filter == \"doctor\" && appointments.length > 0) {\r\n        data = appointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                timeSlot: appointment.timeSlot,\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['booked'])\r\n            };\r\n        });\r\n    }\r\n    if (filter == \"patient\" && patientAppointments.length > 0) {\r\n        data = patientAppointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                timeSlot: appointment.timeSlot,\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['booked'])\r\n            };\r\n        });\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        setAppointmentByDoctorId(value);\r\n        setFilter(\"doctor\");\r\n    }\r\n\r\n    const onPatientSearch = value => {\r\n        setAppointmentByPatientId(value);\r\n        setFilter(\"patient\");\r\n    };\r\n    return (\r\n        <>\r\n            <Space>\r\n                <Select\r\n                    onChange={handleChangeOfDoctor}\r\n                    showSearch\r\n                    placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }>\r\n                    {doctorsList}\r\n                </Select>\r\n                {/* <Select value={type} onChange={setType}>\r\n                    <Option value=\"time\">Time</Option>\r\n                    <Option value=\"date\">Date</Option>\r\n                    <Option value=\"week\">Week</Option>\r\n                    <Option value=\"month\">Month</Option>\r\n                    <Option value=\"quarter\">Quarter</Option>\r\n                    <Option value=\"year\">Year</Option>\r\n                </Select>\r\n                <PickerWithType type={type} onChange={value => console.log(value)} /> */}\r\n                <Search\r\n                    placeholder=\"Search Patient By Id\"\r\n                    allowClear\r\n                    enterButton=\"Search\"\r\n                    size=\"medium\"\r\n                    style={{ width: '100%', marginLeft: '200px' }}\r\n                    onSearch={onPatientSearch}\r\n                />\r\n            </Space>\r\n            <br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DoctorAppointment;","import { useState } from 'react';\r\nimport { addMedicine } from '../queries';\r\n\r\nconst useAddMedicine = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addMedicine(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddMedicine;\r\n","import { useState } from 'react';\r\nimport { getAllMedicines } from '../queries';\r\n\r\nconst useMedicineSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllMedicines();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useMedicineSearch;","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\n\r\nconst AddMedicine = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddMedicine();\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Medicine added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    console.log(\"medicines list\", medicines);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"medicineName\": form.name,\r\n            \"medicineType\": form.type,\r\n            \"strength\": form.strength,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Medicine Name',\r\n            dataIndex: 'medicineName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Strength',\r\n            dataIndex: 'strength'\r\n        },\r\n        {\r\n            title: 'Medicine Type',\r\n            dataIndex: 'medicineType',\r\n            filters: [\r\n                {\r\n                    text: 'Aspirin',\r\n                    value: 'aspirin',\r\n                },\r\n                {\r\n                    text: 'Painkillers',\r\n                    value: 'painkiller',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.medicineType.indexOf(value) === 0,\r\n            sorter: (a, b) => a.medicineType.length - b.medicineType.length,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                medicineName: medicine.medicineName,\r\n                price: medicine.price,\r\n                strength: medicine.strength,\r\n                medicineType: medicine.medicineType,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please medicine name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"type\"\r\n                    rules={[{ required: true, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine type\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"strength\"\r\n                    rules={[{ required: true, message: 'Please input strength!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Strength\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Medicine\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddMedicine;","import { useState } from 'react';\r\nimport { addMedicine, addTest } from '../queries';\r\n\r\nconst useAddTest = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addTest(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddTest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Table, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport useAddTest from '../../../state/addMedicine/hooks/useAddTest';\r\nimport Spinner from '../../../components/spinner';\r\nimport useSearchTest from '../../../state/addMedicine/hooks/useSearchTest';\r\n\r\nconst AddTest = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddTest();\r\n    const [medicines, isLoadings, setMedicineSearch] = useSearchTest();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Test added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"testName\": form.name,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Test Name',\r\n            dataIndex: 'testName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.testName - b.testName,\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                testName: medicine.testName,\r\n                price: medicine.price\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please select test name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Test name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Test\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddTest;","import { Button, Col, Form, Row, Space, Table, Tag } from 'antd';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nconst columns = [\r\n    {\r\n        title: 'Package Name',\r\n        dataIndex: 'packageName',\r\n        key: 'packageName',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Package End Date',\r\n        dataIndex: 'packageEndDate',\r\n        key: 'packageEndDate',\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '2',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '3',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n];\r\n\r\nconst Package = () => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            <Link to=\"/home/newPackage\">Create New</Link>\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Package;\r\n","import React, { } from 'react';\r\nimport { Table, Input, Select, Button, Descriptions } from 'antd';\r\nimport PatientDetails from '../../patientDetails';\r\nconst ViewPatientRecords = (props) => {\r\n    let history = props.history;\r\n    const patientDetails = props.patientDetails;\r\n    let dataModal = [];\r\n    let userDetails = [];\r\n    const columnsModal = [\r\n        { title: 'Appointment ID', dataIndex: 'appointmentId', key: 'appointmentId' },\r\n        { title: 'Appointment Date', dataIndex: 'appointmentDate', key: 'appointmentDate' },\r\n        { title: 'Disease summary', dataIndex: 'diseaseDesc', key: 'diseaseDesc' },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            render: (text, record) => <Button type=\"primary\" onClick={() => {\r\n                history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n            }}>View</Button>,\r\n        },\r\n    ];\r\n    props.patientAppointments.map(data => {\r\n        if (data.status == \"done\") {\r\n            dataModal.push({ ...data, appointmentDate: (new Date(data.appointmentDate)).toDateString() });\r\n        }\r\n    });\r\n    console.log(\"patient\", patientDetails);\r\n    for (var key of Object.keys(patientDetails)) {\r\n        if (patientDetails[key] && key!= \"key\") {\r\n            userDetails.push(<Descriptions.Item label={key}>{patientDetails[key]}</Descriptions.Item>);\r\n        }\r\n    }\r\n    // const dataModal = [\r\n    //     {\r\n    //         key: 1,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"15 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 2,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"23 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 3,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"30 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 4,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"14 Sep 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    // ];\r\n\r\n    return (\r\n        <>\r\n            <Descriptions>\r\n            {userDetails}\r\n            </Descriptions>\r\n            <Table\r\n                columns={columnsModal}\r\n                // expandable={{\r\n                //     expandedRowRender: record => <p style={{ margin: 0 }}>{record.description}</p>,\r\n                //     rowExpandable: record => record.app !== '14 Aug',\r\n                // }}\r\n                dataSource={dataModal}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewPatientRecords;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Select, DatePicker } from 'antd';\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\nconst PatientSearchComp = (props) => {\r\n    const defaultSearch = \"patientName\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n    let inputSearch =  <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Patient by\" />\r\n\r\n    if (filterValue == \"dateRange\") {\r\n        inputSearch = <RangePicker onChange={onDateRangeSelect} disabledDate={disabledDate} />;\r\n    }\r\n    \r\n    function onDateRangeSelect(values) {\r\n        var actualDates = convertToActualDate(values);\r\n      props.onSearch(actualDates, filterValue);\r\n    }\r\n\r\n    function convertToActualDate(values) {\r\n        var date = moment(values[0]).toDate();\r\n        date.setHours(0);\r\n\r\n        var date2 = moment(values[1]).toDate();\r\n        date2.setHours(24);\r\n        return [date, date2];\r\n    }\r\n    function disabledDate(current) {\r\n        // Can not select days before today and today\r\n        return current && current > moment().endOf('day');\r\n    }\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n        <Input.Group compact>\r\n        <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n            <Option value=\"patientName\">Patient Name</Option>\r\n            <Option value=\"patientId\">Patient Id</Option>\r\n            <Option key=\"dateRange\" value=\"dateRange\">Date Range</Option>\r\n        </Select>\r\n        { inputSearch }\r\n    </Input.Group>);\r\n};\r\nexport default PatientSearchComp;\r\n","import { useState } from 'react';\r\nimport { getPatientByName } from '../queries';\r\n\r\nconst usePatientByName = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientName) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientByName(patientName);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientByName;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Input, Space, Button, Modal, Select, notification } from 'antd';\r\nimport moment from 'moment';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport ViewPatientRecords from './components/viewPatientRecords';\r\nimport Spinner from '../../components/spinner';\r\nimport PatientSearchComp from './components/patientSearchComponent';\r\nimport usePatientById from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../patientDetails';\r\nimport usePatientByName from '../../state/patientSearch/hooks/usePatientSearchByName';\r\nimport { getAppointmentByPatientId } from '../../state/appointment/queries';\r\nimport { responsiveArray } from 'antd/lib/_util/responsiveObserve';\r\nimport { getAllPatients } from '../../state/patientSearch/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nconst PatientSearch = ({ history }) => {\r\n    const [isPatientRecordModalVisible, setIsPatientRecordModalVisible] = useState(false);\r\n    const [name, setName] = useState([]);\r\n    const [showPatient, setShowPatient] = useState(\"all\");\r\n    const [allPatients, setAllPatients] = useState([]);\r\n    const [dateFilteredPatient, setDateFilteredPatient] = useState([]);\r\n    const [patientDetails, isLoading1, setPatientSearchbyId] = usePatientById();\r\n    const [currentPatientDetails, setCurrentPatientDetails] = useState({});\r\n    const [currentPatientAppointments, setCurrentPatientAppointments] = useState({});\r\n    const [patientDetailsByName, isLoading2, setPatientSearchbyName] = usePatientByName();\r\n    let data = [];\r\n\r\n    useEffect(() => {\r\n        if (showPatient === \"all\") {\r\n            setAllPatientList();\r\n        }\r\n    }, [showPatient]);\r\n\r\n    function setAllPatientList() {\r\n        getAllPatients().then(data => {\r\n            if (data) {\r\n                setAllPatients(data);\r\n            } else {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            }\r\n        }).catch(err => {\r\n\r\n        });\r\n    }\r\n    function onPatientSearch(searchValue, searchFilter) {\r\n        console.log(searchValue);\r\n\r\n        if (searchValue == '') {\r\n            getAllPatientsList();\r\n            setShowPatient(\"all\");\r\n        } else if (searchFilter == \"patientId\") {\r\n            setPatientSearchbyId(searchValue);\r\n            setShowPatient(\"patientId\");\r\n        } else if (searchFilter == \"patientName\") {\r\n            setPatientSearchbyName(searchValue);\r\n            setShowPatient(\"patientName\");\r\n        } else if (searchFilter == \"dateRange\") {\r\n            console.log(searchValue);\r\n            data = allPatients.filter(data => {\r\n                if (data.createdAt < searchValue[1] && data.createdAt > searchValue[0]) {\r\n                    console.log('aaya');\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n            setShowPatient(searchFilter);\r\n            setDateFilteredPatient(data);\r\n        }\r\n\r\n    }\r\n    if (showPatient == \"patientId\" && patientDetails != null) {\r\n        const row = [{\r\n            key: patientDetails.patientId,\r\n            patientId: patientDetails.patientId,\r\n            patientName: patientDetails.patientName,\r\n            age: patientDetails.age,\r\n            contactNum: patientDetails.contactNum,\r\n            street: patientDetails.street,\r\n            status: ['registered']\r\n        }];\r\n        data = row;\r\n    }\r\n\r\n    if (showPatient == \"patientName\" && patientDetailsByName != null) {\r\n        data = patientDetailsByName.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"all\" && allPatients.length > 0) {\r\n        data = allPatients.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"dateRange\" && dateFilteredPatient.length > 0) {\r\n        data = dateFilteredPatient.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    function getAllPatientsList() {\r\n        getAllPatients().then(data => {\r\n            if (data) {\r\n                setAllPatients(data);\r\n            } else {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            setAllPatients([]);\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n            sorter: (a, b) => a.patientName.length - b.patientName.length,\r\n            sortDirections: ['descend', 'ascend'],\r\n        },\r\n        {\r\n            title: 'Patient Id',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId',\r\n        },\r\n        {\r\n            title: 'Age',\r\n            dataIndex: 'age',\r\n            key: 'age',\r\n        },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 'contactNum',\r\n            key: 'contactNum',\r\n        },\r\n        {\r\n            title: 'Visit Type',\r\n            dataIndex: 'visitType',\r\n            key: 'visitType',\r\n            filters: [\r\n                {\r\n                    text: 'OPD',\r\n                    value: 'OPD',\r\n                },\r\n                {\r\n                    text: 'IPD',\r\n                    value: 'IPD',\r\n                },\r\n                {\r\n                    text: 'OPD to IPD',\r\n                    value: 'OPD to IPD',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.visitType == value,\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        let color = tag.length > 5 ? 'geekblue' : 'green';\r\n                        if (tag === 'loser') {\r\n                            color = 'volcano';\r\n                        }\r\n                        return (\r\n                            <Tag color={color} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Registered',\r\n                    value: 'registered',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'discharged',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        setCurrentPatientDetails(record);\r\n                        getAppointmentByPatientId(record.patientId).then(response => {\r\n                            setCurrentPatientAppointments(response);\r\n                            setIsPatientRecordModalVisible(true);\r\n                        }).catch(err => {\r\n                            notification[\"error\"]({\r\n                                message: 'Error',\r\n                                description: 'Error while searching records with Patient Id' + record.patientId,\r\n                                duration: 3\r\n                            });\r\n                        });\r\n                    }}>\r\n                        View records\r\n                    </Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <>\r\n            <PatientSearchComp onSearch={onPatientSearch} />\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n            <Modal title=\"Patient Records\" visible={isPatientRecordModalVisible} footer={null} width={800} onCancel={() => setIsPatientRecordModalVisible(false)} >\r\n                <ViewPatientRecords patientDetails={currentPatientDetails} patientAppointments={currentPatientAppointments} history={history} />\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PatientSearch;","import React, { useEffect } from 'react';\r\n\r\nconst Pharmacy = () => {\r\n    return (\r\n        <>\r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pharmacy;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePrescription = (body) => {\r\n    return axios\r\n        .post(`${api.url}/doctorService/savePrescription`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPrescriptionByAppointmentId = (appointmentId) => {\r\n    return axios\r\n        .get(`${api.url}/doctorService/getPrescriptionDetails?appointmentId=` + appointmentId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { savePrescription } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useSavePrescription = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState({});\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await savePrescription(body);\r\n\r\n    setStatus(response);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useSavePrescription;\r\n","import { PrinterOutlined, MinusCircleOutlined, PlusOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useMedicineSearch from '../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useSearchTest from '../../state/addMedicine/hooks/useSearchTest';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport useSavePrescription from '../../state/prescription/hooks/useSavePrescription';\r\nimport PatientDetails from '../patientDetails';\r\nimport '../prescription/prescription.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst renderTitle = (title) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title, count) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\n\r\n\r\nconst Prescription = ({ location, history }) => {\r\n    let options = [];\r\n    const optionsTests = [];\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [form] = Form.useForm();\r\n    const [medicineForm] = Form.useForm();\r\n    const [vitalsForm] = Form.useForm();\r\n    const [adviceForm] = Form.useForm();\r\n\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    const [response, isLoading1, setSavePrescription] = useSavePrescription();\r\n    const [tests, isLoading, setTestSearch] = useSearchTest();\r\n    // const [tests, isLoading, setTestSearch] = usePre();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        getPatientDetails(queryParams.patientId);\r\n        if (response.status == \"SUCCESS\") {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient prescription has been generated successfully',\r\n                duration: 3\r\n            });\r\n        } else if (response.status == 500) {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error saving the prescription, please check with admin',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [response]);\r\n    function getPatientDetails(patientId) {\r\n        getPatientById(patientId).then(data => {\r\n            setPatientDetails(data);\r\n        });\r\n    }\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n        console.log('Dawaiyaan', form.getFieldsValue());\r\n        console.log('tests:', medicineForm.getFieldsValue());\r\n        console.log('vitals:', vitalsForm.getFieldsValue());\r\n        const medicineList = medicineForm.getFieldsValue().users;\r\n        const testList = form.getFieldsValue().users;\r\n        const patientVitals = vitalsForm.getFieldsValue();\r\n        const body = {\r\n            appointmentDto: {\r\n                appointmentId: queryParams.appointmentId,\r\n                appointmentDate: new Date().getTime(),\r\n                patientId: queryParams.patientId,\r\n                patientName: queryParams.patientName,\r\n                doctorId: queryParams.doctorId,\r\n                height: patientVitals.height,\r\n                weight: patientVitals.weight,\r\n                Bp: patientVitals.bp,\r\n                temprature: patientVitals.temparature,\r\n                advise: adviceForm.getFieldsValue().advice,\r\n                status: \"done\"\r\n            },\r\n            prescribedMedsDtoList: null,\r\n            prescribedTestingDtoList: null\r\n        };\r\n\r\n        if (medicineList != null && medicineList.length > 0) {\r\n            body.prescribedMedsDtoList = medicineList.map(medicine => {\r\n                return { medName: medicine.medicineName, days: medicine.numberOfDays, dosage: medicine.dosage, comment: medicine.comments };\r\n            });\r\n        }\r\n\r\n        if (testList != null && testList.length > 0) {\r\n            body.prescribedTestingDtoList = testList.map(test => {\r\n                return {\r\n                    testName: test.testName,\r\n                    dateOfBooking: test.date,\r\n                    comment: test.comments\r\n                };\r\n            });\r\n        }\r\n        setSavePrescription(body);\r\n        setSubmitted(true);\r\n    };\r\n    const handleSearch = (value) => {\r\n        setMedicineSearch();\r\n    };\r\n\r\n    const handleTestSearch = (value) => {\r\n        setTestSearch();\r\n    };\r\n\r\n    if (tests.length > 0) {\r\n        tests.forEach(test => {\r\n            optionsTests.push({ value: test.testName });\r\n        });\r\n    }\r\n\r\n    if (medicines.length > 0) {\r\n        var map = new Map();\r\n\r\n        medicines.forEach(medicine => {\r\n            if (map.has(medicine.medicineType)) {\r\n                map.set(medicine.medicineType, [...map.get(medicine.medicineType), medicine.medicineName]);\r\n            } else {\r\n                map.set(medicine.medicineType, [medicine.medicineName])\r\n            }\r\n        });\r\n        console.log(map);\r\n        for (let [key, value] of map) {\r\n            console.log(key + \" = \" + value);\r\n            options.push({\r\n                label: renderTitle(key),\r\n                options: value.map(val => renderItem(val, 100)),\r\n            });\r\n        }\r\n    }\r\n    let formActions = <Button size=\"large\" type=\"primary\">Submit</Button>;\r\n    if (submitted && response.status != 500) {\r\n        formActions = (<><Button type=\"primary\" shape=\"round\" onClick={() => {\r\n            history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + queryParams.patientId + '&doctorId=' + queryParams.doctorId + '&appointmentId=' + queryParams.appointmentId });\r\n        }} icon={<PrinterOutlined />} size='large'>Print</Button>\r\n            <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large' onClick={value => history.push({ pathname: '/home/doctorAppointment' })}>Go to My Appoinments</Button></>);\r\n    }\r\n    return (\r\n        <>\r\n            <PatientDetails patientDetails={patientDetails} />\r\n            <br></br>\r\n            <Divider>Patient Vitals</Divider>\r\n\r\n            <Form\r\n                form={vitalsForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"BP\" name=\"bp\">\r\n                            <InputNumber name=\"bp\" style={{ width: '90%' }} placeholder=\"Blood pressure\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Temparature\" name=\"temparature\">\r\n                            <InputNumber name=\"temparature\" style={{ width: '90%' }} placeholder=\"Temp In degrees Celsius\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Height\" name=\"height\">\r\n                            <InputNumber name=\"height\" style={{ width: '90%' }} placeholder=\"Height in feet\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Weight\" name=\"weight\">\r\n                            <Input name=\"weight\" style={{ width: '90%' }} placeholder=\"Weight in (kgs)\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </Form>\r\n            <Divider>Prescribe Medicines</Divider>\r\n            {/* <PrescribeMedicine /> */}\r\n\r\n            <Form name=\"dynamic_form_nest_item\" form={medicineForm} onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map((field, index) => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'medicineName']}\r\n                                            fieldKey={[field.fieldKey, 'medicineName']}\r\n                                            rules={[{ required: true, message: 'Missing Medicine name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleSearch}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Medicine\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'dosage']}\r\n                                            fieldKey={[field.fieldKey, 'dosage']}\r\n                                            rules={[{ required: true, message: 'Missing Dosage' }]}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Dosage per day (M-A-N)\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">1-0-0</Option>\r\n                                                <Option value=\"1-1-0\">1-1-0</Option>\r\n                                                <Option value=\"1-1-1\">1-1-1</Option>\r\n                                                <Option value=\"0-0-1\">0-0-1</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'numberOfDays']}\r\n                                            fieldKey={[field.fieldKey, 'numberOfDays']}\r\n                                            rules={[{ required: true, message: 'Missing Number of days' }]}\r\n                                        >\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Medicines\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n\r\n            <br></br>\r\n            <Divider>Prescribe Tests</Divider>\r\n            <Form name=\"dynamic_form_nest_item2\" form={form} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'testName']}\r\n                                            fieldKey={[field.fieldKey, 'testName']}\r\n                                            rules={[{ required: true, message: 'Missing test name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleTestSearch}\r\n                                                style={{ width: 200 }}\r\n                                                options={optionsTests}\r\n                                                placeholder=\"Type test name\"\r\n                                                filterOption={(inputValue, option) =>\r\n                                                    option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                                                }\r\n                                            />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'date']}\r\n                                            fieldKey={[field.fieldKey, 'date']}\r\n                                            rules={[{ required: false }]}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Tests\r\n                                   </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                form={adviceForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={20}>\r\n                        <Form.Item name='advice' label=\"Summary\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <Row>\r\n                <Col span={12} onClick={onFinish} offset={11}>\r\n                    {formActions}\r\n                </Col>\r\n            </Row>\r\n        </>);\r\n};\r\n\r\nexport default Prescription;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport useRegistration from '../../state/registration/hooks/useRegistration';\r\nimport Spinner from '../../components/spinner';\r\nimport { registration } from '../../state/registration/queries';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst Registration = ({ location, history }) => {\r\n    const onFinish = formData => {\r\n\r\n        const form = formData.user;\r\n        const body = {\r\n            \"patientName\": form.name,\r\n            \"age\": form.age,\r\n            \"contactNum\": form.phone,\r\n            \"altContactNum\": form.alternatecontact,\r\n            \"street\": form.address,\r\n            \"state\": form.state,\r\n            \"country\": form.country,\r\n            \"visitType\": form.visit,\r\n            \"createdAt\": (new Date()).getTime()\r\n        };\r\n        registration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient has been registered successfully',\r\n                duration: 3\r\n            });\r\n            history.push({ pathname: '/home/billing', search: '?patientId=' + data.patientId + '&receiptId=' + data.recieptId + '&context=registration' });\r\n        }).catch(errr => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error in registration',\r\n                duration: 3\r\n            });\r\n\r\n        });\r\n        // setRequest(body);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'gender']} label=\"Gender\" rules={[{ required: true }]}>\r\n                    <Select\r\n                        placeholder=\"Select Gender\"\r\n                        allowClear>\r\n                        <Option value=\"male\">male</Option>\r\n                        <Option value=\"female\">female</Option>\r\n                        <Option value=\"other\">other</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'age']} label=\"Age\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'visit']} label=\"Visit Type\" rules={[{ required: true }]}>\r\n                    <Select placeholder=\"Select Visit type\">\r\n                        <Option value=\"OPD\">OPD</Option>\r\n                        <Option value=\"IPD\">IPD</Option>\r\n                        <Option value=\"OPD to IPD\">OPD to IPD</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'phone']} label=\"Phone Number\" rules={[{ required: true, message: 'Please input your phone number!' }]}>\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'alternatecontact']} label=\"Alternate Contact Number\">\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'email']} label=\"Email\" rules={[{ type: 'email' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'address']} label=\"Address\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'state']} label=\"State\">\r\n                    <Select\r\n                        defaultValue=\"bihar\"\r\n                        placeholder=\"Select State\"\r\n                        allowClear>\r\n                        <Option value=\"bihar\">Bihar</Option>\r\n                        <Option value=\"up\">UP</Option>\r\n                        <Option value=\"Karnataka\">Karnataka</Option>\r\n                        <Option value=\"Jharkhand\">Jharkhand</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'country']} label=\"Country\">\r\n                    <Select\r\n                        defaultValue=\"india\"\r\n                        placeholder=\"Select Country\"\r\n                        allowClear>\r\n                        <Option value=\"india\">India</Option>\r\n                        <Option value=\"us\">US</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" size='large' htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, { useEffect } from 'react';\r\nimport { Carousel } from 'antd';\r\nimport corousal1 from '../../../assets/images/corousal11.jpg';\r\nimport corousal2 from '../../../assets/images/corousal22.jpg';\r\nimport corousal3 from '../../../assets/images/corousal33.jpg';\r\nimport corousal4 from '../../../assets/images/corousal44.jpg';\r\nimport '../homescreen/homescreen.css';\r\nconst contentStyle = {\r\n    height: '700px',\r\n    color: '#fff',\r\n    lineHeight: '500px',\r\n    textAlign: 'center',\r\n    background: '#364d79',\r\n    fontSize: \"20px\"\r\n};\r\n\r\n\r\n\r\nconst HomeScreen = () => {\r\n    return (\r\n        <Carousel autoplay>\r\n            <div>\r\n                <div className=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal1})`, fontSize: '4em' }}>\r\n                    Welcome to Baymax Inventories\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal2})` , fontSize: '4em' , color: 'white'}}>\r\n                    Inventories made simple\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal3})`, fontSize: '4em'  }}>\r\n                   Keep track of timelines\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal4})` , fontSize: '4em' }}>\r\n                    No more paperwork\r\n                </div>\r\n            </div>\r\n        </Carousel>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import { useState } from 'react';\r\nimport { getPharmacyMedicineDetail } from '../queries';\r\n\r\nconst useGetPharmacyMedicineDetail = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPharmacyMedicineDetail(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicineDetail;","import React, { useState, useEffect } from 'react';\r\nimport { PlusOutlined, OrderedListOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport { medicineDistributionUnits } from './utils';\r\nimport queryString from 'query-string';\r\nimport useSavePharmacyMedicine from '../../../state/pharmacy/hooks/useSavePharmacyMedicine';\r\nimport useGetPharmacyMedicineDetail from '../../../state/pharmacy/hooks/useGetMedicinedetail';\r\nimport { setNestedObjectValues } from 'formik';\r\nimport { saveItemCategory, getCategoriesList, savePharmacyMedicine, getItemUnitsList, saveItemUnit } from '../../../state/pharmacy/queries';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\n// const medicineUnits = medicineDistributionUnits.map(medicineDistributionUnit => <Option key={medicineDistributionUnit}>{medicineDistributionUnit}</Option>);\r\nconst AddNewMedicine = ({ location, history }) => {\r\n    let index = 0;\r\n    const [form] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [newItemUnit, setNewItemUnit] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n    const [itemUnits, setItemUnits] = useState([]);\r\n    const [medicineDetail, setRequest1] = useGetPharmacyMedicineDetail();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            setRequest1(queryParams.medicineId);\r\n        }\r\n        intialiseCategories();\r\n        intialiseItemUnits();\r\n    }, []);\r\n\r\n    if (medicineDetail != null && queryParams.mode == \"edit\") {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: medicineDetail.medicineId,\r\n                medicineName: medicineDetail.medicineName,\r\n                genericName: medicineDetail.genericName,\r\n                boxSize: Number.parseInt(medicineDetail.boxSize),\r\n                expDate: medicineDetail.expiryDate,\r\n                medicineShelf: medicineDetail.medicineShelf,\r\n                details: medicineDetail.details,\r\n                category: medicineDetail.category,\r\n                unit: medicineDetail.unit,\r\n                triggerValue: Number.parseFloat(medicineDetail.triggerValue),\r\n                image: medicineDetail.image,\r\n                salePrice: Number.parseFloat(medicineDetail.salePrice),\r\n                supplierPrice: medicineDetail.supplierPrice,\r\n                tax: medicineDetail.tax,\r\n                supplierName: medicineDetail.supplierName,\r\n                availability: medicineDetail.availability,\r\n                stockQuantity: medicineDetail.stockQuantity,\r\n            }\r\n        });\r\n    }\r\n\r\n    function intialiseCategories() {\r\n        getCategoriesList().then(data => {\r\n            if (Array.isArray(data)) {\r\n                setItems(data);\r\n            }\r\n        });\r\n    }\r\n    function intialiseItemUnits() {\r\n        getItemUnitsList().then(data => {\r\n            if (Array.isArray(data)) {\r\n                setItemUnits(data);\r\n            }\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        console.log(form);\r\n        const body = {\r\n            medicineName: form.medicineName,\r\n            genericName: form.genericName,\r\n            boxSize: form.boxSize,\r\n            details: form.details,\r\n            category: form.category,\r\n            unit: form.unit,\r\n            triggerValue: form.triggerValue,\r\n            image: form.image,\r\n            salePrice: form.salePrice,\r\n            supplierPrice: form.supplierPrice,\r\n            availability: form.availability,\r\n            stockQuantity: form.stockQuantity\r\n        };\r\n\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            body[\"medicineId\"] = queryParams.medicineId;\r\n        }\r\n\r\n        savePharmacyMedicine(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Item ${form.medicineName} ${queryParams.mode == 'edit' ? 'edited' : 'added'} successfully`,\r\n                duration: 3\r\n            });\r\n            clearForm();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while saving Item`,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n\r\n    function onItemUnitNameChange(event) {\r\n        setNewItemUnit(event.target.value);\r\n    };\r\n    function addItemCategory() {\r\n        // setName('');\r\n        const body = {\r\n            categoryId: null,\r\n            categoryName: name\r\n        };\r\n        saveItemCategory(body).then(data => {\r\n            setItems([...items, { categoryId: null, categoryName: name } || `New item ${index++}`]);\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Category ${name} added successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while creating category`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function addItemUnit() {\r\n        const body = {\r\n            id: null,\r\n            unitName: newItemUnit\r\n        };\r\n        saveItemUnit(body).then(data => {\r\n            setItemUnits([...itemUnits, { id: null, unitName: newItemUnit } || `New item ${index++}`]);\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Item Unit ${newItemUnit} added successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while creating category`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function clearForm() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: null,\r\n                medicineName: \"\",\r\n                genericName: \"\",\r\n                boxSize: 0,\r\n                details: \"\",\r\n                category: \"\",\r\n                unit: \"\",\r\n                triggerValue: 0,\r\n                image: null,\r\n                salePrice: 0,\r\n                supplierPrice: 0,\r\n                availability: \"In stock\",\r\n                stockQuantity: 0\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageSuppliers' });\r\n            }} type=\"dashed\" icon={<PlusOutlined />}>Add Supplier</Button>\r\n            <Button type=\"dashed\" onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Inventory</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Bulk Items</Button>\r\n            <br /><br /><br />\r\n            <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'availability']} label=\"Availability\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"In stock\">In Stock</Option>\r\n                                <Option value=\"Out of stock\">Out Of Stock</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineName']} label=\"Item Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'genericName']} label=\"Local Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'boxSize']} label=\"Box Size\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'expiryDate']} label=\"Expiry Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineShelf']} label=\"Medicine Shelf\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'details']} label=\"Details\">\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'category']} label=\"Category\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select category\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItemCategory}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item.categoryName}>{item.categoryName}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'image']} label=\"Image\">\r\n                            <Upload name=\"logo\" listType=\"picture\">\r\n                                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'stockQuantity']} label=\"Stock Quantity\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'unit']} label=\"Unit\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select Item Unit\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={newItemUnit} onChange={onItemUnitNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItemUnit}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {itemUnits.map(item => (\r\n                                    <Option key={item.unitName}>{item.unitName}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'triggerValue']} label=\"Reorder value\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salePrice']} label=\"Sale price per unit\" rules={[{ required: true }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'supplierPrice']} label=\"MRP per unit\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 10 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save and Add another\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default AddNewMedicine;\r\n","import { Space, Table, Input, Select, Typography, notification, Tag } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport { getPharmacyMedicineList, getPharmacyMedicineListByName, deleteMedicine, getCategoriesList } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nconst { Text } = Typography;\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\nconst ManageMedicines = ({ location, history }) => {\r\n    let data = [];\r\n    const [medicineData, setMedicineData] = useState([]);\r\n    const [itemCategories, setItemCategories] = useState([]);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [filterValue, setfilterValue] = useState(\"medicineName\");\r\n\r\n    useEffect(() => {\r\n        getAllMedicines();\r\n        intialiseCategories();\r\n    }, []);\r\n\r\n    function intialiseCategories() {\r\n        getCategoriesList().then(data => {\r\n            if (Array.isArray(data)) {\r\n                setItemCategories(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    if (medicineData.length > 0) {\r\n        const tempData = [];\r\n        medicineData.forEach((medicine, index) => {\r\n            tempData.push({\r\n                key: index,\r\n                name: medicine.medicineName,\r\n                medicineId: medicine.medicineId,\r\n                category: medicine.category,\r\n                supplierPrice: medicine.supplierPrice,\r\n                triggerValue: medicine.triggerValue,\r\n                salePrice: medicine.salePrice,\r\n                genericName: medicine.genericName,\r\n                expDate: medicine.expDate,\r\n                availability: medicine.availability,\r\n                stockQuantity: medicine.stockQuantity\r\n            });\r\n        });\r\n        data = [...tempData];\r\n    }\r\n\r\n    function onMedicineSearch(value) {\r\n        getPharmacyMedicineListByName(value).then(data => {\r\n            if (data) {\r\n                setMedicineData([...data]);\r\n            }\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: `Error while searching`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function deleteMedicineRecord(medicineId) {\r\n        deleteMedicine(medicineId).then(data => {\r\n            getAllMedicines();\r\n            notification[\"success\"]({\r\n                message: 'Success',\r\n                description: 'Item deleted successfully',\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function getAllMedicines() {\r\n        getPharmacyMedicineList().then(data => {\r\n            setMedicineData([...data]);\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text, record) => (\r\n                <Text type={record.stockQuantity - record.triggerValue > 0 ? 'success' : 'danger'}>{text}</Text>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Category',\r\n            dataIndex: 'category',\r\n            key: 'category',\r\n            filters: itemCategories.map(data => { return { text: data.categoryName, value: data.categoryName } }),\r\n            onFilter: (value, record) => record.category == value,\r\n            sorter: (a, b) => a.category - b.category,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Purchase Price',\r\n            dataIndex: 'supplierPrice',\r\n            key: 'supplierPrice',\r\n        },\r\n        {\r\n            title: 'Selling Price',\r\n            dataIndex: 'salePrice',\r\n            key: 'salePrice',\r\n        },\r\n        {\r\n            title: 'Common Name',\r\n            dataIndex: 'genericName',\r\n            key: 'genericName',\r\n        },\r\n        {\r\n            title: 'Expiry date',\r\n            dataIndex: 'expDate',\r\n            key: 'expDate',\r\n        },\r\n        {\r\n            title: 'Stock',\r\n            dataIndex: 'availability',\r\n            key: 'availability',\r\n            render: text => (text == 'In stock' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n        },\r\n        {\r\n            title: 'Stock Quantity',\r\n            dataIndex: 'stockQuantity',\r\n            key: 'stockQuantity',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=prefetch' + '&medicineName=' + record.name });\r\n                    }}>Place Order</a>\r\n                    {/* <a>Stock</a> */}\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addNewMedicine', search: '?mode=edit' + '&medicineId=' + record.medicineId });\r\n                    }}>Edit</a>\r\n                    <a onClick={() => {\r\n                        deleteMedicineRecord(record.medicineId);\r\n                    }}>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"medicineName\">Item Name</Option>\r\n                    <Option value=\"genericName\">Common Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onMedicineSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageMedicines;","import { useState } from 'react';\r\nimport { getPurchaseOrderList } from '../queries';\r\n\r\nconst UseGetAllPurchaseOrder = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPurchaseOrderList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default UseGetAllPurchaseOrder;","import { useState } from 'react';\r\nimport { deletePurchaseOrder } from '../queries';\r\n\r\nconst useDeletePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    const response = await deletePurchaseOrder(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n    } else {\r\n      setStatus(false);\r\n    }\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useDeletePurchaseOrder;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space, notification, Input, Select } from 'antd';\r\nimport UseGetAllPurchaseOrder from '../../../state/pharmacy/hooks/UseGetAllPurchaseOrders';\r\nimport useDeletePurchaseOrder from '../../../state/pharmacy/hooks/useDeletePurchaseOrder';\r\nimport { getRenderPropValue } from 'antd/lib/_util/getRenderPropValue';\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n// ];\r\n\r\nfunction resolveTag(tag) {\r\n    if (tag == \"cancelled\") {\r\n        return \"red\";\r\n    } else if (tag == \"orderPlaced\") {\r\n        return \"orange\";\r\n    } else {\r\n        return \"green\";\r\n    }\r\n\r\n}\r\nconst PurchaseOrder = ({ location, history }) => {\r\n\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Invoice No.',\r\n            dataIndex: 'invoiceNumber',\r\n            key: 'invoiceNumber',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Order Date',\r\n            dataIndex: 'orderDate',\r\n            key: 'orderDate',\r\n            render: text => <a>{text}</a>,\r\n            sorter: (a, b) => a.orderDate - b.orderDate,\r\n        },\r\n        {\r\n            title: 'Delivery Date',\r\n            dataIndex: 'deliveryDate',\r\n            key: 'deliveryDate',\r\n            sorter: (a, b) => a.deliveryDate - b.deliveryDate,\r\n        },\r\n        {\r\n            title: 'Supplier',\r\n            dataIndex: 'supplier',\r\n            key: 'supplier',\r\n            filters: [\r\n                {\r\n                    text: 'ACME',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'GSK',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Medimex',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.supplier == value,\r\n        },\r\n        {\r\n            title: 'Store',\r\n            dataIndex: 'store',\r\n            key: 'store',\r\n        },\r\n        {\r\n            title: 'Total Amount',\r\n            dataIndex: 'totalAmount',\r\n            key: 'totalAmount',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color={resolveTag(tag)} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Cancelled',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Order Placed',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=edit' + '&purchaseOrderId=' + record.purchaseOrderId });\r\n                    }}>View</a>\r\n                    <a onClick={() => deletePurchaseOrder(record)}>Cancel</a>\r\n                    {/* <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>edit</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [filterValue, setfilterValue] = useState(\"invoiceNumber\");\r\n    const [purchaseOrders, isLoading, setGetAllPurchaseOrder] = UseGetAllPurchaseOrder();\r\n    const [status, setDeletePurchaseOrder] = useDeletePurchaseOrder();\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n        setGetAllPurchaseOrder();\r\n    }, []);\r\n\r\n    function deletePurchaseOrder(record) {\r\n        const body = {\r\n            purchaseOrderId: record.purchaseOrderId,\r\n            supplierName: null,\r\n            orderDate: null,\r\n            storeName: null,\r\n            // totalAmount: null,\r\n            deliveryDate: null,\r\n            rol: null,\r\n            productDetails: null,\r\n        };\r\n        setDeletePurchaseOrder(body);\r\n    }\r\n    if (purchaseOrders.length > 0) {\r\n        data = purchaseOrders.map((order, index) => {\r\n            return {\r\n                key: index,\r\n                invoiceNumber: order.invoiceNumber,\r\n                purchaseOrderId: order.purchaseOrderId,\r\n                orderDate: (new Date(order.orderDate)).toDateString(),\r\n                deliveryDate: (new Date(order.deliveryDate)).toDateString(),\r\n                supplier: order.supplierName,\r\n                store: order.storeName,\r\n                totalAmount: order.totalAmount,\r\n                status: (order.status != null ? [order.status] : ['Order Placed'])\r\n            };\r\n        });\r\n    }\r\n    function onOrderSearch(searchValue) {\r\n\r\n        if (searchValue == '') {\r\n            // setRequest();\r\n            // // setShowPatient(\"all\");\r\n        } else if (filterValue == \"invoiceNumber\") {\r\n            // setPatientSearchbyId(searchValue);\r\n            // setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"supplierName\") {\r\n            // setPatientSearchbyName(searchValue);\r\n            // setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"invoiceNumber\">Invoice Number</Option>\r\n                    <Option value=\"supplierName\">Supplier</Option>\r\n                    {/* <Option value=\"SupplierName\">Supplier Name</Option> */}\r\n                </Select>\r\n                <Input.Search onSearch={onOrderSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getSuppliersList } from '../queries';\r\n\r\nconst useGetAllSuppliers = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getSuppliersList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetAllSuppliers;","import { useState } from 'react';\r\nimport { getPurchaseOrderDetails } from '../queries';\r\n\r\nconst useGetPurchaseOrderDetails = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPurchaseOrderDetails(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPurchaseOrderDetails;","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useSavePurchaseOrder from '../../../state/pharmacy/hooks/useSavePurchaseOrder';\r\nimport useGetPurchaseOrderDetails from '../../../state/pharmacy/hooks/useGetPurchaseOrderDetails';\r\nimport { savePurchaseOrder } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPurchaseOrder = ({ location, history }) => {\r\n    const medicineMap = new Map();\r\n    let options = [];\r\n    const supplierOptions = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    let index = 0;\r\n    const [purchaseDetailsForm] = Form.useForm();\r\n    const [productListForm] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n    const [suppliers, isLoadings, setSupplierSearch] = useGetAllSuppliers();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [orderDetail, setGetPurchaseOrderDetails] = useGetPurchaseOrderDetails();\r\n    // const [purchaseOrderList, isLoading1, setPurchaseOrderListFetch] = UseGetAllPurchaseOrder();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setSupplierSearch();\r\n        if (queryParams.mode == \"edit\" && queryParams.purchaseOrderId != null) {\r\n            setGetPurchaseOrderDetails(queryParams.purchaseOrderId);\r\n        }\r\n    }, []);\r\n\r\n\r\n    if (orderDetail != null) {\r\n        console.log(orderDetail);\r\n        purchaseDetailsForm.setFieldsValue({\r\n            user: {\r\n                supplierName: orderDetail.supplierName,\r\n                orderDate: moment(new Date(orderDetail.orderDate), 'YYYY-MM-DD'),\r\n                storeName: orderDetail.storeName,\r\n                status: orderDetail.status,\r\n                invoiceNumber: orderDetail.invoiceNumber,\r\n                deliveryDate: moment(new Date(orderDetail.deliveryDate), 'YYYY-MM-DD'),\r\n                rol: orderDetail.rol\r\n            }\r\n        });\r\n        productListForm.setFieldsValue({\r\n            user: {\r\n                totalAmount: orderDetail.totalAmount,\r\n                totalGST: orderDetail.totalGST,\r\n                totalDiscount: orderDetail.totalDiscount,\r\n            }\r\n        });\r\n        if (orderDetail.productDetails != null) {\r\n            const productList = [];\r\n            orderDetail.productDetails.forEach(product => {\r\n                productList.push({\r\n                    productId: product.productId,\r\n                    productName: product.productName,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    batchNumber: product.batchNumber,\r\n                    expiryDate: moment(new Date(product.expiryDate), 'YYYY-MM-DD'),\r\n                    discount: product.discount,\r\n                    tax: product.tax,\r\n                });\r\n            });\r\n            productListForm.setFieldsValue({\r\n                users: [...productList]\r\n            });\r\n        }\r\n\r\n    }\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach(supplier => {\r\n            supplierOptions.push({ value: supplier.supplierName, label: supplier.supplierName });\r\n        });\r\n    }\r\n    if (medicines.length > 0) {\r\n        medicines.forEach(medicine => {\r\n            options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            medicineMap.set(medicine.medicineName, medicine);\r\n        });\r\n    }\r\n    if (queryParams.mode == \"prefetch\") {\r\n\r\n        productListForm.setFieldsValue({\r\n            users: [{\r\n                productId: null,\r\n                productName: queryParams.medicineName,\r\n                quantity: 1,\r\n                unit: \"\",\r\n                purchaseCost: \"\",\r\n                batchNumber: \"\",\r\n                expDate: \"\",\r\n                discount: \"\",\r\n                tax: \"\"\r\n            }]\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const purchaseDetails = purchaseDetailsForm.getFieldsValue().user;\r\n        const productList = productListForm.getFieldsValue().users;\r\n        const finalCharges = productListForm.getFieldsValue().user;\r\n        const body = {\r\n            purchaseOrderId: queryParams.purchaseOrderId,\r\n            supplierName: purchaseDetails.supplierName,\r\n            orderDate: purchaseDetails.orderDate,\r\n            storeName: purchaseDetails.storeName,\r\n            invoiceNumber: purchaseDetails.invoiceNumber,\r\n            totalAmount: finalCharges.totalAmount,\r\n            totalGST: finalCharges.totalGST,\r\n            totalDiscount: finalCharges.totalDiscount,\r\n            deliveryDate: purchaseDetails.deliveryDate,\r\n            rol: purchaseDetails.rol,\r\n            status: purchaseDetails.status,\r\n            productDetails: [],\r\n        };\r\n        if (productList != null && productList.length > 0) {\r\n            productList.forEach(product => {\r\n                const medicine = medicineMap.get(product.productName);\r\n                body.productDetails.push({\r\n                    productId: product.productId,\r\n                    purchaseOrderId: queryParams.purchaseOrderId,\r\n                    medicineId: medicine.medicineId,\r\n                    productName: product.productName,\r\n                    batchNumber: product.batchNumber,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    discount: product.discount,\r\n                    tax: product.tax\r\n                });\r\n            });\r\n        }\r\n        savePurchaseOrder(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n        // setMedicineSearch();\r\n    }\r\n\r\n    const onSearchSupplier = (value) => {\r\n        // setSupplierSearch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/purchaseOrderList' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Item list</Button>\r\n            <br /><br /><br />\r\n            <Form form={purchaseDetailsForm}  {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'rol']} label=\"ROL\">\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear>\r\n                                <Option value=\"orderPlaced\">Order Placed</Option>\r\n                                <Option value=\"delivered\">Delivered</Option>\r\n                                <Option value=\"cancelled\">Cancelled</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'supplierName']} label=\"Suppliers Name\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                onSearch={onSearchSupplier}\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                                options={supplierOptions}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Supplier name\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'deliveryDate']} label=\"Delivery Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'invoiceNumber']} label=\"Invoice Number\">\r\n                            <Input style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'orderDate']} label=\"Order Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'storeName']} label=\"Store Name\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select Store\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'salesStartDate']} label=\"Sales Start Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salesEndDate']} label=\"Sales End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form form={productListForm} name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'batchNumber']}\r\n                                            fieldKey={[field.fieldKey, 'batchNumber']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 150 }} placeholder=\"Batch No.\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'unit']}\r\n                                            fieldKey={[field.fieldKey, 'unit']}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Unit\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">bottle</Option>\r\n                                                <Option value=\"1-1-0\">box</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'purchaseCost']}\r\n                                            fieldKey={[field.fieldKey, 'purchaseCost']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 150 }} placeholder=\"Purchase Cost\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'expiryDate']}\r\n                                            fieldKey={[field.fieldKey, 'expiryDate']}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'discount']}\r\n                                            fieldKey={[field.fieldKey, 'discount']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"discount\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'tax']}\r\n                                            fieldKey={[field.fieldKey, 'tax']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"tax\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalGST']} label=\"Total GST\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalDiscount']} label=\"Total Discount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPurchaseOrder;\r\n","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst IndentPreparation = () => {\r\n    let options = [];\r\n    let index = 0;\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientId']} label=\"Patient Search\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Reg. No\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'indentDate']} label=\"Indent Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientName']} label=\"Patient Name\">\r\n                            <Input placeholder=\"Patient Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'consultantName']} label=\"Consultant Name\">\r\n                            <Input placeholder=\"Consultant Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'mobileNumber']} label=\"Mobile\">\r\n                            <Input placeholder=\"Mobile Number\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'comments']} label=\"Comments\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'address']} label=\"Address\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'uom']}\r\n                                            fieldKey={[field.fieldKey, 'uom']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 125 }} placeholder=\"UOM\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'mrp']}\r\n                                            fieldKey={[field.fieldKey, 'mrp']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"MRP\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'stockQuantity']}\r\n                                            fieldKey={[field.fieldKey, 'stockQuantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Stock Quantity\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item htmlType=\"submit\">\r\n                            <Button type=\"primary\">\r\n                                Bill\r\n                            </Button>\r\n                            <Button type=\"primary\" style={{ marginLeft: '15px' }} >\r\n                                Add New\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default IndentPreparation;","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table, Space } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useAddSupplier from '../../../state/pharmacy/hooks/useAddSupplier';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\nimport { saveSupplier } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\n\r\nconst ManageSupplier = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    const [selectedRowId, setSelectedRowId] = useState(\"\");\r\n    const [suppliers, isLoadings, setSupplierSearch] = useGetAllSuppliers();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        setSupplierSearch();\r\n    }, []);\r\n    const onFinish = formData => {\r\n        const body = {\r\n            \"supplierId\": selectedRowId,\r\n            \"supplierName\": formData.name,\r\n            \"email\": formData.email,\r\n            \"phoneNumber\": formData.phone,\r\n            \"address\": formData.address,\r\n        };\r\n        saveSupplier(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Supplier added successfully',\r\n                duration: 3\r\n            });\r\n            setSupplierSearch();\r\n            clearForm();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function clearForm() {\r\n        setSelectedRowId(null);\r\n        form.setFieldsValue({\r\n            \"name\": \"\",\r\n            \"email\": \"\",\r\n            \"phone\": \"\",\r\n            \"address\": \"\",\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'supplierName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email'\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber'\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => editSupplier(record)}>Edit</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    function editSupplier(record) {\r\n        setSelectedRowId(record.supplierId);\r\n        form.setFieldsValue({\r\n            \"name\": record.supplierName,\r\n            \"email\": record.email,\r\n            \"phone\": record.phoneNumber,\r\n            \"address\": record.address,\r\n        });\r\n    }\r\n\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach((supplier, index) => {\r\n            data.push({\r\n                key: index,\r\n                supplierId: supplier.supplierId,\r\n                supplierName: supplier.supplierName,\r\n                email: supplier.email,\r\n                phoneNumber: supplier.phoneNumber,\r\n                address: supplier.address,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Supplier name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[{ required: false, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    rules={[{ required: false, message: 'Please input contact!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Contact\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"address\"\r\n                    rules={[{ required: false, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Address\" />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Supplier\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" onClick={clearForm}> Clear form </Button>\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageSupplier;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space } from 'antd';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Patient Reg No',\r\n        dataIndex: 'regNo',\r\n        key: 'regNo',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Patient Name',\r\n        dataIndex: 'patientName',\r\n        key: 'patientName',\r\n    },\r\n    {\r\n        title: 'Indent Date and Time',\r\n        dataIndex: 'indentDate',\r\n        key: 'indentDate',\r\n    },\r\n    {\r\n        title: 'Submitted By',\r\n        dataIndex: 'submittedBy',\r\n        key: 'submittedBy',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n    },\r\n    {\r\n        key: '2',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n    {\r\n        key: '3',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n];\r\n\r\nconst IndentList = () => {\r\n    return (\r\n        <>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IndentList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\nconst Certificates = () => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'name']} label=\"Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'guardianName']} label=\"Guardian Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'relation']} label=\"Relation\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'dateAndTime']} label=\"Date and time\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <ReactQuill theme=\"snow\" value={value} onChange={setValue} />\r\n\r\n            <Row style={{ textAlign: 'right', marginTop: 30 }}>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Generate\r\n                            </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Certificates;\r\n","import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Form, Input, Switch, InputNumber, Row, Select, Space } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPackage = () => {\r\n    let options = [];\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"dashed\" icon={<PlusOutlined />}>All Packages</Button>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageName']} label=\"Package Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageEndDate']} label=\"Package End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packagePrice']} label=\"Package Price\" rules={[{ required: true, type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\" >\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"price\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPackage;\r\n","import React, { useEffect } from 'react';\r\n\r\nconst InProgress = () => {\r\n    return (\r\n        <>\r\n        <h1 style={{fontSize: '56px'}}>The Page is in Progress ...</h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InProgress;\r\n","import { useState } from 'react';\r\nimport { getPrescriptionByAppointmentId } from '../queries';\r\n\r\nconst useGetPrescriptionByAppointmentId = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (appointmentId) => {\r\n        const response = await getPrescriptionByAppointmentId(appointmentId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPrescriptionByAppointmentId;","import React, { useRef } from 'react';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\nimport './printPrescription.css';\r\nexport class PrintPrescription extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const appointmentId = this.props.appointmentId;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const patientVitals = this.props.patientVitals;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        let medicineTable = \"\";\r\n        let testTable = \"\";\r\n        if (this.props.medicineList != null && this.props.medicineList.length > 0) {\r\n            const medicineList = this.props.medicineList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.medicineName}</td>\r\n                        <td>{item.dosage}</td>\r\n                        <td>{item.days}</td>\r\n                        <td>{item.comment}</td>\r\n                    </tr>)\r\n            });\r\n            medicineTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed medicines</h3>\r\n                <table class=\"itemTable\" >\r\n                    <tr>\r\n                        <th>Medicine Name</th>\r\n                        <th>Dosage</th>\r\n                        <th>Days</th>\r\n                        <th>Comment</th>\r\n                    </tr>\r\n                    {medicineList}\r\n                </table>\r\n            </div>\r\n        }\r\n        if (this.props.testList != null && this.props.testList.length > 0) {\r\n            const testList = this.props.testList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.testName}</td>\r\n                        <td>{item.dateOfBooking}</td>\r\n                        <td>{item.dateOfResult}</td>\r\n                        <td>{item.reportDesc}</td>\r\n                        <td>{item.testDesc}</td>\r\n                    </tr>)\r\n            });\r\n            testTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed tests</h3>\r\n                <table class=\"itemTable\">\r\n                    <tr>\r\n                        <th>Test Name</th>\r\n                        <th>Test Date</th>\r\n                        <th>Report Date</th>\r\n                        <th>Doctor comment</th>\r\n                        <th>Report summary</th>\r\n                    </tr>\r\n                    {testList}\r\n                </table>\r\n            </div>\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Info</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>{patientDetails.patientName}</th>\r\n                            <td>Age</td>\r\n                            <td>{patientDetails.age}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>PatientId</td>\r\n                            <td>{patientId}</td>\r\n                            <td>AppointmentId</td>\r\n                            <td>{appointmentId}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Date</td>\r\n                            <td>{todaysDate}</td>\r\n                            <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Vitals</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Height : {patientVitals.height}</th>\r\n                            <td>Weight : {patientVitals.weight}</td>\r\n                            <td>Bp : {patientVitals.Bp}</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Temperature : {patientVitals.temperature}</td>\r\n                            <td>Disease description : {patientVitals.diseaseDesc}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            {/* <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td> */}\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    {medicineTable}\r\n                    {testTable}\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Appointment summary : {patientVitals.advise}</th>\r\n                        </tr>\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        {/* <div>Cashier Signature</div> */}\r\n                        <div style={{ float: 'right' }}>Doctor's Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Table, Descriptions, Button } from 'antd';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useGetPrescriptionByAppointmentId from '../../../state/prescription/hooks/useGetPrescriptionByAppointmentId';\r\nimport queryString from 'query-string';\r\nimport usePatientById from '../../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../../patientDetails';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport { PrintPrescription } from '../printPrescription';\r\nconst medicinecolumns = [\r\n    {\r\n        title: 'Medicine Name',\r\n        dataIndex: 'medicineName',\r\n    },\r\n    {\r\n        title: 'Dosage',\r\n        dataIndex: 'dosage',\r\n    },\r\n    {\r\n        title: 'Days',\r\n        dataIndex: 'days',\r\n    },\r\n    {\r\n        title: 'Comment',\r\n        dataIndex: 'comment',\r\n    },\r\n];\r\n\r\nconst testcolumns = [\r\n    {\r\n        title: 'Test Name',\r\n        dataIndex: 'testName',\r\n    },\r\n    {\r\n        title: 'Test Date',\r\n        dataIndex: 'dateOfBooking',\r\n    },\r\n    {\r\n        title: 'Report Date',\r\n        dataIndex: 'dateOfResult',\r\n    },\r\n    {\r\n        title: 'Doctor comment',\r\n        dataIndex: 'testDesc',\r\n\r\n    },\r\n    {\r\n        title: 'Report Summary',\r\n        dataIndex: 'reportDesc',\r\n\r\n    }\r\n];\r\n\r\n\r\nconst ViewPrescription = ({ location, history }) => {\r\n    const medicineData = [];\r\n    const testData = [];\r\n\r\n    let appointmentDetails = {\r\n        appointmentId: '',\r\n        diseaseDesc: '',\r\n        advise: '',\r\n        patientId: '',\r\n        patientName: '',\r\n        doctorId: '',\r\n        height: '',\r\n        weight: '',\r\n        Bp: '',\r\n        createdAt: '',\r\n        appointmentDate: '',\r\n        timeSlot: '',\r\n        status: '',\r\n        temperature: ''\r\n    };\r\n\r\n    const queryParams = queryString.parse(location.search);\r\n    const [prescriptionDetails, setPrescriptionDetails] = useGetPrescriptionByAppointmentId();\r\n    const [patientDetails, isLoading, setPatientSearchById] = usePatientById(queryParams.patientId);\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        setPrescriptionDetails(queryParams.appointmentId);\r\n        setPatientSearchById(queryParams.patientId);\r\n    }, []);\r\n\r\n    if (prescriptionDetails != null) {\r\n        console.log(prescriptionDetails);\r\n        if (prescriptionDetails.appointmentDto != null) {\r\n            const appointmentDto = prescriptionDetails.appointmentDto;\r\n            console.log('le bhgat', appointmentDto);\r\n            appointmentDetails = {\r\n                appointmentId: appointmentDto.appointmentId,\r\n                diseaseDesc: appointmentDto.diseaseDesc,\r\n                advise: appointmentDto.advise,\r\n                patientId: appointmentDto.patientId,\r\n                patientName: appointmentDto.patientName,\r\n                doctorId: appointmentDto.doctorId,\r\n                height: appointmentDto.height,\r\n                weight: appointmentDto.weight,\r\n                Bp: appointmentDto.Bp,\r\n                createdAt: appointmentDto.createdAt,\r\n                appointmentDate: appointmentDto.appointmentDate,\r\n                timeSlot: appointmentDto.timeSlot,\r\n                status: appointmentDto.status,\r\n            }\r\n        }\r\n\r\n        if (prescriptionDetails.prescribedMedsDtoList != null) {\r\n            prescriptionDetails.prescribedMedsDtoList.forEach((medicine, index) => {\r\n                medicineData.push({\r\n                    key: medicine.medName + index,\r\n                    medicineName: medicine.medName,\r\n                    dosage: medicine.dosage,\r\n                    days: medicine.days,\r\n                    comment: medicine.comment\r\n\r\n                });\r\n            });\r\n        }\r\n        if (prescriptionDetails.prescribedTestingDtoList != null) {\r\n            prescriptionDetails.prescribedTestingDtoList.forEach((test, index) => {\r\n                testData.push({\r\n                    key: test + index,\r\n                    testName: test.testDesc,\r\n                    dateOfBooking: test.dateOfBooking,\r\n                    dateOfResult: test.dateOfResult,\r\n                    reportDesc: test.reportDesc,\r\n                    testDesc: test.comment,\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" style={{ float: \"right\" }} shape=\"round\" icon={<PrinterOutlined />} size=\"default\" onClick={handlePrint}>\r\n                Print\r\n        </Button>\r\n            <div style={{ display: 'none' }}>\r\n                <PrintPrescription ref={componentRef} patientVitals={appointmentDetails} appointmentId={appointmentDetails.appointmentId} patientId={queryParams.patientId} medicineList={medicineData} testList={testData} patientDetails={patientDetails} />\r\n            </div>\r\n            <h4>Patient Info</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Name\">{patientDetails.patientName} </Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"AppointmentId\">{appointmentDetails.appointmentId}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{patientDetails.visitType}</Descriptions.Item>\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Patient Vitals</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Height\">{appointmentDetails.height}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Weight\">{appointmentDetails.weight}</Descriptions.Item>\r\n                <Descriptions.Item label=\"BP\">{appointmentDetails.Bp}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Temperature\">{appointmentDetails.temperature}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Disease description\">{appointmentDetails.diseaseDesc}</Descriptions.Item>\r\n\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Prescribed Medicines</h4>\r\n            <Table columns={medicinecolumns} dataSource={medicineData} size=\"middle\" />\r\n            <hr />\r\n            <h4>Prescribed Tests</h4>\r\n            <Table columns={testcolumns} dataSource={testData} size=\"middle\" />\r\n            <hr />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Appointment Summary\">{appointmentDetails.advise}</Descriptions.Item>\r\n            </Descriptions>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default ViewPrescription;","export const registration = { label: \"Registration\", link: \"/registration\" }\r\nexport const patientSearch = { label: \"Search Patients\", link: \"/patientSearch\" }\r\nexport const doctorAppointment = { label: \"Doctor Appointment\", link: \"/doctorAppointment\" }\r\nexport const addDoctor = { label: \"Add Doctors\", link: \"/addDoctor\" }\r\nexport const addMedicine = { label: \"Add Medicines\", link: \"/addMedicine\" }\r\nexport const addTest = { label: \"Add Test\", link: \"/addTest\" }\r\nexport const serviceCatalogue = { label: \"Service Catalogue\", link: \"/inProgress\" }\r\nexport const addNewMedicine = { label: \"Add New Item\", link: \"/addNewMedicine\" }\r\nexport const manageMedicines = { label: \"Manage Inventory\", link: \"/manageMedicines\" }\r\nexport const purchaseOrderList = { label: \"Purchase Order List\", link: \"/purchaseOrderList\" }\r\nexport const newPurchaseOrder = { label: \"New Purchase Order\", link: \"/newPurchaseOrder\" }\r\nexport const manageSuppliers = { label: \"Manage Suppliers\", link: \"/manageSuppliers\" }\r\nexport const billing = { label: \"Billing\", link: \"/billing\" };\r\nexport const billSearch = { label: \"Bill Search\", link: \"/billSearch\" };\r\nexport const appointment = { label: \"Appointment\", link: \"/appointment\" };\r\nexport const certificates = { label: \"Certificates\", link: \"/certificates\" };\r\nexport const packageManagement = { label: \"Package Management\", link: \"/package\" };\r\nexport const canteen = { label: \"Canteen\", link: \"/canteen\" };\r\nexport const pharmacy = { label: \"Pharmacy\", link: \"/pharmacy\" };\r\nexport const reimbursements = { label: \"Reimbursements\", link: \"/inProgress\" };\r\nexport const insurance = { label: \"Insurance\", link: \"/inProgress\" };\r\nexport const certificateCreation = { label: \"Certificate creation\", link: \"/inProgress\" };\r\nexport const referrals = { label: \"Referrals\", link: \"/inProgress\" };\r\nexport const reports = { label: \"Reports\", link: \"/reports\" };\r\n\r\nexport const doctorRoutes = [doctorAppointment];\r\nexport const pharmacyRoutes = [addNewMedicine, manageMedicines, purchaseOrderList, newPurchaseOrder, manageSuppliers, billing, billSearch];\r\nexport const inventoryRoutes = [addNewMedicine, manageMedicines, purchaseOrderList, newPurchaseOrder, manageSuppliers, billing, billSearch, reports];\r\nexport const receptionRoutes = [registration, patientSearch, appointment, billing, billSearch];\r\nexport const upcomingRoutes = [reports, certificates, packageManagement, canteen, pharmacy, reimbursements, insurance, certificateCreation, referrals];\r\nexport const adminRoutes = [addMedicine, addTest, addDoctor, serviceCatalogue]; \r\n","import { ADMIN, DOCTOR, INVENTORY, PHARMACY, RECEPTION, UPCOMING } from \"../utils/roles\";\r\nimport { adminRoutes, doctorRoutes, inventoryRoutes, pharmacyRoutes, receptionRoutes, upcomingRoutes } from \"./allRoutesData\";\r\n\r\nconst map = new Map();\r\n\r\nmap.set(ADMIN, adminRoutes);\r\nmap.set(DOCTOR, doctorRoutes);\r\nmap.set(PHARMACY, pharmacyRoutes);\r\nmap.set(INVENTORY, inventoryRoutes);\r\nmap.set(RECEPTION, receptionRoutes);\r\nmap.set(UPCOMING, upcomingRoutes);\r\n\r\nexport var getRoutes = function (roleList) {\r\n    const routes = {};\r\n    roleList.forEach(role => {\r\n        routes[role] = map.get(role);\r\n    });\r\n    return routes;\r\n}","import React, { useRef } from 'react';\r\nimport '../components/mainBillView.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class MainBillView extends React.Component {\r\n    render() {\r\n        const billItemList = this.props.billItemList;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = billItemList.map(item => {\r\n            let itemList = [];\r\n            if (item['billDetailList']) {\r\n                itemList = item['billDetailList'].map(billItem => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{(billItem.purchaseType == \"pharmacy-return\" ? billItem.itemName + '(' + billItem.purchaseType + ')' : billItem.itemName)}</td>\r\n                            <td>{billItem.quantity}</td>\r\n                            <td>{billItem.mrp}</td>\r\n                            <td>{billItem.gstPercentage}</td>\r\n                            <td>{billItem.concessionPercentage}</td>\r\n                            <td>{billItem.cost}</td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            }\r\n            return (\r\n                <div style={{ width: '100%' }}>\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Bill Id:</span> {item.billId} &nbsp;&nbsp;\r\n                    <span>Bill Date:</span> {new Date(item.createdAt).toDateString()} &nbsp;&nbsp;\r\n                    <span>Payment Mode:</span> {item.paymentMode}\r\n                    </div>\r\n                    <br />\r\n                    <table class=\"itemTable\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(%)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemList}\r\n                        </tbody>\r\n                    </table>\r\n                    <br />\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Total Amount :</span> {item.totalCost} &nbsp;&nbsp;\r\n                        <span>Total Discount :</span>  {item.totalDiscount} &nbsp;&nbsp;\r\n                        <span>Total GST :</span>  {item.totalGST}\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    {itemArray}\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import { Space, Table, Button, Row, Col, Tag, notification } from 'antd';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport moment from 'moment';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport BillSearchComp from '../billing/components/billSearch';\r\nimport { getBillDetails } from '../billing/services';\r\nimport { MainBillView } from './components/mainBillView';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { getBillListByDateRange } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst BillSearch = ({ history }) => {\r\n    const columns = [\r\n        {\r\n            title: 'Bill Id',\r\n            dataIndex: 'billId',\r\n            key: 'billId',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Bill Date',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n        },\r\n        {\r\n            title: 'Bill Total',\r\n            dataIndex: 'totalCost',\r\n            key: 'totalCost',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'paymentStatus',\r\n            key: 'paymentStatus',\r\n            filters: [\r\n                {\r\n                    text: 'dues',\r\n                    value: 'dues',\r\n                },\r\n                {\r\n                    text: 'paid',\r\n                    value: 'paid',\r\n                }\r\n            ],\r\n            onFilter: (value, record) => record.paymentStatus == value,\r\n            render: text => (text == 'paid' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/billing', search: '?context=edit' + '&billId=' + record.billId });\r\n                    }}>View/Edit</a>\r\n                    {/* <a onClick={() => {\r\n                        printSingleBill(record);\r\n                    }}>Print</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [data, setData] = useState([]);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [searchCriteria, setSearchFilter] = useState({});\r\n    const [] = useState({});\r\n    let mainBillViewButton = \"\";\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        onBillSearch('', 'patientId')\r\n    }, []);\r\n\r\n    if (searchCriteria.searchFilter == \"patientId\") {\r\n        console.log(searchCriteria);\r\n        mainBillViewButton = <Button type=\"primary\" onClick={viewMainBill}>View Main Bill</Button>;\r\n    }\r\n\r\n    function viewMainBill() {\r\n        handlePrint();\r\n    }\r\n    function changePatientdetails(patientId) {\r\n        getPatientById(patientId).then(patientDetails => {\r\n            setPatientDetails(patientDetails);\r\n        }).catch(() => {\r\n\r\n        });\r\n    }\r\n\r\n    function onBillSearch(searchValue, searchFilter) {\r\n        if (searchFilter != \"dateRange\") {\r\n            getBillDetails(searchValue, searchFilter).then(response => {\r\n                if (response) {\r\n                    setSearchFilter({\r\n                        searchFilter: searchFilter,\r\n                        searchValue: searchValue\r\n                    });\r\n                    if (searchFilter == \"patientId\") {\r\n                        changePatientdetails(searchValue);\r\n                    }\r\n                    if (response) {\r\n                        const temp = response.map((data, index) => {\r\n                            return {\r\n                                ...data, createdAt: new Date(data.createdAt).toDateString(), key: index\r\n                            }\r\n                        });\r\n                        setData([...temp]);\r\n                    }\r\n\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter} ${searchValue}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: `Error while searching ${searchFilter} ${searchValue}`,\r\n                    duration: 3\r\n                });\r\n            });\r\n        } else {\r\n            getBillListByDateRange(searchValue[1], searchValue[0], 'PHARMACY').then(data => {\r\n                console.log(data);\r\n                if (data) {\r\n                    const temp = data.map((item, index) => {\r\n                        return {\r\n                            ...item, createdAt: new Date(item.createdAt).toDateString(), key: index\r\n                        }\r\n                    });\r\n                    setData([...temp]);\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{ display: 'none' }}>\r\n                <MainBillView ref={componentRef} billItemList={data} patientDetails={patientDetails} patientId={searchCriteria.searchValue} />\r\n                {/* <BillPrint ref={componentRef} itemList={billPrintData} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} /> */}\r\n            </div>\r\n            <Row gutter={24}>\r\n                <Col span={10}>\r\n                    <BillSearchComp onSearch={onBillSearch} />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button type=\"primary\" onClick={() => { history.push({ pathname: '/home/billing' }) }}>Create New bill</Button>\r\n                </Col>\r\n                <Col span={4}>\r\n                    {mainBillViewButton}\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BillSearch;","import { Space, Table, Input, Select, Typography, notification, Tag } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getAllDoctors } from '../../../state/patientSearch/queries';\r\nimport { getPharmacyMedicineListByName } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nimport { departments } from '../../../utils/departmentList';\r\nconst { Option } = Select;\r\n\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         name: 'Paraceta',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217',\r\n//         stock: 100\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n// ];\r\n\r\nconst ViewDoctors = ({ location, history }) => {\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'doctorName',\r\n            key: 'doctorName',\r\n        },\r\n        {\r\n            title: 'Department',\r\n            dataIndex: 'department',\r\n            key: 'department',\r\n            filters: departments.map(data => {\r\n                return {\r\n                    'text': data,\r\n                    'value': data,\r\n                }\r\n            }),\r\n            onFilter: (value, record) => record.department == value,\r\n        },\r\n        {\r\n            title: 'Fees',\r\n            dataIndex: 'consulationCharge',\r\n            key: 'consulationCharge',\r\n        },\r\n        {\r\n            title: 'Speciality',\r\n            dataIndex: 'speciality',\r\n            key: 'speciality',\r\n        },\r\n        // {\r\n        //     title: 'Available',\r\n        //     dataIndex: 'availability',\r\n        //     key: 'availability',\r\n        //     render: text => (text == 'AVAILABLE' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n        // },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addDoctor', search: '?mode=edit' + '&doctorId=' + record.doctorId });\r\n                    }}>Edit</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [doctorList, setDoctorList] = useState([]);\r\n    const [filterValue, setfilterValue] = useState(\"doctorName\");\r\n    useEffect(() => {\r\n        getDoctorList();\r\n    }, []);\r\n\r\n    data = doctorList;\r\n    function onDoctorSearch(value) {\r\n        // getPharmacyMedicineListByName(value).then(data => {\r\n        //     if (data) {\r\n        //         setMedicineData([...data]);\r\n        //     }\r\n        // }).catch(() => {\r\n        //     notification[\"error\"]({\r\n        //         message: 'Error',\r\n        //         description: `Error while searching`,\r\n        //         duration: 3\r\n        //     });\r\n        // });\r\n    }\r\n\r\n    // function deleteMedicineRecord(medicineId) {\r\n    //     deleteMedicine(medicineId).then(data => {\r\n    //         getAllMedicines();\r\n    //         notification[\"success\"]({\r\n    //             message: 'Success',\r\n    //             description: 'Medicine deleted successfully',\r\n    //             duration: 3\r\n    //         });\r\n    //     }).catch(err => {\r\n    //         notification[\"error\"]({\r\n    //             message: 'Error',\r\n    //             description: SERVER_ERROR,\r\n    //             duration: 3\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    function getDoctorList() {\r\n        getAllDoctors().then(data => { setDoctorList(data); }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"doctorName\">Doctor Name</Option>\r\n                    <Option value=\"departmentName\">Department Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onDoctorSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewDoctors;","import React, { useEffect, useState } from 'react';\r\nimport { Card, Statistic, Row, Col, Button, Select } from 'antd';\r\nimport { Bar } from '@ant-design/charts';\r\nimport { Pie } from '@ant-design/charts';\r\nimport { RingProgress } from '@ant-design/charts';\r\nimport { Line } from '@ant-design/charts';\r\nconst { Option } = Select;\r\nconst Reports = () => {\r\n    const [linedata, setLineData] = useState([]);\r\n    useEffect(() => {\r\n        asyncFetch();\r\n    }, []);\r\n    const asyncFetch = () => {\r\n        fetch('https://gw.alipayobjects.com/os/bmw-prod/1d565782-dde4-4bb6-8946-ea6a38ccf184.json')\r\n            .then((response) => response.json())\r\n            .then((json) => setLineData(json))\r\n            .catch((error) => {\r\n                console.log('fetch data failed', error);\r\n            });\r\n    };\r\n    var lineConfig = {\r\n        data: linedata,\r\n        padding: 'auto',\r\n        xField: 'Date',\r\n        yField: 'scales',\r\n        xAxis: { tickCount: 5 },\r\n        slider: {\r\n            start: 0.1,\r\n            end: 0.5,\r\n        },\r\n    };\r\n    var bardata = [\r\n        {\r\n            year: 'Jan',\r\n            value: 38,\r\n        },\r\n        {\r\n            year: 'feb',\r\n            value: 52,\r\n        },\r\n        {\r\n            year: 'mar',\r\n            value: 61,\r\n        },\r\n        {\r\n            year: 'Apr',\r\n            value: 145,\r\n        },\r\n        {\r\n            year: 'May',\r\n            value: 48,\r\n        },\r\n    ];\r\n    var barconfig = {\r\n        data: bardata,\r\n        xField: 'value',\r\n        yField: 'year',\r\n        seriesField: 'year',\r\n        legend: { position: 'top-left' },\r\n    };\r\n    var data = [\r\n        {\r\n            type: 'india',\r\n            value: 27,\r\n        },\r\n        {\r\n            type: 'pak',\r\n            value: 25,\r\n        },\r\n        {\r\n            type: 'Aus',\r\n            value: 18,\r\n        },\r\n        {\r\n            type: 'Eng',\r\n            value: 15,\r\n        },\r\n        {\r\n            type: 'ban',\r\n            value: 10,\r\n        },\r\n        {\r\n            type: 'Sri',\r\n            value: 5,\r\n        },\r\n    ];\r\n    var config = {\r\n        appendPadding: 10,\r\n        data: data,\r\n        angleField: 'value',\r\n        width: 10,\r\n        colorField: 'type',\r\n        radius: 0.9,\r\n        label: {\r\n            type: 'inner',\r\n            offset: '-30%',\r\n            content: function content(_ref) {\r\n                var percent = _ref.percent;\r\n                return ''.concat(percent * 100, '%');\r\n            },\r\n            style: {\r\n                fontSize: 14,\r\n                textAlign: 'center',\r\n            },\r\n        },\r\n        interactions: [{ type: 'element-active' }],\r\n    };\r\n    var ringconfig = {\r\n        height: 100,\r\n        width: 100,\r\n        autoFit: false,\r\n        percent: 0.7,\r\n        color: ['#5B8FF9', '#E8EDF3'],\r\n    };\r\n    function handleChange(value) {\r\n        console.log(`selected ${value}`);\r\n    }\r\n    var dateFilters = <Select defaultValue=\"Today\" style={{ width: 120 }} onChange={handleChange}>\r\n        <Option value=\"Today\">Today</Option>\r\n        <Option value=\"week\">This week</Option>\r\n        <Option value=\"month\">This month</Option>\r\n        <Option value=\"Quarter\">This Quarter</Option>\r\n    </Select>;\r\n    return (\r\n        <>\r\n            <div className=\"site-card-wrapper\">\r\n                <Row gutter={16}>\r\n                    <Col span={8}>\r\n                        <Card title=\"Purchases\" extra={dateFilters}>\r\n                            <Row gutter={24}>\r\n                                <Col span={12}>\r\n                                    <Statistic title=\"Total Item ordered\" value={112893} />\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Statistic title=\"Cost\" value={112893} precision={2} />\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Statistic title=\"Item Returned\" value={112893} precision={2} />\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Statistic title=\"Cost\" value={112893} precision={2} />\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                        <Card title=\"InStock Item\" >\r\n                            <RingProgress {...ringconfig} />\r\n                        </Card>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Card title=\"Item Sold by category\" extra={<a href=\"#\">More</a>}>\r\n                            <Pie {...config} />\r\n                        </Card>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Card title=\"Sale by months\" extra={<a href=\"#\">expand</a>}>\r\n                            <Bar {...barconfig} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <h5>Revenue by month</h5>\r\n                <Line {...lineConfig} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Reports;\r\n","import { MedicineBoxOutlined, MenuFoldOutlined, MenuUnfoldOutlined, UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons';\r\nimport { Layout, Menu } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport AddDoctor from '../admin/addDoctor';\r\nimport Appointment from '../appointment';\r\nimport Billing from '../billing';\r\nimport Canteen from '../canteen';\r\nimport CanteenStock from '../canteen/canteenStock';\r\nimport DoctorAppointment from '../doctorAppointment';\r\nimport '../home/home.css';\r\nimport AddMedicine from '../medicine/addMedicine';\r\nimport AddTest from '../medicine/addTest';\r\nimport PackageManagement from '../package';\r\nimport PatientSearch from '../patientSearch';\r\nimport Pharmacy from '../pharmacy';\r\nimport Prescription from '../prescription';\r\nimport Registration from '../registration';\r\nimport HomeScreen from './homescreen';\r\nimport AddNewMedicine from '../pharmacy/addNewMedicine';\r\nimport ManageMedicines from '../pharmacy/manageMedicine';\r\nimport PurchaseOrder from '../pharmacy/purchaseOrderList';\r\nimport NewPurchaseOrder from '../pharmacy/newPurchaseOrder';\r\nimport IndentPreparation from '../pharmacy/indentPreparations';\r\nimport ManageSupplier from '../pharmacy/manageSupplier';\r\nimport IndentList from '../pharmacy/indentPreparations/indentList';\r\nimport Certificates from '../certificates';\r\nimport Package from '../package';\r\nimport NewPackage from '../package/newPackage';\r\nimport InProgress from '../inProgress';\r\nimport ViewPrescription from '../prescription/viewPrescription';\r\nimport { useStateValue } from '../../state';\r\nimport { getRoutes } from '../../routes/routeResolver';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\nimport BillSearch from '../billSearch';\r\nimport ViewDoctors from '../admin/viewDoctors';\r\nimport Reports from '../reports';\r\n\r\nconst { Header, Sider, Content, Footer } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Home = ({ location, history, match }) => {\r\n  const path = match.path;\r\n  let realRoutes = [];\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [itemSelected, setItemSelected] = useState(\"\");\r\n  const [routes, setRoutes] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    // setRoutes(getRoutes([RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING]));\r\n    console.log(\"saaaare roles\", auth.roles);\r\n    setRoutes(getRoutes([...auth.roles]));\r\n  }, []);\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n    setItemSelected(\"\");\r\n  };\r\n\r\n  const handleClick = e => {\r\n    setItemSelected(e.key);\r\n  };\r\n\r\n  for (const [roleName, routeList] of Object.entries(routes)) {\r\n    const childroutes = routeList.map(route => {\r\n      return generateRouteObject(route);\r\n    });\r\n    if (auth.roles.length == 1) {\r\n      realRoutes = childroutes;\r\n    } else {\r\n      realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n    }\r\n    // realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n  }\r\n  function generateRouteObject(routeObject) {\r\n    return <Menu.Item key={routeObject.label}><Link to={`${path}${routeObject.link}`}>{routeObject.label}</Link></Menu.Item>\r\n  }\r\n  function subRoutesByRole(routes, roleName) {\r\n    return <SubMenu key={roleName} icon={<UserOutlined />} title={roleName}>{routes}</SubMenu>\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Sider trigger={null} collapsible collapsed={collapsed}>\r\n        <div className=\"logo\" />\r\n        <Menu onSelect={handleClick} theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          {realRoutes}\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n            className: 'trigger',\r\n            onClick: toggle,\r\n          })}\r\n          {itemSelected}\r\n        </Header>\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            margin: '24px 16px',\r\n            padding: 24,\r\n            minHeight: 280,\r\n            overflow: 'auto',\r\n            height: '100vh',\r\n          }}\r\n        >\r\n          <Route exact path=\"/home\" component={HomeScreen} />\r\n          <Route path={`${path}/billing`} component={Billing} />\r\n          <Route path={`${path}/billSearch`} component={BillSearch} />\r\n          <Route path={`${path}/registration`} component={Registration} />\r\n          <Route path={`${path}/patientSearch`} component={PatientSearch} />\r\n          <Route path={`${path}/addDoctor`} component={AddDoctor} />\r\n          <Route path={`${path}/appointment`} component={Appointment} />\r\n          <Route path={`${path}/doctorAppointment`} component={DoctorAppointment} />\r\n          <Route path={`${path}/prescription`} component={Prescription} />\r\n          <Route path={`${path}/addMedicine`} component={AddMedicine} />\r\n          <Route path={`${path}/addTest`} component={AddTest} />\r\n          <Route path={`${path}/packages`} component={PackageManagement} />\r\n          <Route path={`${path}/canteen`} component={Canteen} />\r\n          <Route path={`${path}/canteenStock`} component={CanteenStock} />\r\n          <Route path={`${path}/pharmacy`} component={Pharmacy} />\r\n          <Route path={`${path}/addNewMedicine`} component={AddNewMedicine} />\r\n          <Route path={`${path}/manageMedicines`} component={ManageMedicines} />\r\n          <Route path={`${path}/purchaseOrderList`} component={PurchaseOrder} />\r\n          <Route path={`${path}/newPurchaseOrder`} component={NewPurchaseOrder} />\r\n          <Route path={`${path}/indentPreparation`} component={IndentPreparation} />\r\n          <Route path={`${path}/indentList`} component={IndentList} />\r\n          <Route path={`${path}/certificates`} component={Certificates} />\r\n          <Route path={`${path}/package`} component={Package} />\r\n          <Route path={`${path}/newPackage`} component={NewPackage} />\r\n          <Route path={`${path}/manageSuppliers`} component={ManageSupplier} />\r\n          <Route path={`${path}/inProgress`} component={InProgress} />\r\n          <Route path={`${path}/viewPrescription`} component={ViewPrescription} />\r\n          <Route path={`${path}/viewDoctors`} component={ViewDoctors} />\r\n          <Route path={`${path}/reports`} component={Reports} />\r\n          \r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>BayMax ©2021</Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { StateProvider } from '../state';\r\nimport { INITIAL_STATE as AUTH_INITIAL_STATE } from '../state/auth/reducers';\r\nimport { INITIAL_STATE as PRODUCT_INITIAL_STATE } from '../state/product/reducers';\r\nimport reducers from '../state/reducers';\r\nimport BaseStyles from './base-styles';\r\nimport PrivateRoute from './private-route';\r\nimport Content from '../components/content';\r\nimport Header from '../components/header';\r\nimport Login from '../views/login';\r\nimport Home from '../views/home';\r\n\r\nconst Root = props => {\r\n  const initialState = {\r\n    auth: AUTH_INITIAL_STATE,\r\n    product: PRODUCT_INITIAL_STATE,\r\n  };\r\n  return (\r\n    <StateProvider initialState={initialState} reducer={reducers}>\r\n      <BaseStyles />\r\n      <Router>\r\n        <>\r\n          <Header />\r\n          <Content>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Login} />\r\n              {/* <PrivateRoute path=\"/home\" component={Home} /> */}\r\n              <Route path=\"/home\" component={Home} />\r\n            </Switch>\r\n          </Content>\r\n        </>\r\n      </Router>\r\n    </StateProvider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Root from './routes';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nrender(<Root />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}