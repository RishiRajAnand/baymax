{"version":3,"sources":["assets/images/corousal1.jpg","assets/images/corousal2.jpg","assets/images/corousal3.jpg","assets/images/corousal4.jpg","state/index.js","state/auth/actions.js","state/auth/reducers.js","utils/roles.js","state/product/reducers.js","state/product/actions.js","state/reducers.js","routes/base-styles.js","components/content.js","components/theme.js","components/button.js","components/header.js","state/auth/hooks/useLogin.js","views/login/containers/container.js","components/form/formGroup.js","components/form/error.js","views/login/containers/form.js","components/spinner.js","views/login/index.js","utils/departmentList.js","utils/services.js","state/registration/queries.js","state/registration/hooks/useDoctorRegistration.js","views/admin/addDoctor/index.js","state/appointment/queries.js","state/appointment/hooks/useBookAppointment.js","state/patientSearch/queries.js","state/patientSearch/hooks/useGetAllDoctorByDepartment.js","state/patientSearch/hooks/useGetAllDoctors.js","state/patientSearch/hooks/usePatientSearchbyId.js","views/patientDetails/index.js","utils/timeSlot.js","utils/constants.js","views/appointment/components/appointmentCardPrint.js","views/appointment/index.js","state/pharmacy/queries.js","state/pharmacy/hooks/useGetAllPharmacyMedicines.js","state/addMedicine/queries.js","state/addMedicine/hooks/useSearchTest.js","views/billing/components/addItemModal.js","views/billing/components/billPrint.js","views/billing/components/finalCharges.js","state/billing/queries.js","state/billing/hooks/useGenerateBill.js","views/billing/services.js","views/billing/index.js","views/billing/components/billSearch.js","views/canteen/index.js","views/canteen/canteenStock/index.js","state/patientSearch/hooks/usePatientSearch.js","state/appointment/hooks/useGetAppointmentsByDoctorId.js","state/appointment/hooks/useGetAppointmentByPatientId.js","views/doctorAppointment/index.js","state/addMedicine/hooks/useAddMedicine.js","state/addMedicine/hooks/useSearchMedicine.js","views/medicine/addMedicine/index.js","state/addMedicine/hooks/useAddTest.js","views/medicine/addTest/index.js","views/package/index.js","state/patientSearch/hooks/usePatientSearchByName.js","views/patientSearch/index.js","views/pharmacy/index.js","state/prescription/queries.js","state/prescription/hooks/useSavePrescription.js","views/prescription/index.js","views/registration/index.js","views/home/homescreen/index.js","state/pharmacy/hooks/useGetMedicinedetail.js","views/pharmacy/addNewMedicine/index.js","views/pharmacy/addNewMedicine/utils.js","utils/constantMessages.js","views/pharmacy/manageMedicine/index.js","state/pharmacy/hooks/UseGetAllPurchaseOrders.js","state/pharmacy/hooks/useDeletePurchaseOrder.js","views/pharmacy/purchaseOrderList/index.js","state/pharmacy/hooks/useGetAllSupplier.js","state/pharmacy/hooks/useSavePurchaseOrder.js","state/pharmacy/hooks/useGetPurchaseOrderDetails.js","views/pharmacy/newPurchaseOrder/index.js","views/pharmacy/indentPreparations/index.js","state/pharmacy/hooks/useAddSupplier.js","views/pharmacy/manageSupplier/index.js","views/pharmacy/indentPreparations/indentList/index.js","views/certificates/index.js","views/package/newPackage/index.js","views/inProgress/index.js","state/prescription/hooks/useGetPrescriptionByAppointmentId.js","views/prescription/printPrescription/index.js","views/prescription/viewPrescription/index.js","routes/allRoutesData.js","routes/routeResolver.js","views/billSearch/components/mainBillView.js","views/billSearch/index.js","views/home/index.js","routes/index.js","registerServiceWorker.js","index.js","assets/images/logo.jpg"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","LOGIN","LOGOUT","INITIAL_STATE","logged","username","roles","state","action","type","payload","list","auth","product","authReducer","productReducer","BaseStyles","createGlobalStyle","reset","Content","styled","div","colors","primary","secondary","default","gradient","bg","forms","labelColor","light","errorColor","danger","theme","Object","freeze","viewports","smartphone","tablet","desktop","Button","button","props","keys","find","p","upper","large","Nav","fixed","Right","nav","Title","h1","Header","dispatch","handleLogout","a","Link","to","onClick","useProducts","useState","isLoading","setIsLoading","values","actions","password","Container","span","layout","labelCol","wrapperCol","tailLayout","LoginForm","style","width","marginBottom","src","logo","name","initialValues","remember","onFinish","console","log","onSubmit","onFinishFailed","errorInfo","Item","label","rules","required","message","Password","htmlType","BackDrop","Spinner","Loading","show","allowedRoles","Login","location","history","from","pathname","useLogin","setLogin","useEffect","push","roleName","checkAllowedUsers","notification","description","duration","departments","api","url","token","registration","body","axios","post","then","res","data","catch","err","doctorsRegistration","useDoctorRegistration","status","setStatus","response","Option","Select","validateMessages","types","email","number","range","department","map","key","speciality","qualification","AddDoctor","setRequest","formData","form","user","experience","highestQualification","consulationCharge","designation","min","max","offset","bookAppointment","getAppointmentByDoctorId","doctorId","get","getAppointmentByPatientId","patientId","useBookAppointment","getPatientByName","patientName","getPatientById","useGetAllDoctorByDepartment","patients","setPatients","deptname","useGetAllDoctors","usePatientById","PatientDetails","prop","usePatientSearchbyId","patient","bordered","visitType","age","contactNum","text","timeSlot","date","startTime","endTime","interval","startDate","setHours","endDate","start","getTime","end","timeSlots","Date","hospitalDetails","address","contact","AppointmentCardPrint","appointmentDetails","this","id","marginTop","display","flexDirection","justifyContent","alignItems","margin","marginLeft","fontSize","fontWeight","height","background","padding","float","doctorName","dateAndTime","React","Component","Search","Input","disabledDate","current","moment","endOf","Appointment","doctorsList","Map","queryParams","queryString","parse","search","selectedDepartment","setSelectedDepartment","selectedDate","setSelectedDate","componentRef","useRef","selectedDoctor","setSelectedDoctor","doctors","patientDetails","setPatientSearchById","doctorBydepartment","callDoctorByDepartment","setBookAppointment","handlePrint","useReactToPrint","content","length","doctor","set","MainButton","appointmentCard","size","concat","toDateString","title","extra","href","val","placeholder","allowClear","enterButton","onSearch","className","fullscreen","onSelect","showSearch","defaultValue","onChange","optionFilterProp","filterOption","input","option","toLowerCase","indexOf","ref","savePharmacyMedicine","saveSupplier","savePurchaseOrder","deletePurchaseOrder","delete","getPharmacyMedicineList","getPharmacyMedicineDetail","medicineId","useGetPharmacyMedicines","medicines","setMedicineList","addMedicine","addTest","useTestSearch","AddItem","medicineMap","testMap","options","selected","setSelected","setMedicineSearch","tests","setTestSearch","test","testName","forEach","medicine","medicineName","obj","itemId","quantity","itemType","amount","medicinedetail","salePrice","testdetail","price","onItemAdded","dropdownClassName","dropdownMatchSelectWidth","BillPrint","itemList","billId","paymentMode","finalCharges","todaysDate","toLocaleTimeString","itemArray","item","gst","discount","total","border","cellpadding","cellspacing","colspan","totalAmount","totalDiscount","totalGST","FinalCharges","gutter","saveGenerateBill","useSaveGenerateBill","responseObj","setResponseObj","getBillDetails","searchValue","searchBy","searchURL","EditableContext","EditableRow","index","Form","useForm","component","EditableCell","editable","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","focus","toggleEdit","setFieldsValue","save","validateFields","childNode","onPressEnter","onBlur","paddingRight","Billing","components","row","cell","columns","sorter","compare","b","multiple","render","onConfirm","returnedItems","context","setReturnedItems","dataSource","filter","calculateTotalCharges","setData","handleDelete","newData","findIndex","getFinalCharges","discountedAmount","splice","col","onCell","defaultbillDetails","createdAt","printBillButton","generateBillButton","billType","paymentStatus","totalCost","billDetailList","billItem","itemName","billMapId","cost","concessionPercentage","gstPercentage","mrp","concessionType","purchaseType","setGenerateBillStatus","setState","newPatientSwitch","newPatientFormValues","newPatientForm","getFieldsValue","setPatientDetails","printButton","setPaymentMode","setNewPatientSwitch","generateBillStatus","isModalVisible","setIsModalVisible","billDetails","setBillDetails","setFinalCharges","patientInfo","patientSearch","dataList","Number","parseInt","tempDataList","tempData","charges","visible","footer","onOk","onCancel","itemFormValue","Math","random","checked","pagination","filters","rowClassName","onDiscountChange","discountValue","Group","e","target","RangePicker","DatePicker","BillSearchComp","filterValue","setfilterValue","inputSearch","compact","renderTitle","rel","renderItem","count","UserOutlined","Canteen","icon","PlusOutlined","OrderedListOutlined","autoComplete","List","fields","add","remove","field","align","fieldKey","MinusCircleOutlined","block","shape","DownloadOutlined","defaultSortOrder","cat","onFilter","category","sortDirections","CanteenStock","forceUpdate","setName","items","setItems","onNameChange","event","addItem","dropdownRender","menu","flexWrap","flex","cursor","shouldUpdate","disabled","isFieldsTouched","getFieldsError","errors","usePatientSearch","useGetAppointmentByDoctorId","useGetAppointmentByPatientId","PickerWithType","picker","DoctorAppointment","tags","tag","color","toUpperCase","appointmentId","setType","patientAppointments","setAppointmentByPatientId","setFilter","appointments","setAppointmentByDoctorId","appointment","time","appointmentDate","useAddMedicine","useMedicineSearch","AddMedicine","strength","medicineType","prefix","useAddTest","AddTest","useSearchTest","packageName","packageEndDate","Package","textAlign","usePatientByName","PatientSearch","setVisible","showPatient","setShowPatient","setPatientSearchbyId","patientDetailsByName","setPatientSearchbyName","phone","street","searches","columnsModal","dataModal","appointmentid","appointmentdate","centered","expandable","expandedRowRender","rowExpandable","Pharmacy","savePrescription","getPrescriptionByAppointmentId","useSavePrescription","Prescription","optionsTests","submitted","setSubmitted","medicineForm","vitalsForm","adviceForm","setSavePrescription","medicineList","users","testList","patientVitals","appointmentDto","weight","Bp","bp","temprature","temparature","advise","advice","prescribedMedsDtoList","prescribedTestingDtoList","medName","days","numberOfDays","dosage","comment","comments","dateOfBooking","handleSearch","handleTestSearch","has","formActions","PrinterOutlined","inputValue","TextArea","PhonePrefixSelector","noStyle","Registration","alternatecontact","country","visit","recieptId","errr","addonBefore","HomeScreen","autoplay","class","backgroundImage","corousal1","corousal2","corousal3","corousal4","useGetPharmacyMedicineDetail","medicineUnits","medicineDistributionUnit","AddNewMedicine","medicineDetail","setRequest1","mode","genericName","boxSize","expDate","expiryDate","medicineShelf","details","unit","triggerValue","parseFloat","image","supplierPrice","suppliersPrice","tax","supplierName","availability","stockQuantity","clearForm","rows","listType","UploadOutlined","SERVER_ERROR","Text","Typography","ManageMedicines","deleteMedicine","getAllMedicines","medicineData","setMedicineData","useGetAllPharmacyMedicines","UseGetAllPurchaseOrder","useDeletePurchaseOrder","resolveTag","PurchaseOrder","orderDate","deliveryDate","supplier","purchaseOrderId","storeName","rol","productDetails","setDeletePurchaseOrder","purchaseOrders","setGetAllPurchaseOrder","order","invoiceNumber","store","useGetAllSuppliers","useSavePurchaseOrder","useGetPurchaseOrderDetails","NewPurchaseOrder","supplierOptions","purchaseDetailsForm","productListForm","suppliers","setSupplierSearch","setSavePurchaseOrder","orderDetail","setGetPurchaseOrderDetails","productList","productId","productName","purchaseCost","batchNumber","purchaseDetails","onSearchProduct","minWidth","IndentPreparation","useAddSupplier","ManageSupplier","phoneNumber","editSupplier","supplierId","IndentList","Certificates","setValue","NewPackage","InProgress","useGetPrescriptionByAppointmentId","PrintPrescription","medicineTable","testTable","dateOfResult","reportDesc","testDesc","temperature","diseaseDesc","medicinecolumns","testcolumns","ViewPrescription","testData","prescriptionDetails","setPrescriptionDetails","billing","link","billSearch","doctorRoutes","pharmacyRoutes","receptionRoutes","upcomingRoutes","adminRoutes","MainBillView","billItemList","BillSearch","searchCriteria","setSearchFilter","mainBillViewButton","searchFilter","toDate","fromDate","temp","Layout","Sider","Footer","SubMenu","Menu","Home","path","match","realRoutes","collapsed","setCollapsed","itemSelected","setItemSelected","routes","setRoutes","roleList","role","getRoutes","entries","childroutes","route","routeObject","subRoutesByRole","trigger","collapsible","defaultSelectedKeys","createElement","MenuUnfoldOutlined","MenuFoldOutlined","minHeight","overflow","Route","exact","PackageManagement","Root","AUTH_INITIAL_STATE","PRODUCT_INITIAL_STATE","reducers","Switch","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","error","document","getElementById","URL","process","origin","addEventListener","fetch","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.271a9984.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/corousal1.93dd94f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal2.79453c34.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal3.f5b70fd5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal4.7e7b53cf.jpg\";","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export const LOGIN = 'auth/LOGIN';\r\nexport const LOGOUT = 'auth/CLEAR_USER';\r\n\r\nexport const login = (payload) => ({\r\n  type: LOGIN,\r\n  payload\r\n});\r\n\r\nexport const logout = () => ({\r\n  type: LOGOUT,\r\n});\r\n","import { allRoles } from '../../utils/roles';\r\nimport { LOGIN, LOGOUT } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  logged: false,\r\n  username: \"\",\r\n  roles: allRoles\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return {\r\n        logged: true,\r\n        username: action.payload,\r\n        roles: [action.payload],\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...INITIAL_STATE,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const DOCTOR = \"doctor\";\r\nexport const PHARMACY = \"pharmacy\";\r\nexport const ADMIN = \"admin\";\r\nexport const RECEPTION = \"reception\";\r\nexport const UPCOMING = \"upcoming\";\r\n\r\nexport const allRoles = [RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING];","import { LIST_PRODUCTS } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  list: null,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LIST_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const LIST_PRODUCTS = 'product/LIST_PRODUCTS';\r\n\r\nexport const listProducts = payload => ({\r\n  type: LIST_PRODUCTS,\r\n  payload,\r\n});\r\n","import authReducer from './auth/reducers';\r\nimport productReducer from './product/reducers';\r\n\r\nexport default ({ auth, product }, action) => ({\r\n  auth: authReducer(auth, action),\r\n  product: productReducer(product, action),\r\n});\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst BaseStyles = createGlobalStyle`\r\n    ${reset}\r\n    body { margin: 0 };\r\n    html { font-family: 'Montserrat', sans-serif; }\r\n    * { box-sizing: border-box; };\r\n`;\r\n\r\nexport default BaseStyles;\r\n","import styled from 'styled-components';\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Content;\r\n","const colors = {\r\n  primary: '#7159c1',\r\n  secondary: '#9b49c1',\r\n  default: '#fff',\r\n  gradient:\r\n    'linear-gradient(112deg, rgba(113,89,193,1) 0%, rgba(155,73,193,1) 100%);',\r\n  bg: 'linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%);',\r\n};\r\n\r\nconst viewports = {\r\n  smartphone: '360px',\r\n  tablet: '720px',\r\n  desktop: '1280px',\r\n};\r\n\r\nconst forms = {\r\n  labelColor: colors.light,\r\n  errorColor: colors.danger,\r\n};\r\n\r\nconst theme = Object.freeze({\r\n  colors,\r\n  forms,\r\n  viewports,\r\n});\r\n\r\nexport default theme;\r\n","import styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst Button = styled.button`\r\n  transition: all 0.3s ease;\r\n  background: ${props =>\r\n    theme.colors[Object.keys(props).find(p => theme.colors[p])] ||\r\n    theme.colors.primary};\r\n  text-transform: ${props => (props.upper ? 'uppercase' : 'none')};\r\n  font-weight: 300;\r\n  color: ${theme.colors.default};\r\n  padding: 9px 13px;\r\n  margin: 1px;\r\n  border: none;\r\n  border-radius: 2px;\r\n  cursor: pointer;\r\n  width: ${props => (props.large ? '100%' : 'auto')};\r\n  &:hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { useStateValue } from '../state';\r\nimport { logout } from '../state/auth/actions';\r\n\r\nimport Button from './button';\r\n\r\nconst Nav = styled.div`\r\n  height: 50px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  background: #001529;\r\n  position: ${props => (props.fixed ? 'fixed' : 'relative')};\r\n`;\r\n\r\nconst Right = styled.nav`\r\n  flex: 1;\r\n  text-align: right;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n  color: white;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Header = props => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n\r\n  const handleLogout = async () => {\r\n    await dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <Nav>\r\n      <Title><Link to={`/home`}>BAYMAX</Link></Title>\r\n      <Right>\r\n          <Link to={`/`}><Button gradient onClick={() => handleLogout()}>\r\n            Logout\r\n          </Button>\r\n          </Link>\r\n      </Right>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\nimport { useStateValue } from '../../index';\r\nimport { login } from '../actions';\r\n\r\nconst useProducts = () => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const formData = async ({ values, actions }) => {\r\n    setIsLoading(true);\r\n\r\n    setIsLoading(false);\r\n    if (values.username !== '' && values.password !== '') {\r\n      dispatch(login(values.username));\r\n    }\r\n  };\r\n\r\n  return [auth, formData, isLoading];\r\n};\r\n\r\nexport default useProducts;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: calc(100vh - 50px);\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\n\r\nconst formGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default formGroup;\r\n","import styled from 'styled-components';\r\nimport theme from '../theme';\r\n\r\nconst ErrorText = styled.span`\r\n  text-align: center;\r\n  color: ${theme.forms.errorColor};\r\n`;\r\n\r\nexport default ErrorText;\r\n","/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react';\r\nimport { Formik } from 'formik';\r\n// import Button from '../../../components/button';\r\nimport FormGroup from '../../../components/form/formGroup';\r\n// import Input from '../../../components/form/input';\r\nimport ErrorText from '../../../components/form/error';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {span: 24 },\r\n};\r\n\r\nconst LoginForm = (props) => {\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n    props.onSubmit(values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          rules={[{ required: true, message: 'Please input your username!' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          rules={[{ required: true, message: 'Please input your password!' }]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" style={{ width: '100%'}}  htmlType=\"submit\">\r\n            Submit\r\n        </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\n// const LoginForm = props => (\r\n\r\n//   return (<>\r\n//   <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n//   <Form\r\n//     {...layout}\r\n//     name=\"basic\"\r\n//     initialValues={{ remember: true }}\r\n//     onFinish={onFinish}\r\n//     onFinishFailed={onFinishFailed}\r\n//   >\r\n//     <Form.Item\r\n//       label=\"Username\"\r\n//       name=\"username\"\r\n//       rules={[{ required: true, message: 'Please input your username!' }]}\r\n//     >\r\n//       <Input />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item\r\n//       label=\"Password\"\r\n//       name=\"password\"\r\n//       rules={[{ required: true, message: 'Please input your password!' }]}\r\n//     >\r\n//       <Input.Password />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n//       <Checkbox>Remember me</Checkbox>\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout}>\r\n//       <Button type=\"primary\" htmlType=\"submit\">\r\n//         Submit\r\n//         </Button>\r\n//     </Form.Item>\r\n//   </Form>\r\n//   <Formik initialValues={{ username: '', password: '' }} {...props}>\r\n//     {({ handleChange, handleBlur, values, handleSubmit, errors }) => (\r\n//       <FormGroup>\r\n//         {errors.genericError && <ErrorText>{errors.genericError}</ErrorText>}\r\n//         <Input\r\n//           name=\"username\"\r\n//           id=\"username\"\r\n//           placeholder=\"Username\"\r\n//           onChange={handleChange('username')}\r\n//           onBlur={handleBlur('username')}\r\n//           error={errors.username}\r\n//           value={values.username}\r\n//         />\r\n//         <Input\r\n//           id=\"password\"\r\n//           name=\"password\"\r\n//           type=\"password\"\r\n//           placeholder=\"Password\"\r\n//           onChange={handleChange('password')}\r\n//           onBlur={handleBlur('password')}\r\n//           error={errors.password}\r\n//           value={values.password}\r\n//         />\r\n//         <Button primary large onClick={handleSubmit} style={{ background: 'skyblue', color: 'white' }} type=\"submit\">\r\n//           Login\r\n//         </Button>\r\n//       </FormGroup>\r\n//     )}\r\n//   </Formik>\r\n// </>);\r\n\r\n// );\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst BackDrop = styled.div`\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.67);\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid ${theme.colors.primary};\r\n  border-radius: 50%;\r\n  width: 120px;\r\n  height: 120px;\r\n  animation: spin 2s linear infinite;\r\n  margin: 40vh auto;\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loading = props => {\r\n  return (\r\n    props.show && (\r\n      <BackDrop>\r\n        <Spinner />\r\n      </BackDrop>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport useLogin from '../../state/auth/hooks/useLogin';\r\n\r\nimport Container from './containers/container';\r\nimport Form from './containers/form';\r\nimport Spinner from '../../components/spinner';\r\nimport { notification } from 'antd';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\n\r\nconst allowedRoles = [DOCTOR, PHARMACY, RECEPTION, UPCOMING, ADMIN]\r\nconst Login = ({ location, history }) => {\r\n  const { from } = location.state || { from: { pathname: '/home' } };\r\n  const [auth, setLogin, isLoading] = useLogin();\r\n\r\n  useEffect(() => {\r\n    if (auth.logged) {\r\n      history.push(from);\r\n    }\r\n  }, [auth, from, history]);\r\n\r\n  function checkAllowedUsers(values) {\r\n    for (const roleName of allowedRoles) {\r\n      if (roleName == values.username && roleName == values.password) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  return (\r\n    <Container>\r\n      <Spinner show={isLoading} />\r\n      <Form onSubmit={(values, actions) => {\r\n        console.log(\"values\", values);\r\n        console.log(\"actions\", actions);\r\n        if (checkAllowedUsers(values)) {\r\n          setLogin({ values, actions });\r\n        } else {\r\n          notification[\"error\"]({\r\n            message: 'Invalid username or password!',\r\n            description:\r\n              'Please check the username and password and try again.',\r\n            duration: 5,\r\n          });\r\n        }\r\n\r\n      }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export const departments = [\"Accident and emergency (A&E)\",\r\n    \"Admissions\",\r\n    \"Anesthetics\",\r\n    \"Breast Screening\",\r\n    \"Burn Center\",\r\n    \"Cardiology\",\r\n    \"Central Sterile Services Department (CSSD)\",\r\n    \"Chaplaincy\",\r\n    \"Coronary Care Unit (CCU)\",\r\n    \"Critical Care\",\r\n    \"Diagnostic Imaging\",\r\n    \"Discharge Lounge\",\r\n    \"Elderly services\",\r\n    \"Finance Department\",\r\n    \"Gastroenterology\",\r\n    \"General Services\",\r\n    \"General Surgery\",\r\n    \"Gynecology\",\r\n    \"Haematology\",\r\n    \"Health & Safety\",\r\n    \"Intensive Care Unit (ICU)\",\r\n    \"Human Resources\",\r\n    \"Infection Control\",\r\n    \"Information Management\",\r\n    \"Maternity\",\r\n    \"Medical Records\",\r\n    \"Microbiology\",\r\n    \"Neonatal\",\r\n    \"Nephrology\",\r\n    \"Neurology\",\r\n    \"Nutrition and Dietetics\",\r\n    \"Obstetrics/Gynecology\",\r\n    \"Occupational Therapy\",\r\n    \"Oncology\",\r\n    \"Ophthalmology\",\r\n    \"Orthopaedics\",\r\n    \"Otolaryngology (Ear, Nose, and Throat)\",\r\n    \"Pain Management\",\r\n    \"Patient Accounts\",\r\n    \"Patient Services\",\r\n    \"Pharmacy\",\r\n    \"Physiotherapy\",\r\n    \"Purchasing & Supplies\",\r\n    \"Radiology\",\r\n    \"Radiotherapy\",\r\n    \"Renal\",\r\n    \"Rheumatology\",\r\n    \"Sexual Health\",\r\n    \"Social Work\",\r\n    \"Urology\"];\r\n\r\nexport const doctorsSpeciality = [\"Allergist\",\r\n    \"Anaesthesiologist\",\r\n    \"Andrologist\",\r\n    \"Cardiologist\",\r\n    \"Cardiac Electrophysiologist\",\r\n    \"Dermatologist\",\r\n    \"Emergency Room (ER) Doctors\",\r\n    \"Endocrinologist\",\r\n    \"Epidemiologist\",\r\n    \"Family Medicine Physician\",\r\n    \"Gastroenterologist\",\r\n    \"Geriatrician\",\r\n    \"Hyperbaric Physician\",\r\n    \"Hematologist\",\r\n    \"Hepatologist\",\r\n    \"Immunologist\",\r\n    \"Infectious Disease Specialist\",\r\n    \"Intensivist\",\r\n    \"Internal Medicine Specialist\",\r\n    \"Maxillofacial Surgeon / Oral Surgeon\",\r\n    \"Medical Examiner\",\r\n    \"Medical Geneticist\",\r\n    \"Neonatologist\",\r\n    \"Nephrologist\",\r\n    \"Neurologist\",\r\n    \"Neurosurgeon\",\r\n    \"Nuclear Medicine Specialist\",\r\n    \"Obstetrician/Gynecologist (OB/GYN)\",\r\n    \"Occupational Medicine Specialist\",\r\n    \"Oncologist\",\r\n    \"Ophthalmologist\",\r\n    \"Orthopedic Surgeon / Orthopedist\",\r\n    \"Otolaryngologist (also ENT Specialist)\",\r\n    \"Parasitologist\",\r\n    \"Pathologist\",\r\n    \"Perinatologist\",\r\n    \"Periodontist\",\r\n    \"Pediatrician\",\r\n    \"Physiatrist\",\r\n    \"Plastic Surgeon\",\r\n    \"Psychiatrist\",\r\n    \"Pulmonologist\",\r\n    \"Radiologist\",\r\n    \"Rheumatologist\",\r\n    \"Sleep Doctor / Sleep Disorders Specialist\",\r\n    \"Spinal Cord Injury Specialist\",\r\n    \"Sports Medicine Specialist\",\r\n    \"Surgeon\",\r\n    \"Thoracic Surgeon\",\r\n    \"Urologist\",\r\n    \"Vascular Surgeon\",\r\n    \"Veterinarian\",\r\n    \"Palliative Care Specialist\",\r\n    \"Acupuncturist\",\r\n    \"Audiologist\",\r\n    \"Ayurvedic Practioner\",\r\n    \"Chiropractor\",\r\n    \"Diagnostician\",\r\n    \"Homeopathic Doctor\",\r\n    \"Microbiologist\",\r\n    \"Naturopathic Doctor\",\r\n    \"Pharmacist\",\r\n    \"Physiotherapist\",\r\n    \"Podiatrist / Chiropodist\",\r\n    \"Registered Massage Therapist\"];\r\n\r\nexport const qualifications = [\"MS\", \"MD\", \"MBBS\"];\r\n","const api = {\r\n  // url: 'http://ec2-18-221-50-135.us-east-2.compute.amazonaws.com:8080',\r\n  url: 'http://localhost:8080',\r\n  token: '',\r\n};\r\n\r\nexport default api;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const registration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/patient/registration`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const doctorsRegistration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/doctorService/createNewDoctorsRecord`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n","import { useState } from 'react';\r\nimport { doctorsRegistration } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useDoctorRegistration = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await doctorsRegistration(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useDoctorRegistration;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport '../addDoctor/addDoctor.css';\r\nimport { departments, doctorsSpeciality, qualifications } from '../../../utils/departmentList';\r\nimport useDoctorRegistration from '../../../state/registration/hooks/useDoctorRegistration';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\nconst speciality = doctorsSpeciality.map(speciality => <Option key={speciality}>{speciality}</Option>);\r\nconst qualification = qualifications.map(qualification => <Option key={qualification}>{qualification}</Option>);\r\n\r\n\r\nfunction handleChange(value) {\r\n    console.log(`Selected: ${value}`);\r\n}\r\n\r\nconst AddDoctor = () => {\r\n    const [status, isLoading, setRequest] = useDoctorRegistration();\r\n\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The Doctor has been registered successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [status]);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n        setRequest(body);\r\n    };\r\n\r\n\r\n    return (\r\n        <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n            <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Department\" name={['user', 'department']}>\r\n                <Select>\r\n                    {department}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'experience']} label=\"Experience\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item label=\"Specialization\" name={['user', 'speciality']}>\r\n                <Select>\r\n                    {speciality}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item label=\"Highest Qualification\" name={['user', 'highestQualification']}>\r\n                <Select>\r\n                    {qualification}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'designation']} label=\"Designation\">\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'consulationCharge']} label=\"Consultation Charges\" rules={[{ type: 'number', min: 0, max: 10000 }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default AddDoctor;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const bookAppointment = (body) => {\r\n  return axios\r\n    .post(`${api.url}/HMServiceController/createNewAppointment`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByDoctorId = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentList?numberOfDays=30&startIndex=0&pazeSize=30&doctorId=` + doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByPatientId = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentListByPatientId?numberOfDays=30&startIndex=0&pazeSize=30&patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};","import { useState } from 'react';\r\nimport { bookAppointment } from '../queries';\r\n\r\nconst useBookAppointment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await bookAppointment(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useBookAppointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getAllPatients = () => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientByName = (patientName) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientByName?patientName=` + patientName)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientById = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientById?patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n\r\nexport const getAllDoctors = () => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAllDoctorsByDepartment = (name) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsListByDepartment?departmentName=` + name)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n","import { useState } from 'react';\r\nimport { getAllDoctorsByDepartment } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctorByDepartment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (deptname) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctorsByDepartment(deptname);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctorByDepartment;\r\n","import { useState } from 'react';\r\nimport { getAllDoctors } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctors = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctors();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctors;\r\n","import { useState } from 'react';\r\nimport { getPatientById } from '../queries';\r\n\r\nconst usePatientById = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState({});\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientById(patientId);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientById;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Divider, Descriptions, Badge } from 'antd';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\n\r\nconst PatientDetails = (prop) => {\r\n    const [patient, isLoading, setRequest] = usePatientSearchbyId();\r\n\r\n    useEffect(() => {\r\n        if(prop.patientId != null) {\r\n            setRequest(prop.patientId);\r\n        }\r\n    }, [prop.patientId]);\r\n\r\n    return (\r\n        <>\r\n            <Divider>Patient Details</Divider>\r\n            <Descriptions bordered>\r\n                <Descriptions.Item label=\"Name\">{patient.patientName}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{patient.visitType}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{patient.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Contact\">{patient.contactNum}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"success\" text=\"Active\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n        </>);\r\n};\r\n\r\nexport default PatientDetails;\r\n","const timeSlot = (date, startTime, endTime, interval) => {\r\n    // date.setHours(startTime);\r\n    let startDate = date;\r\n    startDate.setHours(startTime);\r\n    // date.setHours(endTime);\r\n    let endDate = date;\r\n    endDate.setHours(endTime);\r\n    console.log(startDate);\r\n    console.log(endDate);\r\n    let start = startDate.getTime();\r\n    let end = endDate.getTime();\r\n    var timeSlots = [];\r\n\r\n    while (start < end) {\r\n        timeSlots.push([new Date(start), new Date(start += interval * 60000)]);\r\n    }\r\n    return timeSlots;\r\n}\r\n\r\nexport default timeSlot;","const hospitalDetails = {\r\n    name: 'Medi World Hospital',\r\n    address: 'East Ramakrishna Nagar, Near ICICI Bank, New Bypass Road, Patna-800027',\r\n    contact: '8002727800',\r\n};\r\n\r\nexport default hospitalDetails;","import React, { useRef } from 'react';\r\nimport { Descriptions, Divider } from 'antd';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class AppointmentCardPrint extends React.Component {\r\n    render() {\r\n        const appointmentDetails = this.props.appointmentDetails;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <div style={{ marginTop: '50px' }}>\r\n                       <h3 style={{fontWeight: 'bold', fontSize: '30px'}}>Appointment Card</h3>\r\n                    </div>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                    <div style={{ fontSize: '25px' ,  float: 'left'}}>\r\n                        <p><b>Patient Name:</b> {appointmentDetails.patientName}</p>\r\n                        <p><b>Doctor Name:</b> {appointmentDetails.doctorName}</p>\r\n                        <p><b>Date and Time:</b> {appointmentDetails.dateAndTime}</p>\r\n                        <p><b>Department: </b>{appointmentDetails.department}</p>\r\n                    </div>  \r\n                    </div>\r\n\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { Button, Calendar, Card, Col, Divider, notification, Row, Select, Input, Form } from 'antd';\r\nimport moment from 'moment';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useBookAppointment from '../../state/appointment/hooks/useBookAppointment';\r\nimport useGetAllDoctorByDepartment from '../../state/patientSearch/hooks/useGetAllDoctorByDepartment';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport { departments } from '../../utils/departmentList';\r\nimport '../appointment/appointment.css';\r\nimport PatientDetails from '../patientDetails';\r\nimport timeSlot from '../../utils/timeSlot';\r\nimport { AppointmentCardPrint } from './components/appointmentCardPrint';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\n\r\nfunction disabledDate(current) {\r\n    // Can not select days before today and today\r\n    return current && current < moment().endOf('day');\r\n}\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\n\r\nconst Appointment = ({ location, history }) => {\r\n    let doctorsList = [];\r\n    let timeSlots = [];\r\n    let appointmentDetails = {\r\n        patientName: '',\r\n        doctorName: '',\r\n        dateAndTime: '',\r\n        department: ''\r\n    };\r\n    // let selectedDoctor = \"\";\r\n    const map = new Map();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"all\");\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const componentRef = useRef();\r\n    const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [patientDetails, isLoading2, setPatientSearchById] = usePatientSearchbyId();\r\n    const [doctorBydepartment, isLoadings, callDoctorByDepartment] = useGetAllDoctorByDepartment();\r\n    const [status, isLoading1, setBookAppointment] = useBookAppointment();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        if (selectedDepartment === \"all\") {\r\n            setRequest();\r\n            if (queryParams.patientId != null) {\r\n                setPatientSearchById(queryParams.patientId);\r\n            } else {\r\n                setPatientSearchById(patientDetails.patientId);\r\n            }\r\n\r\n\r\n        } else {\r\n            callDoctorByDepartment(selectedDepartment);\r\n        }\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Appointment successfully booked for patient with id ' + queryParams.patientId + 'and Doctor ' + selectedDoctor,\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [selectedDepartment, status]);\r\n\r\n    if (selectedDepartment !== \"all\") {\r\n        if (doctorBydepartment.length > 0) {\r\n            doctorsList = doctorBydepartment.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>;\r\n            });\r\n        }\r\n    } else {\r\n        if (doctors.length > 0) {\r\n            doctorsList = doctors.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>\r\n            });\r\n        }\r\n    }\r\n    function handleChange(value) {\r\n        setSelectedDepartment(value);\r\n    }\r\n    function onDateSelect(value) {\r\n        setSelectedDate(new Date(value));\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedDoctor(value);\r\n    }\r\n\r\n    function bookAppointment() {\r\n        const body = {\r\n            \"diseaseDesc\": \"test desc\",\r\n            \"advise\": \"test\",\r\n            \"patientId\": patientDetails.patientId,\r\n            \"patientName\": patientDetails.patientName,\r\n            \"doctorId\": selectedDoctor,\r\n            \"appointmentDate\": selectedDate.getTime(),\r\n            \"height\": 6,\r\n            \"weight\": 80,\r\n            \"Bp\": \"120/80\"\r\n        };\r\n        if (patientDetails.patientId != null) {\r\n            setBookAppointment(body);\r\n        } else {\r\n            notification[\"error\"]({\r\n                message: 'Failed',\r\n                description: 'Please Enter a valid patient Id!',\r\n                duration: 3\r\n            });\r\n        }\r\n\r\n    }\r\n    let MainButton = \"\";\r\n    let appointmentCard = \"\";\r\n    if (!status) {\r\n        MainButton = <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Book Appointment</Button>;\r\n    } else {\r\n        console.log(\"dsadsad\" + selectedDoctor);\r\n        MainButton = <Button type=\"primary\" size=\"large\" onClick={() => {\r\n            console.log(patientDetails.patientId,);\r\n            history.push({ pathname: '/home/billing', search: '?patientId='.concat(patientDetails.patientId) + '&doctorName=' + map.get(selectedDoctor).doctorName + '&charges=' + map.get(selectedDoctor).consulationCharge + '&context=consulation' })\r\n        }}>Go To Billing</Button>;\r\n        appointmentDetails = {\r\n            patientName: patientDetails.patientName,\r\n            doctorName: map.get(selectedDoctor).doctorName,\r\n            dateAndTime: selectedDate.toDateString(),\r\n            department: selectedDepartment\r\n        };\r\n        appointmentCard = (<Card title=\"Appointment Details\" extra={<a href=\"#\" onClick={handlePrint}>Print</a>} style={{ width: 300 }}>\r\n            <p>Appointment booked for :</p>\r\n            <p>{patientDetails.patientName}</p>\r\n            <p>on {selectedDate.toDateString()}</p>\r\n            <p>At {selectedDepartment}</p>\r\n            <p>With Dr. {map.get(selectedDoctor).doctorName}</p>\r\n        </Card>);\r\n    }\r\n\r\n    timeSlots = timeSlot(new Date(), 2, 4, 15).map(val => <Option key={val} >val</Option>);\r\n    const onPatientSearch = value => {\r\n        setPatientSearchById(value);\r\n    };\r\n    return (\r\n        <>\r\n            <Search\r\n                placeholder=\"Search Patient By Id\"\r\n                allowClear\r\n                enterButton=\"Search\"\r\n                size=\"large\"\r\n                style={{ width: '40%' }}\r\n                onSearch={onPatientSearch}\r\n            />\r\n            <br />\r\n            <PatientDetails patientId={patientDetails.patientId} />\r\n            <br></br>\r\n            <Divider>Appointment Booking</Divider>\r\n            <Form name=\"nest-messages\" onFinish={bookAppointment}>\r\n                <Row>\r\n                    <Col span={8}>\r\n                        <div className=\"site-calendar-demo-card\">\r\n                            <Calendar fullscreen={false} onSelect={onDateSelect} disabledDate={disabledDate} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Form.Item name={['user', 'departmentName']}>\r\n                            <Select\r\n                                showSearch\r\n                                defaultValue=\"all\"\r\n                                onChange={handleChange}\r\n                                placeholder=\"Select Department\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                <Option value=\"all\">All</Option>\r\n                                {department}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'doctorName']} rules={[{ required: true }]}>\r\n                            <Select\r\n                                onChange={handleChangeOfDoctor}\r\n                                showSearch\r\n                                placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {doctorsList}\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'timeSlot']}>\r\n                            <Select placeholder=\"Select Time Slot\" style={{ width: 300 }}>\r\n                                {timeSlots}\r\n                                {/* <Option value=\"jack\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack1\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack2\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack3\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack4\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack5\">11:30 - 11:45</Option> */}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div style={{ display: 'none' }}>\r\n                            <AppointmentCardPrint ref={componentRef} appointmentDetails={appointmentDetails} />\r\n                        </div>\r\n                        {appointmentCard}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={12} offset={10}>\r\n                        {MainButton}\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>);\r\n};\r\n\r\nexport default Appointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePharmacyMedicine = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePharmacyMedicine`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveSupplier = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveSupplier`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const savePurchaseOrder = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deletePurchaseOrder = (body) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deletePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderDetails = (purchaseOrderId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderDetails?purchaseOrderId=` + purchaseOrderId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getSuppliersList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getSupplierList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineListByName = (medicineName) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineListByName?medicineName=` + medicineName)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineDetail = (medicineId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineDetails?medicineId=` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deleteMedicine = (medicineId) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deleteMedicineRecord/` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { getPharmacyMedicineList } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetPharmacyMedicines = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPharmacyMedicineList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicines;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const addMedicine = (body) => {\r\n  return axios\r\n    .post(`${api.url}/medicine/medicine`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getAllMedicines = () => {\r\n  return axios\r\n    .get(`${api.url}/medicine/medicineList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAllTests = () => {\r\n  return axios\r\n    .get(`${api.url}/test/testList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err\r\n    });\r\n};\r\n\r\nexport const addTest = (body) => {\r\n  return axios\r\n    .post(`${api.url}/test/test`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};","import { useState } from 'react';\r\nimport { getAllMedicines, getAllTests } from '../queries';\r\n\r\nconst useTestSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllTests();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useTestSearch;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col, AutoComplete } from 'antd';\r\nimport useGetPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useTestSearch from '../../../state/addMedicine/hooks/useSearchTest';\r\nconst { Option } = Select;\r\n\r\nconst AddItem = (props) => {\r\n    const medicineMap = new Map();\r\n    const testMap = new Map();\r\n    let options = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n    const [selected, setSelected] = useState(\"medicine\");\r\n    const [medicines, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    const [tests, isLoading1, setTestSearch] = useTestSearch();\r\n    // const [options, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n    }, []);\r\n\r\n    if (selected == \"test\") {\r\n        options = [...tests.map(test => {\r\n            testMap.set(test.testName, test);\r\n            return { value: test.testName, label: test.testName };\r\n        })];\r\n    } else if (selected == \"medicine\") {\r\n        if (medicines.length > 0) {\r\n\r\n            medicines.forEach(medicine => {\r\n                medicineMap.set(medicine.medicineName, medicine);\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    } else if (selected == \"consultation\") {\r\n        if (medicines.length > 0) {\r\n            medicines.forEach(medicine => {\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    }\r\n\r\n    function onFinish(value) {\r\n        let amount = 0;\r\n        const obj = {\r\n            itemId: null,\r\n            name: value.user.name,\r\n            quantity: value.user.quantity,\r\n            itemType: selected,\r\n            amount: amount\r\n        }\r\n        if (selected == \"medicine\") {\r\n            const medicinedetail = medicineMap.get(value.user.name);\r\n            obj[\"amount\"] = medicinedetail.salePrice;\r\n            obj[\"itemId\"] = medicinedetail.medicineId;\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(value.user.name);\r\n            obj[\"amount\"] = testdetail.price;\r\n            obj[\"itemId\"] = null;\r\n        }\r\n\r\n        props.onItemAdded(obj);\r\n    }\r\n    function onItemTypeSelect(value) {\r\n        setSelected(value);\r\n        if (value == \"test\") {\r\n            setTestSearch();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form {...layout} name=\"nest-messages\" onFinish={onFinish} >\r\n            <Form.Item name={['user', 'name']} label=\"Item name\" rules={[{ required: true }]}>\r\n                <AutoComplete\r\n                    dropdownClassName=\"certain-category-search-dropdown\"\r\n                    dropdownMatchSelectWidth={500}\r\n                    style={{ width: '100%' }}\r\n                    options={options}\r\n                >\r\n                    <Input.Search size=\"default\" placeholder=\"Item name\" />\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'quantity']} label=\"Quantity\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'itemType']} label=\"Item type\" >\r\n                <Select onSelect={onItemTypeSelect} defaultValue={selected} placeholder=\"Item type\">\r\n                    <Option value=\"medicine\">Medicine</Option>\r\n                    <Option value=\"test\">Test</Option>\r\n                    <Option value=\"consulation\">Consulation</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Add Item\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>);\r\n};\r\nexport default AddItem;","import React, { useRef } from 'react';\r\nimport '../components/billingPrint.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class BillPrint extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const billId = this.props.billId;\r\n        const paymentMode = this.props.paymentMode;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const finalCharges = this.props.finalCharges;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = itemList.map(item => {\r\n            return (\r\n                <tr>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.quantity}</td>\r\n                    <td>{item.amount}</td>\r\n                    <td>{item.gst}</td>\r\n                    <td>{item.discount}</td>\r\n                    <td>{item.total}</td>\r\n                </tr>)\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                                <td>BillId</td>\r\n                                <td>{billId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Payment mode</td>\r\n                                <td>{paymentMode}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(CGST + SGST)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemArray}\r\n                            <tr>\r\n                                <td colspan=\"4\"></td>\r\n                                <td>Total</td>\r\n                                <td>{finalCharges.totalAmount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colspan=\"4\"></td>\r\n                                <td>Discount(%)</td>\r\n                                <td>{finalCharges.totalDiscount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colspan=\"4\"></td>\r\n                                <td>Tax</td>\r\n                                <td>{finalCharges.totalGST}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst FinalCharges = (props) => {\r\n  function onDiscountChange(value) {\r\n    props.onDiscountChange(value);\r\n  }\r\n  return (\r\n    <Form name=\"final_charges\">\r\n      <Row gutter={24}>\r\n        <Col span={8} key={1}>\r\n          <Form.Item label=\"Total Amount\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalAmount}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={2}>\r\n          <Form.Item label=\"Total discount(%)\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalDiscount}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={3}>\r\n          <Form.Item label=\"Total GST\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalGST}</span>\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>);\r\n};\r\nexport default FinalCharges;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nconst rootURI = `${api.url}/HMServiceController/fetchBillDtails`;\r\nexport const searchBillDetails = (id, filterType) => {\r\n    let url = '';\r\n    if (filterType === 'patientId') {\r\n        url = `${rootURI}?patientId=` + id + '&billId=';\r\n    } else if (filterType === 'billId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    } else if (filterType === 'receiptId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    }\r\n    return axios\r\n        .get(url)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err.response;\r\n        });\r\n};\r\n\r\nexport const saveGenerateBill = (body) => {\r\n    return axios\r\n        .post(`${api.url}/HMServiceController/generateBill`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getBillListByDateRange = (toDate, fromDate, billType) => {\r\n    return axios\r\n        .get(`${api.url}/HMServiceController/fetchBillListByDateRange?toDate=` + toDate + '&fromDate=' + fromDate + '&billType=' + billType)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n","import { useState } from 'react';\r\nimport { saveGenerateBill } from '../queries';\r\n\r\nconst useSaveGenerateBill = () => {\r\n  const [responseObj, setResponseObj] = useState({});\r\n\r\n  const request = async (body) => {\r\n    const response = await saveGenerateBill(body);\r\n    if (response) {\r\n      if (response.response == \"success\") {\r\n        setResponseObj(response);\r\n      }\r\n    } else {\r\n      setResponseObj(null);\r\n    }\r\n  };\r\n\r\n  return [responseObj, request];\r\n};\r\n\r\nexport default useSaveGenerateBill;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getBillDetails = (searchValue, searchBy) => {\r\n\r\n    let searchURL = \"\";\r\n\r\n    if (searchBy == \"patientId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?billId=&patientId=` + searchValue;\r\n    } else if (searchBy == \"billId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?patientId=&billId=` + searchValue;\r\n    }\r\n    return axios\r\n        .get(searchURL)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { Button, Col, Descriptions, Divider, Form, InputNumber, Switch, Input, notification, Radio, Row, Table, Popconfirm, Modal } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useRef, useState, useEffect, useContext } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PatientDetails from '../patientDetails';\r\nimport AddItem from './components/addItemModal';\r\nimport { BillPrint } from './components/billPrint';\r\nimport FinalCharges from './components/finalCharges';\r\nimport useSaveGenerateBill from '../../state/billing/hooks/useGenerateBill';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport { getBillDetails } from './services';\r\n\r\nconst EditableContext = React.createContext();\r\nconst { Search } = Input;\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef();\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n        <div\r\n          className=\"editable-cell-value-wrap\"\r\n          style={{\r\n            paddingRight: 24,\r\n          }}\r\n          onClick={toggleEdit}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst Billing = ({ location, history }) => {\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n  const queryParams = queryString.parse(location.search);\r\n  const components = {\r\n    body: {\r\n      row: EditableRow,\r\n      cell: EditableCell,\r\n    },\r\n  };\r\n  let columns = [\r\n    {\r\n      title: 'Item Name',\r\n      dataIndex: 'name',\r\n    },\r\n    {\r\n      title: 'Quantity',\r\n      dataIndex: 'quantity',\r\n      editable: \"true\",\r\n      width: '10%',\r\n    },\r\n    {\r\n      title: 'Amount',\r\n      dataIndex: 'amount',\r\n      sorter: {\r\n        compare: (a, b) => a.amount - b.amount,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'GST(CGST+SGST)',\r\n      dataIndex: 'gst',\r\n      editable: \"true\",\r\n      sorter: {\r\n        compare: (a, b) => a.gst - b.gst,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'Discount(%)',\r\n      dataIndex: 'discount',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.discount - b.discount,\r\n        multiple: 2,\r\n      },\r\n    },\r\n    {\r\n      title: 'Total',\r\n      dataIndex: 'total',\r\n      sorter: {\r\n        compare: (a, b) => a.total - b.total,\r\n        multiple: 1,\r\n      },\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) =>\r\n        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n          <a> {record.type == \"pharmacy-purchase\" && queryParams.context == \"edit\" ? \"Return\" : \"Delete\"} </a>\r\n        </Popconfirm>\r\n    }\r\n  ];\r\n  columns = columns.map((col) => {\r\n    if (col.editable == \"false\") {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        editable: col.editable,\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        handleSave: handleSave,\r\n      }),\r\n    };\r\n  });\r\n  function handleSave(row) {\r\n    const newData = [...data];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    const finalCharges = getFinalCharges([row]);\r\n    row.total = finalCharges.discountedAmount + finalCharges.totalGST;\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    setData(newData);\r\n    calculateTotalCharges(newData);\r\n  };\r\n\r\n  const defaultbillDetails = {\r\n    billId: '',\r\n    createdAt: (new Date()).toDateString() + ' ' + (new Date()).toLocaleTimeString()\r\n  };\r\n\r\n  const defaultFinalCharges = {\r\n    totalAmount: 0,\r\n    totalDiscount: 0,\r\n    totalGST: 0\r\n  };\r\n\r\n  const printBillButton = <Col className=\"gutter-row\" span={3}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={handlePrint}>Print</Button>\r\n  </Col>;\r\n  let generateBillButton = <Col className=\"gutter-row\" span={3}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={generateBill}>Generate {queryParams.context == \"edit\" ? \"new \" : \"\"}bill</Button>\r\n  </Col>;\r\n  let printButton = \"\";\r\n  const [newPatientForm] = Form.useForm();\r\n  const [state, setState] = useState(\"initial\");\r\n  const [paymentMode, setPaymentMode] = useState(\"Cash\");\r\n  // const [billResponse, isLoading, setBillSearch] = useBillSearch();\r\n  const [patientDetails, setPatientDetails] = useState({});\r\n  const [newPatientSwitch, setNewPatientSwitch] = useState(false);\r\n  const [generateBillStatus, setGenerateBillStatus] = useSaveGenerateBill();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);;\r\n  const [billDetails, setBillDetails] = useState(defaultbillDetails);\r\n  const [finalCharges, setFinalCharges] = useState(defaultFinalCharges);\r\n  const [data, setData] = useState([]);\r\n  const [returnedItems, setReturnedItems] = useState([]);\r\n\r\n  let patientInfo = <div>\r\n    <Search placeholder=\"Search by Patient Id\" allowClear onSearch={patientSearch} style={{ width: '30%' }} />\r\n    <PatientDetails patientId={patientDetails.patientId} />\r\n  </div>;\r\n  // let billSearchComp = <BillSearch onSearch={onBillSearch} />;\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // calculateTotalCharges(mockData);\r\n    // setData(mockData);\r\n    if (queryParams.context == 'registration' && state == \"initial\") {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Registration',\r\n          quantity: 1,\r\n          type: 'registration',\r\n          amount: 50,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: 50,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'consulation' && state == \"initial\") {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Consultation ' + '(' + (queryParams.doctorName) + ')',\r\n          quantity: 1,\r\n          type: 'consultation',\r\n          amount: queryParams.charges,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: Number(queryParams.charges) + 0,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'edit') {\r\n      onBillSearch(queryParams.billId, \"billId\");\r\n    }\r\n\r\n\r\n    if (generateBillStatus.response == \"success\") {\r\n      notification[\"success\"]({\r\n        message: 'SUCCESS',\r\n        description: 'Bill Generated Successfully with id ' + generateBillStatus.billId,\r\n        duration: 3\r\n      });\r\n      setBillDetails({\r\n        billId: generateBillStatus.billId,\r\n        createdAt: (new Date()).toDateString()\r\n      });\r\n    }\r\n  }, [generateBillStatus]);\r\n  if (generateBillStatus.response == \"success\") {\r\n    generateBillButton = \"\";\r\n    printButton = printBillButton;\r\n  }\r\n\r\n  if (queryParams.context == \"edit\") {\r\n    printButton = printBillButton;\r\n  }\r\n  if (newPatientSwitch) {\r\n    patientInfo = <div>\r\n      <Divider>Patient Details</Divider>\r\n      <Form layout=\"inline\" form={newPatientForm}>\r\n        <Form.Item name=\"patientName\" label=\"Name\">\r\n          <Input placeholder=\"name\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"age\" label=\"Age\">\r\n          <InputNumber placeholder=\"age\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"contact\" label=\"Contact\">\r\n          <Input placeholder=\"phone number\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"referal doctor\" label=\"Referal doctor\">\r\n          <Input placeholder=\"doctor name\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>;\r\n  }\r\n  function getFinalCharges(dataList) {\r\n    const finalCharges = {\r\n      totalAmount: 0,\r\n      totalGST: 0,\r\n      totalDiscount: 0,\r\n      discountedAmount: 0\r\n    }\r\n\r\n    dataList.forEach(data => {\r\n      const amount = Number.parseInt(data.amount) * Number.parseInt(data.quantity);\r\n      const discountedAmount = Number.parseInt(amount) - ((Number.parseInt(data.discount) / 100) * Number.parseInt(amount));\r\n      finalCharges.totalAmount += Number.parseInt(amount);\r\n      finalCharges.totalDiscount += Number.parseInt(data.discount);\r\n      finalCharges.discountedAmount += discountedAmount;\r\n      finalCharges.totalGST += Number.parseInt(data.gst);\r\n    });\r\n    return finalCharges;\r\n  }\r\n  function onChange(pagination, filters, sorter, extra) {\r\n    console.log('params', pagination, filters, sorter, extra);\r\n  }\r\n\r\n  function onBillSearch(searchValue, searchFilter) {\r\n    getBillDetails(searchValue, searchFilter).then(data => {\r\n      if (data && data[0]) {\r\n        const billDetails = data[0];\r\n        setBillDetails({\r\n          billId: billDetails.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        setPaymentMode(billDetails.paymentMode);\r\n        if (billDetails[\"patientId\"]) {\r\n          patientSearch(billDetails.patientId);\r\n        }\r\n        if (billDetails[\"billDetailList\"]) {\r\n\r\n          const tempData = billDetails[\"billDetailList\"].map((item, index) => {\r\n            return {\r\n              key: item.itemName + index,\r\n              id: item.id,\r\n              itemId: item.itemId,\r\n              name: item.itemName,\r\n              type: item.purchaseType,\r\n              billMapId: item.billMapId,\r\n              quantity: item.quantity,\r\n              amount: item.mrp,\r\n              gst: 0,\r\n              discount: item.concessionPercentage,\r\n              total: Number(item.mrp) - ((Number(item.concessionPercentage) / 100) * Number(item.mrp)),\r\n            }\r\n          });\r\n\r\n          setData(tempData);\r\n          calculateTotalCharges(tempData);\r\n        }\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  function patientSearch(patientId) {\r\n    getPatientById(patientId).then(patientDetails => {\r\n      setPatientDetails(patientDetails);\r\n    }).catch(() => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: 'Error while searching patient with Id' + patientId,\r\n        duration: 3\r\n      });\r\n    });\r\n  }\r\n  function onItemAdded(itemFormValue) {\r\n    console.log(itemFormValue);\r\n    const newData = {\r\n      key: Math.random(),\r\n      name: itemFormValue.name,\r\n      itemId: itemFormValue.itemId,\r\n      quantity: itemFormValue.quantity,\r\n      amount: itemFormValue.amount,\r\n      type: itemFormValue.itemType,\r\n      gst: 0,\r\n      discount: 0,\r\n      total: itemFormValue.quantity * itemFormValue.amount,\r\n    }\r\n    const tempDataList = [...data, newData];\r\n\r\n    setData(tempDataList);\r\n    calculateTotalCharges(tempDataList);\r\n    setIsModalVisible(false);\r\n  }\r\n  function handleDelete(key) {\r\n    let returnedItems = [];\r\n    if (queryParams.context == \"edit\") {\r\n      data.forEach((item) => {\r\n        if (item.key == key && item.type == \"pharmacy-purchase\") {\r\n          returnedItems.push(item);\r\n        }\r\n      });\r\n      setReturnedItems(returnedItems);\r\n    }\r\n    const dataSource = data.filter((item) => item.key !== key);\r\n    calculateTotalCharges(dataSource);\r\n    setData(dataSource);\r\n  };\r\n\r\n  function calculateTotalCharges(tempDataList) {\r\n    const finalCharges = getFinalCharges(tempDataList);\r\n    console.log(finalCharges);\r\n    setFinalCharges({\r\n      totalAmount: finalCharges.discountedAmount + finalCharges.totalGST,\r\n      totalDiscount: (finalCharges.totalAmount - finalCharges.discountedAmount) / finalCharges.totalAmount * 100,\r\n      totalGST: finalCharges.totalGST\r\n    });\r\n  }\r\n\r\n  function onDiscountChange(discountValue) {\r\n    console.log(\"Discount changed\", discountValue);\r\n  }\r\n\r\n  function paymentMethod(e) {\r\n    setPaymentMode(e.target.value);\r\n  }\r\n\r\n  function generateBill() {\r\n    const body = {\r\n      billId: null,\r\n      billType: \"PHARMACY\",\r\n      createdAt: new Date(),\r\n      paymentStatus: (paymentMode == \"Due\" ? \"dues\" : \"paid\"),\r\n      paymentMode: paymentMode,\r\n      patientId: patientDetails.patientId,\r\n      totalCost: finalCharges.totalAmount,\r\n      totalDiscount: finalCharges.totalDiscount,\r\n      totalGST: finalCharges.totalGST,\r\n      billDetailList: []\r\n    };\r\n    data.forEach(item => {\r\n      const billItem = {\r\n        id: null,\r\n        itemName: item.name,\r\n        itemId: item.itemId,\r\n        billMapId: null,\r\n        cost: item.total,\r\n        concessionPercentage: item.discount,\r\n        gstPercentage: item.gst,\r\n        mrp: item.amount,\r\n        concessionType: \"discount\",\r\n        quantity: item.quantity,\r\n        purchaseType: (item.type == \"medicine\" ? \"pharmacy-purchase\" : item.type)\r\n      };\r\n      body.billDetailList.push(billItem);\r\n    });\r\n    returnedItems.forEach(item => {\r\n      const billItem = {\r\n        id: null,\r\n        itemName: item.name,\r\n        itemId: item.itemId,\r\n        billMapId: null,\r\n        cost: item.total,\r\n        concessionPercentage: item.discount,\r\n        gstPercentage: item.gst,\r\n        mrp: item.amount,\r\n        concessionType: \"discount\",\r\n        quantity: item.quantity,\r\n        purchaseType: (item.type == \"pharmacy-purchase\" ? \"pharmacy-return\" : item.type)\r\n      };\r\n      body.billDetailList.push(billItem);\r\n    });\r\n    console.log(\"body\", body);\r\n    setGenerateBillStatus(body);\r\n    setState(\"billGenerated\");\r\n    if (newPatientSwitch) {\r\n      const newPatientFormValues = newPatientForm.getFieldsValue();\r\n      setPatientDetails({\r\n        patientName: newPatientFormValues.patientName,\r\n        patientId: \"N/A\",\r\n        age: newPatientFormValues.age,\r\n      });\r\n    }\r\n  }\r\n  function onNewPatientSwitchChange(checked) {\r\n    setNewPatientSwitch(checked);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal title=\"Add Item\" visible={isModalVisible} footer={null} onOk={handleOk} onCancel={handleCancel}>\r\n        <AddItem onItemAdded={onItemAdded} />\r\n      </Modal>\r\n      New Patient <Switch onChange={onNewPatientSwitchChange} /> <br /> <br />\r\n      {patientInfo}\r\n      <div style={{ display: 'none' }}>\r\n        <BillPrint ref={componentRef} itemList={data} paymentMode={paymentMode} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} />\r\n      </div>\r\n      <Divider>Bill Details</Divider>\r\n      <Descriptions>\r\n        <Descriptions.Item label=\"Bill Id\">{billDetails.billId}</Descriptions.Item>\r\n        {/* <Descriptions.Item label=\"Receipt Id\">{queryParams.receiptId}</Descriptions.Item> */}\r\n        <Descriptions.Item label=\"Date and time\">{billDetails.createdAt}</Descriptions.Item>\r\n      </Descriptions>\r\n      <Button\r\n        onClick={showModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"none\" : \"\")\r\n        }}\r\n      >\r\n        Add Item\r\n        </Button>\r\n      <Table columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n\r\n      <FinalCharges finalCharges={finalCharges} onDiscountChange={onDiscountChange} />\r\n      <Divider>Payment</Divider>\r\n      <Radio.Group onChange={paymentMethod} value={paymentMode}>\r\n        <Radio value=\"Cash\">Cash</Radio>\r\n        <Radio value=\"Card\">Card</Radio>\r\n        <Radio value=\"UPI\">UPI</Radio>\r\n        <Radio value=\"Paytm\">Paytm</Radio>\r\n        <Radio value=\"Due\">Due</Radio>\r\n      </Radio.Group>\r\n      <br /><br /><br />\r\n      <Row gutter={24}>\r\n        {generateBillButton}\r\n        {/* <Col className=\"gutter-row\" span={3}>\r\n          <Button type=\"primary\">Cancel</Button>\r\n        </Col> */}\r\n        {printButton}\r\n\r\n        <Col className=\"gutter-row\" span={3}>\r\n          <Button style={{ width: '90%' }} type=\"primary\" onClick={() => history.push({ pathname: '/home/appointment', search: '?patientId='.concat(queryParams.patientId) })}>Go To Appointment</Button>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Billing;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Select, DatePicker } from 'antd';\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\nconst BillSearchComp = (props) => {\r\n    const defaultSearch = \"billId\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n    let inputSearch = <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Bill by\" />;\r\n\r\n    if (filterValue == \"dateRange\") {\r\n        inputSearch = <RangePicker onChange={onDateRangeSelect} disabledDate={disabledDate} />;\r\n    }\r\n    \r\n    function onDateRangeSelect(values) {\r\n      props.onSearch(values, filterValue);\r\n    }\r\n    function disabledDate(current) {\r\n        // Can not select days before today and today\r\n        return current && current > moment().endOf('day');\r\n    }\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n        <Input.Group compact>\r\n            <Select defaultValue={defaultSearch} onSelect={setfilterValue}>\r\n                <Option key=\"patientId\" value=\"patientId\">Patient Id</Option>\r\n                <Option key=\"billId\" value=\"billId\">Bill Id</Option>\r\n                <Option key=\"dateRange\" value=\"dateRange\">Date Range</Option>\r\n            </Select>\r\n            { inputSearch }\r\n        </Input.Group>);\r\n};\r\nexport default BillSearchComp;\r\n","import React, { useEffect } from 'react';\r\nimport BillSearch from '../billing/components/billSearch';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, AutoComplete, Badge, Descriptions, Row, Col, Button, Space } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UserOutlined, DownloadOutlined, OrderedListOutlined } from '@ant-design/icons';\r\nconst renderTitle = (title: string) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title: string, count: number) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\nconst options = [\r\n    {\r\n        label: renderTitle('Libraries'),\r\n        options: [renderItem('AntDesign', 10000), renderItem('AntDesign UI', 10600)],\r\n    },\r\n    {\r\n        label: renderTitle('Solutions'),\r\n        options: [renderItem('AntDesign UI FAQ', 60100), renderItem('AntDesign FAQ', 30010)],\r\n    },\r\n    {\r\n        label: renderTitle('Articles'),\r\n        options: [renderItem('AntDesign design language', 100000)],\r\n    },\r\n];\r\n\r\nconst Canteen = () => {\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <BillSearch />\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Button type=\"dashed\" icon={<PlusOutlined />}>\r\n                        New\r\n                    </Button>\r\n                    <Button type=\"dashed\" style={{ marginLeft: '5px' }} icon={<OrderedListOutlined />}>\r\n                        <Link to=\"/home/canteenStock\">View Stock</Link>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Descriptions title=\"Patient Info\">\r\n                <Descriptions.Item label=\"Patient Name\">Rishiraj</Descriptions.Item>\r\n                <Descriptions.Item label=\"Phone\">919829128</Descriptions.Item>\r\n                <Descriptions.Item label=\"Department\">Ward 1</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"warning\" text=\"pending\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <br /><br />\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'itemName']}\r\n                                            fieldKey={[field.fieldKey, 'itemName']}\r\n                                            rules={[{ required: true, message: 'Missing Item name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search placeholder=\"Search item\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <Input placeholder=\"Price\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'gst']}\r\n                                            fieldKey={[field.fieldKey, 'gst']}\r\n                                        >\r\n                                            <Input placeholder=\"gst\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n            <Descriptions title=\"\">\r\n                <Descriptions.Item label=\"Total Amount\">100</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total GST\">15</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total discount\">0</Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <Form.Item>\r\n                <Row>\r\n                    <Col span={12} offset={11}>\r\n                        <Button type=\"primary\" shape=\"round\" icon={<DownloadOutlined />} size='large'>Print</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Pay Now</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Add to Bill</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form.Item>\r\n        </>\r\n\r\n    );\r\n};\r\nexport default Canteen;\r\n","import { PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Divider, Form, Input, InputNumber, Select, Table } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { Option } = Select;\r\nconst defaultCategories = ['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian'];\r\nconst columns = [\r\n    {\r\n        title: 'Item Name',\r\n        dataIndex: 'itemName',\r\n        defaultSortOrder: 'descend',\r\n        sorter: (a, b) => a.itemName - b.itemName,\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price'\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        filters: defaultCategories.map(cat => {\r\n            return {\r\n                text: cat,\r\n                value: cat,\r\n            }\r\n        }),\r\n        onFilter: (value, record) => record.category.indexOf(value) === 0,\r\n        sorter: (a, b) => a.category.length - b.category.length,\r\n        sortDirections: ['descend'],\r\n    }\r\n];\r\n\r\nconst CanteenStock = () => {\r\n    let index = 0;\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    const [, forceUpdate] = useState();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian']);\r\n\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const onFinish = values => {\r\n        console.log('Finish:', values);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"itemName\"\r\n                    rules={[{ required: true, message: 'Please enter item name!' }]}\r\n                >\r\n                    <Input placeholder=\"Item Name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please enter a price!' }]}\r\n                >\r\n                    <InputNumber placeholder=\"Price\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"Category\"\r\n                >\r\n                    <Select\r\n                        style={{ width: 240 }}\r\n                        placeholder=\"Select category\"\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                <Divider style={{ margin: '4px 0' }} />\r\n                                <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                    <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                    <a\r\n                                        style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                        onClick={addItem}\r\n                                    >\r\n                                        <PlusOutlined /> Add item\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {items.map(item => (\r\n                            <Option key={item}>{item}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Item\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default CanteenStock;\r\n","import { useState } from 'react';\r\nimport { getAllPatients } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst usePatientSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllPatients();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientSearch;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByDoctorId } from '../queries';\r\n\r\nconst useGetAppointmentByDoctorId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (doctorId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByDoctorId(doctorId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByDoctorId;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByPatientId } from '../queries';\r\n\r\nconst useGetAppointmentByPatientId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByPatientId(patientId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByPatientId;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, DatePicker, Button, TimePicker, Select, Space, Input } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport useGetAppointmentByDoctorId from '../../state/appointment/hooks/useGetAppointmentsByDoctorId';\r\nimport useGetAppointmentByPatientId from '../../state/appointment/hooks/useGetAppointmentByPatientId';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\nfunction PickerWithType({ type, onChange }) {\r\n    if (type === 'time') return <TimePicker onChange={onChange} />;\r\n    if (type === 'date') return <DatePicker onChange={onChange} />;\r\n    return <DatePicker picker={type} onChange={onChange} />;\r\n}\r\n\r\nfunction DoctorAppointment({ location, history }) {\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Patient Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n        },\r\n        {\r\n            title: 'Time Slot',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color=\"green\" key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Registered',\r\n                    value: 'registered',\r\n                },\r\n                {\r\n                    text: 'Appointment done',\r\n                    value: 'done',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/prescription', search: '?patientId=' + record.patientId + '&patientName=' + record.patientName + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        Proceed\r\n                </Button>\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        View\r\n                </Button>\r\n                </Space>\r\n            ),\r\n        }\r\n    ];\r\n    let doctorsList = [];\r\n    const [type, setType] = useState('time');\r\n    const [patientAppointments, isLoading2, setAppointmentByPatientId] = useGetAppointmentByPatientId();\r\n    // const [selectedDoctor, setSelectedDoctor] = useState(\"initial\");\r\n    const [filter, setFilter] = useState(\"none\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [appointments, isLoading1, setAppointmentByDoctorId] = useGetAppointmentByDoctorId();\r\n    let data = [];\r\n    useEffect(() => {\r\n        setRequest();\r\n    }, []);\r\n\r\n    if (doctors.length > 0) {\r\n        doctorsList = doctors.map(doctor => <Option key={doctor.doctorId} >{doctor.doctorName}</Option>);\r\n    }\r\n    console.log(\"asadada\", appointments);\r\n    if (filter == \"doctor\" && appointments.length > 0) {\r\n        data = appointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['registered'])\r\n            };\r\n        });\r\n    }\r\n    if (filter == \"patient\" && patientAppointments.length > 0) {\r\n        data = patientAppointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['registered'])\r\n            };\r\n        });\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        setAppointmentByDoctorId(value);\r\n        setFilter(\"doctor\");\r\n    }\r\n\r\n    const onPatientSearch = value => {\r\n        setAppointmentByPatientId(value);\r\n        setFilter(\"patient\");\r\n    };\r\n    return (\r\n        <>\r\n            <Space>\r\n                <Select\r\n                    onChange={handleChangeOfDoctor}\r\n                    showSearch\r\n                    placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }>\r\n                    {doctorsList}\r\n                </Select>\r\n                <Select value={type} onChange={setType}>\r\n                    <Option value=\"time\">Time</Option>\r\n                    <Option value=\"date\">Date</Option>\r\n                    <Option value=\"week\">Week</Option>\r\n                    <Option value=\"month\">Month</Option>\r\n                    <Option value=\"quarter\">Quarter</Option>\r\n                    <Option value=\"year\">Year</Option>\r\n                </Select>\r\n                <PickerWithType type={type} onChange={value => console.log(value)} />\r\n                <Search\r\n                    placeholder=\"Search Patient By Id\"\r\n                    allowClear\r\n                    enterButton=\"Search\"\r\n                    size=\"medium\"\r\n                    style={{ width: '100%', marginLeft: '200px' }}\r\n                    onSearch={onPatientSearch}\r\n                />\r\n            </Space>\r\n            <br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DoctorAppointment;","import { useState } from 'react';\r\nimport { addMedicine } from '../queries';\r\n\r\nconst useAddMedicine = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addMedicine(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddMedicine;\r\n","import { useState } from 'react';\r\nimport { getAllMedicines } from '../queries';\r\n\r\nconst useMedicineSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllMedicines();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useMedicineSearch;","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\n\r\nconst AddMedicine = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddMedicine();\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Medicine added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    console.log(\"medicines list\", medicines);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"medicineName\": form.name,\r\n            \"medicineType\": form.type,\r\n            \"strength\": form.strength,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Medicine Name',\r\n            dataIndex: 'medicineName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Strength',\r\n            dataIndex: 'strength'\r\n        },\r\n        {\r\n            title: 'Medicine Type',\r\n            dataIndex: 'medicineType',\r\n            filters: [\r\n                {\r\n                    text: 'Aspirin',\r\n                    value: 'aspirin',\r\n                },\r\n                {\r\n                    text: 'Painkillers',\r\n                    value: 'painkiller',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.medicineType.indexOf(value) === 0,\r\n            sorter: (a, b) => a.medicineType.length - b.medicineType.length,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                medicineName: medicine.medicineName,\r\n                price: medicine.price,\r\n                strength: medicine.strength,\r\n                medicineType: medicine.medicineType,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please medicine name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"type\"\r\n                    rules={[{ required: true, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine type\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"strength\"\r\n                    rules={[{ required: true, message: 'Please input strength!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Strength\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Medicine\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddMedicine;","import { useState } from 'react';\r\nimport { addMedicine, addTest } from '../queries';\r\n\r\nconst useAddTest = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addTest(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddTest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Table, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport useAddTest from '../../../state/addMedicine/hooks/useAddTest';\r\nimport Spinner from '../../../components/spinner';\r\nimport useSearchTest from '../../../state/addMedicine/hooks/useSearchTest';\r\n\r\nconst AddTest = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddTest();\r\n    const [medicines, isLoadings, setMedicineSearch] = useSearchTest();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Test added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"testName\": form.name,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Test Name',\r\n            dataIndex: 'testName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.testName - b.testName,\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                testName: medicine.testName,\r\n                price: medicine.price\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please select test name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Test name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Test\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddTest;","import { Button, Col, Form, Row, Space, Table, Tag } from 'antd';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nconst columns = [\r\n    {\r\n        title: 'Package Name',\r\n        dataIndex: 'packageName',\r\n        key: 'packageName',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Package End Date',\r\n        dataIndex: 'packageEndDate',\r\n        key: 'packageEndDate',\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '2',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '3',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n];\r\n\r\nconst Package = () => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            <Link to=\"/home/newPackage\">Create New</Link>\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Package;\r\n","import { useState } from 'react';\r\nimport { getPatientByName } from '../queries';\r\n\r\nconst usePatientByName = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientName) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientByName(patientName);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientByName;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Input, Space, Button, Modal, Descriptions, Select } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport Spinner from '../../components/spinner';\r\nimport usePatientById from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../patientDetails';\r\nimport usePatientByName from '../../state/patientSearch/hooks/usePatientSearchByName';\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nconst PatientSearch = () => {\r\n    const [filterValue, setfilterValue] = useState(\"patientName\");\r\n    const [visible, setVisible] = useState(false);\r\n    const [name, setName] = useState([]);\r\n    const [showPatient, setShowPatient] = useState(\"all\");\r\n    const [patients, isLoading, setRequest] = usePatientSearch();\r\n    const [patientDetails, isLoading1, setPatientSearchbyId] = usePatientById();\r\n    const [patientDetailsByName, isLoading2, setPatientSearchbyName] = usePatientByName();\r\n    let data = [];\r\n\r\n    useEffect(() => {\r\n        if (showPatient === \"all\") {\r\n            setRequest();\r\n        }\r\n    }, [showPatient]);\r\n\r\n    function onPatientSearch(searchValue) {\r\n        console.log(searchValue);\r\n\r\n        if (searchValue == '') {\r\n            setRequest();\r\n            setShowPatient(\"all\");\r\n        } else if (filterValue == \"patientId\") {\r\n            setPatientSearchbyId(searchValue);\r\n            setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"patientName\") {\r\n            setPatientSearchbyName(searchValue);\r\n            setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    if (showPatient == \"patientId\" && patientDetails != null) {\r\n        const row = [{\r\n            key: patientDetails.patientId,\r\n            name: patientDetails.patientName,\r\n            age: patientDetails.age,\r\n            phone: patientDetails.contactNum,\r\n            address: patientDetails.street,\r\n            status: ['registered']\r\n        }];\r\n        data = row;\r\n    }\r\n\r\n    if (showPatient == \"patientName\" && patientDetailsByName != null) {\r\n        data = patientDetailsByName.map((patient, index) => {\r\n            return {\r\n                key: patient.patientId,\r\n                name: patient.patientName,\r\n                age: patient.age,\r\n                phone: patient.contactNum,\r\n                address: patient.street,\r\n                status: ['registered'],\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"all\" && patients.length > 0) {\r\n        data = patients.map((patient, index) => {\r\n            return {\r\n                key: patient.patientId,\r\n                name: patient.patientName,\r\n                age: patient.age,\r\n                phone: patient.contactNum,\r\n                address: patient.street,\r\n                status: ['registered'],\r\n            };\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: text => <span>{text}</span>,\r\n            sorter: (a, b) => a.name.length - b.name.length,\r\n            sortDirections: ['descend', 'ascend'],\r\n        },\r\n        {\r\n            title: 'Age',\r\n            dataIndex: 'age',\r\n            key: 'age',\r\n        },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        let color = tag.length > 5 ? 'geekblue' : 'green';\r\n                        if (tag === 'loser') {\r\n                            color = 'volcano';\r\n                        }\r\n                        return (\r\n                            <Tag color={color} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Registered',\r\n                    value: 'registered',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'discharged',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        console.log(\"abhi nhiiiiiiiiiiii\");\r\n                        setVisible(true);\r\n                        setName(searches => [record]);\r\n                    }}>\r\n                        View records\r\n                    </Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n\r\n    const columnsModal = [\r\n        { title: 'Appointment ID', dataIndex: 'appointmentid', key: 'appointmentid' },\r\n        { title: 'Appointment Date', dataIndex: 'appointmentdate', key: 'appointmentid' },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: '',\r\n            key: 'x',\r\n            render: () => <span>View</span>,\r\n        },\r\n    ];\r\n\r\n    const dataModal = [\r\n        {\r\n            key: 1,\r\n            appointmentid: '3723823d',\r\n            appointmentdate: \"15 Aug 2020\",\r\n            description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n        },\r\n        {\r\n            key: 2,\r\n            appointmentid: '3723823d',\r\n            appointmentdate: \"23 Aug 2020\",\r\n            description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n        },\r\n        {\r\n            key: 3,\r\n            appointmentid: '3723823d',\r\n            appointmentdate: \"30 Aug 2020\",\r\n            description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n        },\r\n        {\r\n            key: 4,\r\n            appointmentid: '3723823d',\r\n            appointmentdate: \"14 Sep 2020\",\r\n            description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"patientName\">Patient Name</Option>\r\n                    <Option value=\"patientId\">Patient Id</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onPatientSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n            <Modal\r\n                title=\"Patient Details\"\r\n                centered\r\n                visible={visible}\r\n                onOk={() => setVisible(false)}\r\n                onCancel={() => setVisible(false)}\r\n                width={1000}\r\n            >\r\n                {name.map((record, index) =>\r\n                    <>\r\n                        <Descriptions key={index}>\r\n                            <Descriptions.Item label=\"Name\">{record.name}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"Phone\">{record.phone}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"Age\">{record.age}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"Address\">\r\n                                {record.address}\r\n                            </Descriptions.Item>\r\n                        </Descriptions>\r\n                        <Table\r\n                            columns={columnsModal}\r\n                            expandable={{\r\n                                expandedRowRender: record => <p style={{ margin: 0 }}>{record.description}</p>,\r\n                                rowExpandable: record => record.appointmentdate !== '14 Aug',\r\n                            }}\r\n                            dataSource={dataModal}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PatientSearch;","import React, { useEffect } from 'react';\r\n\r\nconst Pharmacy = () => {\r\n    return (\r\n        <>\r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pharmacy;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePrescription = (body) => {\r\n    return axios\r\n        .post(`${api.url}/doctorService/savePrescription`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPrescriptionByAppointmentId = (appointmentId) => {\r\n    return axios\r\n        .get(`${api.url}/doctorService/getPrescriptionDetails?appointmentId=` + appointmentId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { savePrescription } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useSavePrescription = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState({});\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await savePrescription(body);\r\n\r\n    setStatus(response);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useSavePrescription;\r\n","import { PrinterOutlined, MinusCircleOutlined, PlusOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useMedicineSearch from '../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useSearchTest from '../../state/addMedicine/hooks/useSearchTest';\r\nimport useSavePrescription from '../../state/prescription/hooks/useSavePrescription';\r\nimport PatientDetails from '../patientDetails';\r\nimport '../prescription/prescription.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst renderTitle = (title) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title, count) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\n\r\n\r\nconst Prescription = ({ location, history }) => {\r\n    let options = [];\r\n    const optionsTests = [];\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [medicineForm] = Form.useForm();\r\n    const [vitalsForm] = Form.useForm();\r\n    const [adviceForm] = Form.useForm();\r\n\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    const [response, isLoading1, setSavePrescription] = useSavePrescription();\r\n    const [tests, isLoading, setTestSearch] = useSearchTest();\r\n    // const [tests, isLoading, setTestSearch] = usePre();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (response.status == \"SUCCESS\") {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient prescription has been generated successfully',\r\n                duration: 3\r\n            });\r\n        } else if (response.status == 500) {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error saving the prescription, please check with admin',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [response]);\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n        console.log('Dawaiyaan', form.getFieldsValue());\r\n        console.log('tests:', medicineForm.getFieldsValue());\r\n        console.log('vitals:', vitalsForm.getFieldsValue());\r\n        const medicineList = medicineForm.getFieldsValue().users;\r\n        const testList = form.getFieldsValue().users;\r\n        const patientVitals = vitalsForm.getFieldsValue();\r\n        const body = {\r\n            appointmentDto: {\r\n                appointmentId: queryParams.appointmentId,\r\n                patientId: queryParams.patientId,\r\n                patientName: queryParams.patientName,\r\n                doctorId: queryParams.doctorId,\r\n                height: patientVitals.height,\r\n                weight: patientVitals.weight,\r\n                Bp: patientVitals.bp,\r\n                temprature: patientVitals.temparature,\r\n                advise: adviceForm.getFieldsValue().advice,\r\n                status: \"done\"\r\n            },\r\n            prescribedMedsDtoList: null,\r\n            prescribedTestingDtoList: null\r\n        };\r\n\r\n        if (medicineList != null && medicineList.length > 0) {\r\n            body.prescribedMedsDtoList = medicineList.map(medicine => {\r\n                return { medName: medicine.medicineName, days: medicine.numberOfDays, dosage: medicine.dosage, comment: medicine.comments };\r\n            });\r\n        }\r\n\r\n        if (testList != null && testList.length > 0) {\r\n            body.prescribedTestingDtoList = testList.map(test => {\r\n                return {\r\n                    testName: test.testName,\r\n                    dateOfBooking: test.date,\r\n                    comment: test.comments\r\n                };\r\n            });\r\n        }\r\n        setSavePrescription(body);\r\n        setSubmitted(true);\r\n    };\r\n    const handleSearch = (value) => {\r\n        setMedicineSearch();\r\n    };\r\n\r\n    const handleTestSearch = (value) => {\r\n        setTestSearch();\r\n    };\r\n\r\n    if (tests.length > 0) {\r\n        tests.forEach(test => {\r\n            optionsTests.push({ value: test.testName });\r\n        });\r\n    }\r\n\r\n    if (medicines.length > 0) {\r\n        var map = new Map();\r\n\r\n        medicines.forEach(medicine => {\r\n            if (map.has(medicine.medicineType)) {\r\n                map.set(medicine.medicineType, [...map.get(medicine.medicineType), medicine.medicineName]);\r\n            } else {\r\n                map.set(medicine.medicineType, [medicine.medicineName])\r\n            }\r\n        });\r\n        console.log(map);\r\n        for (let [key, value] of map) {\r\n            console.log(key + \" = \" + value);\r\n            options.push({\r\n                label: renderTitle(key),\r\n                options: value.map(val => renderItem(val, 100)),\r\n            });\r\n        }\r\n    }\r\n    let formActions = <Button size=\"large\" type=\"primary\">Submit</Button>;\r\n    if (submitted && response.status != 500) {\r\n        formActions = (<><Button type=\"primary\" shape=\"round\" onClick={() => {\r\n            history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + queryParams.patientId + '&doctorId=' + queryParams.doctorId + '&appointmentId=' + queryParams.appointmentId });\r\n        }} icon={<PrinterOutlined />} size='large'>Print</Button>\r\n            <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large' onClick={value => history.push({ pathname: '/home/doctorAppointment' })}>Go to My Appoinments</Button></>);\r\n    }\r\n    return (\r\n        <>\r\n            <PatientDetails patientId={queryParams.patientId} />\r\n            <br></br>\r\n            <Divider>Patient Vitals</Divider>\r\n\r\n            <Form\r\n                form={vitalsForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"BP\" name=\"bp\">\r\n                            <InputNumber name=\"bp\" style={{ width: '90%' }} placeholder=\"Blood pressure\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Temparature\" name=\"temparature\">\r\n                            <InputNumber name=\"temparature\" style={{ width: '90%' }} placeholder=\"Temp In degrees Celsius\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Height\" name=\"height\">\r\n                            <InputNumber name=\"height\" style={{ width: '90%' }} placeholder=\"Height in feet\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Weight\" name=\"weight\">\r\n                            <Input name=\"weight\" style={{ width: '90%' }} placeholder=\"Weight in (kgs)\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </Form>\r\n            <Divider>Prescribe Medicines</Divider>\r\n            {/* <PrescribeMedicine /> */}\r\n\r\n            <Form name=\"dynamic_form_nest_item\" form={medicineForm} onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map((field, index) => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'medicineName']}\r\n                                            fieldKey={[field.fieldKey, 'medicineName']}\r\n                                            rules={[{ required: true, message: 'Missing Medicine name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleSearch}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Medicine\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'dosage']}\r\n                                            fieldKey={[field.fieldKey, 'dosage']}\r\n                                            rules={[{ required: true, message: 'Missing Dosage' }]}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Dosage per day (M-A-N)\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">1-0-0</Option>\r\n                                                <Option value=\"1-1-0\">1-1-0</Option>\r\n                                                <Option value=\"1-1-1\">1-1-1</Option>\r\n                                                <Option value=\"0-0-1\">0-0-1</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'numberOfDays']}\r\n                                            fieldKey={[field.fieldKey, 'numberOfDays']}\r\n                                            rules={[{ required: true, message: 'Missing Number of days' }]}\r\n                                        >\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Medicines\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n\r\n            <br></br>\r\n            <Divider>Prescribe Tests</Divider>\r\n            <Form name=\"dynamic_form_nest_item2\" form={form} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'testName']}\r\n                                            fieldKey={[field.fieldKey, 'testName']}\r\n                                            rules={[{ required: true, message: 'Missing test name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleTestSearch}\r\n                                                style={{ width: 200 }}\r\n                                                options={optionsTests}\r\n                                                placeholder=\"Type test name\"\r\n                                                filterOption={(inputValue, option) =>\r\n                                                    option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                                                }\r\n                                            />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'date']}\r\n                                            fieldKey={[field.fieldKey, 'date']}\r\n                                            rules={[{ required: false }]}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Tests\r\n                                   </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                form={adviceForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={20}>\r\n                        <Form.Item name='advice' label=\"Summary\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <Row>\r\n                <Col span={12} onClick={onFinish} offset={11}>\r\n                    {formActions}\r\n                </Col>\r\n            </Row>\r\n        </>);\r\n};\r\n\r\nexport default Prescription;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport useRegistration from '../../state/registration/hooks/useRegistration';\r\nimport Spinner from '../../components/spinner';\r\nimport { registration } from '../../state/registration/queries';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst Registration = ({ location, history }) => {\r\n    const onFinish = formData => {\r\n\r\n        const form = formData.user;\r\n        const body = {\r\n            \"patientName\": form.name,\r\n            \"age\": form.age,\r\n            \"contactNum\": form.phone,\r\n            \"altContactNum\": form.alternatecontact,\r\n            \"street\": form.address,\r\n            \"state\": form.state,\r\n            \"country\": form.country,\r\n            \"visitType\": form.visit\r\n        };\r\n        registration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient has been registered successfully',\r\n                duration: 3\r\n            });\r\n            history.push({ pathname: '/home/billing', search: '?patientId=' + data.patientId + '&receiptId=' + data.recieptId + '&context=registration' });\r\n        }).catch(errr => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error in registration',\r\n                duration: 3\r\n            });\r\n\r\n        });\r\n        // setRequest(body);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'gender']} label=\"Gender\" rules={[{ required: true }]}>\r\n                    <Select\r\n                        placeholder=\"Select Gender\"\r\n                        allowClear>\r\n                        <Option value=\"male\">male</Option>\r\n                        <Option value=\"female\">female</Option>\r\n                        <Option value=\"other\">other</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'email']} label=\"Email\" rules={[{ type: 'email' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'age']} label=\"Age\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'phone']} label=\"Phone Number\" rules={[{ required: true, message: 'Please input your phone number!' }]}>\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'alternatecontact']} label=\"Alternate Contact Number\">\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'address']} label=\"Address\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'state']} label=\"State\">\r\n                    <Select\r\n                        defaultValue=\"bihar\"\r\n                        placeholder=\"Select State\"\r\n                        allowClear>\r\n                        <Option value=\"bihar\">Bihar</Option>\r\n                        <Option value=\"up\">UP</Option>\r\n                        <Option value=\"Karnataka\">Karnataka</Option>\r\n                        <Option value=\"Jharkhand\">Jharkhand</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'country']} label=\"Country\">\r\n                    <Select\r\n                        defaultValue=\"india\"\r\n                        placeholder=\"Select Country\"\r\n                        allowClear>\r\n                        <Option value=\"india\">India</Option>\r\n                        <Option value=\"us\">US</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'visit']} label=\"Visit Type\" >\r\n                    <Select placeholder=\"Select Visit type\">\r\n                        <Option value=\"general\">General</Option>\r\n                        <Option value=\"emergency\">Emergency</Option>\r\n                        <Option value=\"referral\">Referral</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" size='large' htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, { useEffect } from 'react';\r\nimport { Carousel } from 'antd';\r\nimport corousal1 from '../../../assets/images/corousal1.jpg';\r\nimport corousal2 from '../../../assets/images/corousal2.jpg';\r\nimport corousal3 from '../../../assets/images/corousal3.jpg';\r\nimport corousal4 from '../../../assets/images/corousal4.jpg';\r\nimport '../homescreen/homescreen.css';\r\nconst contentStyle = {\r\n    height: '700px',\r\n    color: '#fff',\r\n    lineHeight: '500px',\r\n    textAlign: 'center',\r\n    background: '#364d79',\r\n    fontSize: \"32px\"\r\n};\r\n\r\n\r\n\r\nconst HomeScreen = () => {\r\n    return (\r\n        <Carousel autoplay>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal1})` }}>\r\n                    Welcome to Baymax Healthcare\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal2})` }}>\r\n                    Manage everything from central place\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal3})` }}>\r\n                    Secure and reliable\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal4})` }}>\r\n                    Access records from anywhere\r\n                </div>\r\n            </div>\r\n        </Carousel>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import { useState } from 'react';\r\nimport { getPharmacyMedicineDetail } from '../queries';\r\n\r\nconst useGetPharmacyMedicineDetail = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPharmacyMedicineDetail(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicineDetail;","import React, { useState, useEffect } from 'react';\r\nimport { PlusOutlined, OrderedListOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport { medicineDistributionUnits } from './utils';\r\nimport queryString from 'query-string';\r\nimport useSavePharmacyMedicine from '../../../state/pharmacy/hooks/useSavePharmacyMedicine';\r\nimport useGetPharmacyMedicineDetail from '../../../state/pharmacy/hooks/useGetMedicinedetail';\r\nimport { setNestedObjectValues } from 'formik';\r\nimport { savePharmacyMedicine } from '../../../state/pharmacy/queries';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst medicineUnits = medicineDistributionUnits.map(medicineDistributionUnit => <Option key={medicineDistributionUnit}>{medicineDistributionUnit}</Option>);\r\nconst AddNewMedicine = ({ location, history }) => {\r\n    let index = 0;\r\n    const [form] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Aspirin', 'Tablets', 'Syrup']);\r\n    const [medicineDetail, setRequest1] = useGetPharmacyMedicineDetail();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            setRequest1(queryParams.medicineId);\r\n        }\r\n    }, []);\r\n\r\n    if (medicineDetail != null && queryParams.mode == \"edit\") {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: medicineDetail.medicineId,\r\n                medicineName: medicineDetail.medicineName,\r\n                genericName: medicineDetail.genericName,\r\n                boxSize: Number.parseInt(medicineDetail.boxSize),\r\n                expDate: medicineDetail.expiryDate,\r\n                medicineShelf: medicineDetail.medicineShelf,\r\n                details: medicineDetail.details,\r\n                category: medicineDetail.category,\r\n                unit: medicineDetail.unit,\r\n                triggerValue: Number.parseFloat(medicineDetail.triggerValue),\r\n                image: medicineDetail.image,\r\n                salePrice: Number.parseFloat(medicineDetail.salePrice),\r\n                supplierPrice: medicineDetail.suppliersPrice,\r\n                tax: medicineDetail.tax,\r\n                supplierName: medicineDetail.supplierName,\r\n                availability: medicineDetail.availability,\r\n                stockQuantity: medicineDetail.stockQuantity,\r\n            }\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        console.log(form);\r\n        const body = {\r\n            medicineName: form.medicineName,\r\n            genericName: form.genericName,\r\n            boxSize: form.boxSize,\r\n            details: form.details,\r\n            category: form.category,\r\n            unit: form.unit,\r\n            triggerValue: form.triggerValue,\r\n            image: form.image,\r\n            salePrice: form.salePrice,\r\n            availability: form.availability,\r\n            stockQuantity: form.stockQuantity\r\n        };\r\n\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            body[\"medicineId\"] = queryParams.medicineId;\r\n        }\r\n\r\n        savePharmacyMedicine(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Medicine ${form.medicineName} ${queryParams.mode == 'edit' ? 'edited' : 'added'} successfully`,\r\n                duration: 3\r\n            });\r\n            clearForm();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while saving Medicine`,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n    function clearForm() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: null,\r\n                medicineName: \"\",\r\n                genericName: \"\",\r\n                boxSize: 0,\r\n                details: \"\",\r\n                category: \"\",\r\n                unit: \"\",\r\n                triggerValue: 0,\r\n                image: null,\r\n                salePrice: 0,\r\n                availability: \"In stock\",\r\n                stockQuantity: 0\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageSuppliers' });\r\n            }} type=\"dashed\" icon={<PlusOutlined />}>Add Supplier</Button>\r\n            <Button type=\"dashed\" onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button>\r\n            <br /><br /><br />\r\n            <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'availability']} label=\"Availability\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"In stock\">In Stock</Option>\r\n                                <Option value=\"Out of stock\">Out Of Stock</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'stockQuantity']} label=\"Stock Quantity\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineName']} label=\"Medicine Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'genericName']} label=\"Generic Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'boxSize']} label=\"Box Size\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'expiryDate']} label=\"Expiry Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineShelf']} label=\"Medicine Shelf\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'details']} label=\"Details\">\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'category']} label=\"Category\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select category\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'unit']} label=\"Unit\">\r\n                            <Select\r\n                                showSearch\r\n                                placeholder=\"Select Distribution Unit\" style={{ width: '100%' }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {medicineUnits}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'image']} label=\"Image\">\r\n                            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\r\n                                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'triggerValue']} label=\"Reorder value\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salePrice']} label=\"Sale price per unit\" rules={[{ required: true }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save and Add another\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default AddNewMedicine;\r\n","export const medicineDistributionUnits = [\"ampoule\",\r\n    \"bag\",\r\n    \"bottle\",\r\n    \"box\",\r\n    \"bundle\",\r\n    \"capsule\",\r\n    \"case\",\r\n    \"container\",\r\n    \"cream\",\r\n    \"each\",\r\n    \"gel\",\r\n    \"nebule\",\r\n    \"ointment\",\r\n    \"pack\",\r\n    \"pair\",\r\n    \"pallet\",\r\n    \"patch\",\r\n    \"pcs\",\r\n    \"pill\",\r\n    \"plastic\",\r\n    \"polyamp\",\r\n    \"roll\",\r\n    \"spray\",\r\n    \"suppository\",\r\n    \"suspension\",\r\n    \"set\",\r\n    \"syrup\",\r\n    \"tablet\",\r\n    \"tray\",\r\n    \"tube\",\r\n    \"vial\", \r\n    \"strips\"];","export const SERVER_ERROR =`Server error, Please contact Administrator at (+91-8142638458)`;\r\n","import { Space, Table, Input, Select, Typography, notification } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport { getPharmacyMedicineList, getPharmacyMedicineListByName, deleteMedicine } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nconst { Text } = Typography;\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         name: 'Paraceta',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217',\r\n//         stock: 100\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n// ];\r\n\r\nconst ManageMedicines = ({ location, history }) => {\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text, record) => (\r\n                <Text type={record.stockQuantity - record.triggerValue > 0 ? 'success' : 'danger'}>{text}</Text>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Category',\r\n            dataIndex: 'category',\r\n            key: 'category',\r\n            filters: [\r\n                {\r\n                    text: 'Tablet',\r\n                    value: 'Tablet',\r\n                },\r\n                {\r\n                    text: 'Syrup',\r\n                    value: 'Syrup',\r\n                }\r\n            ],\r\n            onFilter: (value, record) => record.category == value,\r\n            sorter: (a, b) => a.category - b.category,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Purchase Price',\r\n            dataIndex: 'supplierPrice',\r\n            key: 'supplierPrice',\r\n        },\r\n        {\r\n            title: 'Selling Price',\r\n            dataIndex: 'salePrice',\r\n            key: 'salePrice',\r\n        },\r\n        {\r\n            title: 'Generic name',\r\n            dataIndex: 'genericName',\r\n            key: 'genericName',\r\n        },\r\n        {\r\n            title: 'Expiry date',\r\n            dataIndex: 'expDate',\r\n            key: 'expDate',\r\n        },\r\n        {\r\n            title: 'Stock',\r\n            dataIndex: 'availability',\r\n            key: 'availability',\r\n        },\r\n        {\r\n            title: 'Stock Quantity',\r\n            dataIndex: 'stockQuantity',\r\n            key: 'stockQuantity',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=prefetch' + '&medicineName=' + record.name });\r\n                    }}>Place Order</a>\r\n                    {/* <a>Stock</a> */}\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addNewMedicine', search: '?mode=edit' + '&medicineId=' + record.medicineId });\r\n                    }}>Edit</a>\r\n                    <a onClick={() => {\r\n                        deleteMedicineRecord(record.medicineId);\r\n                    }}>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [medicineData, setMedicineData] = useState([]);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [filterValue, setfilterValue] = useState(\"medicineName\");\r\n    useEffect(() => {\r\n        getAllMedicines();\r\n    }, []);\r\n\r\n    if (medicineData.length > 0) {\r\n        const tempData = [];\r\n        medicineData.forEach((medicine, index) => {\r\n            tempData.push({\r\n                key: index,\r\n                name: medicine.medicineName,\r\n                medicineId: medicine.medicineId,\r\n                category: medicine.category,\r\n                supplierPrice: medicine.supplierPrice,\r\n                triggerValue: medicine.triggerValue,\r\n                salePrice: medicine.salePrice,\r\n                genericName: medicine.genericName,\r\n                expDate: medicine.expDate,\r\n                availability: medicine.availability,\r\n                stockQuantity: medicine.stockQuantity\r\n            });\r\n        });\r\n        data = [...tempData];\r\n    }\r\n\r\n    function onMedicineSearch(value) {\r\n        getPharmacyMedicineListByName(value).then(data => {\r\n            if (data) {\r\n                setMedicineData([...data]);\r\n            }\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: `Error while searching`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function deleteMedicineRecord(medicineId) {\r\n        deleteMedicine(medicineId).then(data => {\r\n            getAllMedicines();\r\n            notification[\"success\"]({\r\n                message: 'Success',\r\n                description: 'Medicine deleted successfully',\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function getAllMedicines() {\r\n        getPharmacyMedicineList().then(data => {\r\n            setMedicineData([...data]);\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"medicineName\">Medicine Name</Option>\r\n                    <Option value=\"genericName\">Generic Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onMedicineSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageMedicines;","import { useState } from 'react';\r\nimport { getPurchaseOrderList } from '../queries';\r\n\r\nconst UseGetAllPurchaseOrder = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPurchaseOrderList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default UseGetAllPurchaseOrder;","import { useState } from 'react';\r\nimport { deletePurchaseOrder } from '../queries';\r\n\r\nconst useDeletePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    const response = await deletePurchaseOrder(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n    } else {\r\n      setStatus(false);\r\n    }\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useDeletePurchaseOrder;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space, notification, Input, Select } from 'antd';\r\nimport UseGetAllPurchaseOrder from '../../../state/pharmacy/hooks/UseGetAllPurchaseOrders';\r\nimport useDeletePurchaseOrder from '../../../state/pharmacy/hooks/useDeletePurchaseOrder';\r\nimport { getRenderPropValue } from 'antd/lib/_util/getRenderPropValue';\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n// ];\r\n\r\nfunction resolveTag(tag) {\r\n    if (tag == \"cancelled\") {\r\n        return \"red\";\r\n    } else if (tag == \"orderPlaced\") {\r\n        return \"orange\";\r\n    } else {\r\n        return \"green\";\r\n    }\r\n\r\n}\r\nconst PurchaseOrder = ({ location, history }) => {\r\n\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Invoice No.',\r\n            dataIndex: 'invoiceNumber',\r\n            key: 'invoiceNumber',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Order Date',\r\n            dataIndex: 'orderDate',\r\n            key: 'orderDate',\r\n            render: text => <a>{text}</a>,\r\n            sorter: (a, b) => a.orderDate - b.orderDate,\r\n        },\r\n        {\r\n            title: 'Delivery Date',\r\n            dataIndex: 'deliveryDate',\r\n            key: 'deliveryDate',\r\n            sorter: (a, b) => a.deliveryDate - b.deliveryDate,\r\n        },\r\n        {\r\n            title: 'Supplier',\r\n            dataIndex: 'supplier',\r\n            key: 'supplier',\r\n            filters: [\r\n                {\r\n                    text: 'ACME',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'GSK',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Medimex',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.supplier == value,\r\n        },\r\n        {\r\n            title: 'Store',\r\n            dataIndex: 'store',\r\n            key: 'store',\r\n        },\r\n        {\r\n            title: 'Total Amount',\r\n            dataIndex: 'totalAmount',\r\n            key: 'totalAmount',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color={resolveTag(tag)} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Cancelled',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Order Placed',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=edit' + '&purchaseOrderId=' + record.purchaseOrderId });\r\n                    }}>View</a>\r\n                    <a onClick={() => deletePurchaseOrder(record)}>Cancel</a>\r\n                    {/* <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>edit</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [filterValue, setfilterValue] = useState(\"invoiceNumber\");\r\n    const [purchaseOrders, isLoading, setGetAllPurchaseOrder] = UseGetAllPurchaseOrder();\r\n    const [status, setDeletePurchaseOrder] = useDeletePurchaseOrder();\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n        setGetAllPurchaseOrder();\r\n    }, []);\r\n\r\n    function deletePurchaseOrder(record) {\r\n        const body = {\r\n            purchaseOrderId: record.purchaseOrderId,\r\n            supplierName: null,\r\n            orderDate: null,\r\n            storeName: null,\r\n            // totalAmount: null,\r\n            deliveryDate: null,\r\n            rol: null,\r\n            productDetails: null,\r\n        };\r\n        setDeletePurchaseOrder(body);\r\n    }\r\n    if (purchaseOrders.length > 0) {\r\n        data = purchaseOrders.map((order, index) => {\r\n            return {\r\n                key: index,\r\n                invoiceNumber: order.invoiceNumber,\r\n                purchaseOrderId: order.purchaseOrderId,\r\n                orderDate: (new Date(order.orderDate)).toDateString(),\r\n                deliveryDate: (new Date(order.deliveryDate)).toDateString(),\r\n                supplier: order.supplierName,\r\n                store: order.storeName,\r\n                totalAmount: order.totalAmount,\r\n                status: (order.status != null ? [order.status] : ['Order Placed'])\r\n            };\r\n        });\r\n    }\r\n    function onOrderSearch(searchValue) {\r\n\r\n        if (searchValue == '') {\r\n            // setRequest();\r\n            // // setShowPatient(\"all\");\r\n        } else if (filterValue == \"invoiceNumber\") {\r\n            // setPatientSearchbyId(searchValue);\r\n            // setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"supplierName\") {\r\n            // setPatientSearchbyName(searchValue);\r\n            // setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"invoiceNumber\">Invoice Number</Option>\r\n                    <Option value=\"supplierName\">Supplier</Option>\r\n                    {/* <Option value=\"SupplierName\">Supplier Name</Option> */}\r\n                </Select>\r\n                <Input.Search onSearch={onOrderSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getSuppliersList } from '../queries';\r\n\r\nconst useGetAllSuppliers = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getSuppliersList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetAllSuppliers;","import { useState } from 'react';\r\nimport { savePurchaseOrder } from '../queries';\r\n\r\nconst useSavePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const request = async (body) => {\r\n    const response = await savePurchaseOrder(body);\r\n\r\n    setStatus(response);\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useSavePurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getPurchaseOrderDetails } from '../queries';\r\n\r\nconst useGetPurchaseOrderDetails = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPurchaseOrderDetails(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPurchaseOrderDetails;","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useSavePurchaseOrder from '../../../state/pharmacy/hooks/useSavePurchaseOrder';\r\nimport useGetPurchaseOrderDetails from '../../../state/pharmacy/hooks/useGetPurchaseOrderDetails';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPurchaseOrder = ({ location, history }) => {\r\n    const medicineMap = new Map();\r\n    let options = [];\r\n    const supplierOptions = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    let index = 0;\r\n    const [purchaseDetailsForm] = Form.useForm();\r\n    const [productListForm] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n    const [suppliers, isLoadings, setSupplierSearch] = useGetAllSuppliers();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [status, setSavePurchaseOrder] = useSavePurchaseOrder();\r\n    const [orderDetail, setGetPurchaseOrderDetails] = useGetPurchaseOrderDetails();\r\n    // const [purchaseOrderList, isLoading1, setPurchaseOrderListFetch] = UseGetAllPurchaseOrder();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setSupplierSearch();\r\n        if (status && submitted) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n            setSubmitted(false);\r\n        }\r\n        if (queryParams.mode == \"edit\" && queryParams.purchaseOrderId != null && submitted == false && status == false) {\r\n            setGetPurchaseOrderDetails(queryParams.purchaseOrderId);\r\n        }\r\n    }, [status, submitted]);\r\n\r\n\r\n    if (orderDetail != null) {\r\n        console.log(orderDetail);\r\n        purchaseDetailsForm.setFieldsValue({\r\n            user: {\r\n                supplierName: orderDetail.supplierName,\r\n                orderDate: moment(new Date(orderDetail.orderDate), 'YYYY-MM-DD'),\r\n                storeName: orderDetail.storeName,\r\n                status: orderDetail.status,\r\n                invoiceNumber: orderDetail.invoiceNumber,\r\n                deliveryDate: moment(new Date(orderDetail.deliveryDate), 'YYYY-MM-DD'),\r\n                rol: orderDetail.rol\r\n            }\r\n        });\r\n        productListForm.setFieldsValue({\r\n            user: {\r\n                totalAmount: orderDetail.totalAmount,\r\n                totalGST: orderDetail.totalGST,\r\n                totalDiscount: orderDetail.totalDiscount,\r\n            }\r\n        });\r\n        if (orderDetail.productDetails != null) {\r\n            const productList = [];\r\n            orderDetail.productDetails.forEach(product => {\r\n                productList.push({\r\n                    productId: product.productId,\r\n                    productName: product.productName,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    batchNumber: product.batchNumber,\r\n                    expiryDate: moment(new Date(product.expiryDate), 'YYYY-MM-DD'),\r\n                    discount: product.discount,\r\n                    tax: product.tax,\r\n                });\r\n            });\r\n            productListForm.setFieldsValue({\r\n                users: [...productList]\r\n            });\r\n        }\r\n\r\n    }\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach(supplier => {\r\n            supplierOptions.push({ value: supplier.supplierName, label: supplier.supplierName });\r\n        });\r\n    }\r\n    if (medicines.length > 0) {\r\n        medicines.forEach(medicine => {\r\n            options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            medicineMap.set(medicine.medicineName, medicine);\r\n        });\r\n    }\r\n    if (queryParams.mode == \"prefetch\") {\r\n\r\n        productListForm.setFieldsValue({\r\n            users: [{\r\n                productId: null,\r\n                productName: queryParams.medicineName,\r\n                quantity: 1,\r\n                unit: \"\",\r\n                purchaseCost: \"\",\r\n                batchNumber: \"\",\r\n                expDate: \"\",\r\n                discount: \"\",\r\n                tax: \"\"\r\n            }]\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const purchaseDetails = purchaseDetailsForm.getFieldsValue().user;\r\n        const productList = productListForm.getFieldsValue().users;\r\n        const finalCharges = productListForm.getFieldsValue().user;\r\n        const body = {\r\n            purchaseOrderId: queryParams.purchaseOrderId,\r\n            supplierName: purchaseDetails.supplierName,\r\n            orderDate: purchaseDetails.orderDate,\r\n            storeName: purchaseDetails.storeName,\r\n            invoiceNumber: purchaseDetails.invoiceNumber,\r\n            totalAmount: finalCharges.totalAmount,\r\n            totalGST: finalCharges.totalGST,\r\n            totalDiscount: finalCharges.totalDiscount,\r\n            deliveryDate: purchaseDetails.deliveryDate,\r\n            rol: purchaseDetails.rol,\r\n            status: purchaseDetails.status,\r\n            productDetails: [],\r\n        };\r\n        if (productList != null && productList.length > 0) {\r\n            productList.forEach(product => {\r\n                const medicine = medicineMap.get(product.productName);\r\n                body.productDetails.push({\r\n                    productId: product.productId,\r\n                    purchaseOrderId: queryParams.purchaseOrderId,\r\n                    medicineId: medicine.medicineId,\r\n                    productName: product.productName,\r\n                    batchNumber: product.batchNumber,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    discount: product.discount,\r\n                    tax: product.tax\r\n                });\r\n            });\r\n        }\r\n        setSubmitted(true);\r\n        setSavePurchaseOrder(body);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n        // setMedicineSearch();\r\n    }\r\n\r\n    const onSearchSupplier = (value) => {\r\n        // setSupplierSearch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/purchaseOrderList' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button>\r\n            <br /><br /><br />\r\n            <Form form={purchaseDetailsForm}  {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'rol']} label=\"ROL\">\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear>\r\n                                <Option value=\"orderPlaced\">Order Placed</Option>\r\n                                <Option value=\"delivered\">Delivered</Option>\r\n                                <Option value=\"cancelled\">Cancelled</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'supplierName']} label=\"Suppliers Name\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                onSearch={onSearchSupplier}\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                                options={supplierOptions}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Supplier name\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'deliveryDate']} label=\"Delivery Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'invoiceNumber']} label=\"Invoice Number\">\r\n                            <Input style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'orderDate']} label=\"Order Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'storeName']} label=\"Store Name\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select Store\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'salesStartDate']} label=\"Sales Start Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salesEndDate']} label=\"Sales End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form form={productListForm} name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'batchNumber']}\r\n                                            fieldKey={[field.fieldKey, 'batchNumber']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 150 }} placeholder=\"Batch No.\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'unit']}\r\n                                            fieldKey={[field.fieldKey, 'unit']}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Unit\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">bottle</Option>\r\n                                                <Option value=\"1-1-0\">box</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'purchaseCost']}\r\n                                            fieldKey={[field.fieldKey, 'purchaseCost']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 150 }} placeholder=\"Purchase Cost\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'expiryDate']}\r\n                                            fieldKey={[field.fieldKey, 'expiryDate']}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'discount']}\r\n                                            fieldKey={[field.fieldKey, 'discount']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"discount\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'tax']}\r\n                                            fieldKey={[field.fieldKey, 'tax']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"tax\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalGST']} label=\"Total GST\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalDiscount']} label=\"Total Discount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPurchaseOrder;\r\n","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst IndentPreparation = () => {\r\n    let options = [];\r\n    let index = 0;\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientId']} label=\"Patient Search\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Reg. No\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'indentDate']} label=\"Indent Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientName']} label=\"Patient Name\">\r\n                            <Input placeholder=\"Patient Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'consultantName']} label=\"Consultant Name\">\r\n                            <Input placeholder=\"Consultant Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'mobileNumber']} label=\"Mobile\">\r\n                            <Input placeholder=\"Mobile Number\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'comments']} label=\"Comments\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'address']} label=\"Address\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'uom']}\r\n                                            fieldKey={[field.fieldKey, 'uom']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 125 }} placeholder=\"UOM\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'mrp']}\r\n                                            fieldKey={[field.fieldKey, 'mrp']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"MRP\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'stockQuantity']}\r\n                                            fieldKey={[field.fieldKey, 'stockQuantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Stock Quantity\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item htmlType=\"submit\">\r\n                            <Button type=\"primary\">\r\n                                Bill\r\n                            </Button>\r\n                            <Button type=\"primary\" style={{ marginLeft: '15px' }} >\r\n                                Add New\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default IndentPreparation;","import { useState } from 'react';\r\nimport { saveSupplier } from '../queries';\r\n\r\nconst useAddSupplier = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n    const response = await saveSupplier(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddSupplier;\r\n","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table, Space } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useAddSupplier from '../../../state/pharmacy/hooks/useAddSupplier';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\n\r\nconst ManageSupplier = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddSupplier();\r\n    const [suppliers, isLoadings, setMedicineSearch] = useGetAllSuppliers();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Supplier added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (suppliers.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = formData => {\r\n        const body = {\r\n            \"supplierName\": formData.name,\r\n            \"email\": formData.email,\r\n            \"phoneNumber\": formData.phone,\r\n            \"address\": formData.address,\r\n        };\r\n        setRequest(body);\r\n        form.setFieldsValue({\r\n            \"name\": \"\",\r\n            \"email\": \"\",\r\n            \"phone\": \"\",\r\n            \"address\": \"\",\r\n        });\r\n        \r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'supplierName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email'\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber'\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={()=> editSupplier(record)}>Edit</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    function editSupplier(record) {\r\n        form.setFieldsValue({\r\n            \"name\": record.supplierName,\r\n            \"email\": record.email,\r\n            \"phone\": record.phoneNumber,\r\n            \"address\": record.address,\r\n        });\r\n    }\r\n\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach((supplier, index) => {\r\n            data.push({\r\n                key: index,\r\n                supplierId: supplier.supplierId,\r\n                supplierName: supplier.supplierName,\r\n                email: supplier.email,\r\n                phoneNumber: supplier.phoneNumber,\r\n                address: supplier.address,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Supplier name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[{ required: false, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    rules={[{ required: false, message: 'Please input contact!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Contact\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"address\"\r\n                    rules={[{ required: false, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Address\" />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Supplier\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageSupplier;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space } from 'antd';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Patient Reg No',\r\n        dataIndex: 'regNo',\r\n        key: 'regNo',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Patient Name',\r\n        dataIndex: 'patientName',\r\n        key: 'patientName',\r\n    },\r\n    {\r\n        title: 'Indent Date and Time',\r\n        dataIndex: 'indentDate',\r\n        key: 'indentDate',\r\n    },\r\n    {\r\n        title: 'Submitted By',\r\n        dataIndex: 'submittedBy',\r\n        key: 'submittedBy',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n    },\r\n    {\r\n        key: '2',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n    {\r\n        key: '3',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n];\r\n\r\nconst IndentList = () => {\r\n    return (\r\n        <>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IndentList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\nconst Certificates = () => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'name']} label=\"Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'guardianName']} label=\"Guardian Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'relation']} label=\"Relation\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'dateAndTime']} label=\"Date and time\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <ReactQuill theme=\"snow\" value={value} onChange={setValue} />\r\n\r\n            <Row style={{ textAlign: 'right', marginTop: 30 }}>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Generate\r\n                            </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Certificates;\r\n","import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Form, Input, Switch, InputNumber, Row, Select, Space } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPackage = () => {\r\n    let options = [];\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"dashed\" icon={<PlusOutlined />}>All Packages</Button>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageName']} label=\"Package Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageEndDate']} label=\"Package End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packagePrice']} label=\"Package Price\" rules={[{ required: true, type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\" >\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"price\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPackage;\r\n","import React, { useEffect } from 'react';\r\n\r\nconst InProgress = () => {\r\n    return (\r\n        <>\r\n        <h1 style={{fontSize: '56px'}}>The Page is in Progress ...</h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InProgress;\r\n","import { useState } from 'react';\r\nimport { getPrescriptionByAppointmentId } from '../queries';\r\n\r\nconst useGetPrescriptionByAppointmentId = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (appointmentId) => {\r\n        const response = await getPrescriptionByAppointmentId(appointmentId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPrescriptionByAppointmentId;","import React, { useRef } from 'react';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\nimport './printPrescription.css';\r\nexport class PrintPrescription extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const appointmentId = this.props.appointmentId;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const patientVitals = this.props.patientVitals;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        let medicineTable = \"\";\r\n        let testTable = \"\";\r\n        if (this.props.medicineList != null && this.props.medicineList.length > 0) {\r\n            const medicineList = this.props.medicineList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.medicineName}</td>\r\n                        <td>{item.dosage}</td>\r\n                        <td>{item.days}</td>\r\n                        <td>{item.comment}</td>\r\n                    </tr>)\r\n            });\r\n            medicineTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed medicines</h3>\r\n                <table class=\"itemTable\" >\r\n                    <tr>\r\n                        <th>Medicine Name</th>\r\n                        <th>Dosage</th>\r\n                        <th>Days</th>\r\n                        <th>Comment</th>\r\n                    </tr>\r\n                    {medicineList}\r\n                </table>\r\n            </div>\r\n        }\r\n        if (this.props.testList != null && this.props.testList.length > 0) {\r\n            const testList = this.props.testList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.testName}</td>\r\n                        <td>{item.dateOfBooking}</td>\r\n                        <td>{item.dateOfResult}</td>\r\n                        <td>{item.reportDesc}</td>\r\n                        <td>{item.testDesc}</td>\r\n                    </tr>)\r\n            });\r\n            testTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed tests</h3>\r\n                <table class=\"itemTable\">\r\n                    <tr>\r\n                        <th>Test Name</th>\r\n                        <th>Test Date</th>\r\n                        <th>Report Date</th>\r\n                        <th>Doctor comment</th>\r\n                        <th>Report summary</th>\r\n                    </tr>\r\n                    {testList}\r\n                </table>\r\n            </div>\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Info</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>{patientDetails.patientName}</th>\r\n                            <td>Age</td>\r\n                            <td>{patientDetails.age}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>PatientId</td>\r\n                            <td>{patientId}</td>\r\n                            <td>AppointmentId</td>\r\n                            <td>{appointmentId}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Date</td>\r\n                            <td>{todaysDate}</td>\r\n                            <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Vitals</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Height : {patientVitals.height}</th>\r\n                            <td>Weight : {patientVitals.weight}</td>\r\n                            <td>Bp : {patientVitals.Bp}</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Temperature : {patientVitals.temperature}</td>\r\n                            <td>Disease description : {patientVitals.diseaseDesc}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            {/* <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td> */}\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    {medicineTable}\r\n                    {testTable}\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Appointment summary : {patientVitals.advise}</th>\r\n                        </tr>\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        {/* <div>Cashier Signature</div> */}\r\n                        <div style={{ float: 'right' }}>Doctor's Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Table, Descriptions, Button } from 'antd';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useGetPrescriptionByAppointmentId from '../../../state/prescription/hooks/useGetPrescriptionByAppointmentId';\r\nimport queryString from 'query-string';\r\nimport usePatientById from '../../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../../patientDetails';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport { PrintPrescription } from '../printPrescription';\r\nconst medicinecolumns = [\r\n    {\r\n        title: 'Medicine Name',\r\n        dataIndex: 'medicineName',\r\n    },\r\n    {\r\n        title: 'Dosage',\r\n        dataIndex: 'dosage',\r\n    },\r\n    {\r\n        title: 'Days',\r\n        dataIndex: 'days',\r\n    },\r\n    {\r\n        title: 'Comment',\r\n        dataIndex: 'comment',\r\n    },\r\n];\r\n\r\nconst testcolumns = [\r\n    {\r\n        title: 'Test Name',\r\n        dataIndex: 'testName',\r\n    },\r\n    {\r\n        title: 'Test Date',\r\n        dataIndex: 'dateOfBooking',\r\n    },\r\n    {\r\n        title: 'Report Date',\r\n        dataIndex: 'dateOfResult',\r\n    },\r\n    {\r\n        title: 'Doctor comment',\r\n        dataIndex: 'testDesc',\r\n\r\n    },\r\n    {\r\n        title: 'Report Summary',\r\n        dataIndex: 'reportDesc',\r\n\r\n    }\r\n];\r\n\r\n\r\nconst ViewPrescription = ({ location, history }) => {\r\n    const medicineData = [];\r\n    const testData = [];\r\n\r\n    let appointmentDetails = {\r\n        appointmentId: '',\r\n        diseaseDesc: '',\r\n        advise: '',\r\n        patientId: '',\r\n        patientName: '',\r\n        doctorId: '',\r\n        height: '',\r\n        weight: '',\r\n        Bp: '',\r\n        createdAt: '',\r\n        appointmentDate: '',\r\n        timeSlot: '',\r\n        status: '',\r\n        temperature: ''\r\n    };\r\n\r\n    const queryParams = queryString.parse(location.search);\r\n    const [prescriptionDetails, setPrescriptionDetails] = useGetPrescriptionByAppointmentId();\r\n    const [patientDetails, isLoading, setPatientSearchById] = usePatientById(queryParams.patientId);\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        setPrescriptionDetails(queryParams.appointmentId);\r\n        setPatientSearchById(queryParams.patientId);\r\n    }, []);\r\n\r\n    if (prescriptionDetails != null) {\r\n        console.log(prescriptionDetails);\r\n        if (prescriptionDetails.appointmentDto != null) {\r\n            const appointmentDto = prescriptionDetails.appointmentDto;\r\n            console.log('le bhgat', appointmentDto);\r\n            appointmentDetails = {\r\n                appointmentId: appointmentDto.appointmentId,\r\n                diseaseDesc: appointmentDto.diseaseDesc,\r\n                advise: appointmentDto.advise,\r\n                patientId: appointmentDto.patientId,\r\n                patientName: appointmentDto.patientName,\r\n                doctorId: appointmentDto.doctorId,\r\n                height: appointmentDto.height,\r\n                weight: appointmentDto.weight,\r\n                Bp: appointmentDto.Bp,\r\n                createdAt: appointmentDto.createdAt,\r\n                appointmentDate: appointmentDto.appointmentDate,\r\n                timeSlot: appointmentDto.timeSlot,\r\n                status: appointmentDto.status,\r\n            }\r\n        }\r\n\r\n        if (prescriptionDetails.prescribedMedsDtoList != null) {\r\n            prescriptionDetails.prescribedMedsDtoList.forEach((medicine, index) => {\r\n                medicineData.push({\r\n                    key: medicine.medName + index,\r\n                    medicineName: medicine.medName,\r\n                    dosage: medicine.dosage,\r\n                    days: medicine.days,\r\n                    comment: medicine.comment\r\n\r\n                });\r\n            });\r\n        }\r\n        if (prescriptionDetails.prescribedTestingDtoList != null) {\r\n            prescriptionDetails.prescribedTestingDtoList.forEach((test, index) => {\r\n                testData.push({\r\n                    key: test + index,\r\n                    testName: test.testDesc,\r\n                    dateOfBooking: test.dateOfBooking,\r\n                    dateOfResult: test.dateOfResult,\r\n                    reportDesc: test.reportDesc,\r\n                    testDesc: test.comment,\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" style={{ float: \"right\" }} shape=\"round\" icon={<PrinterOutlined />} size=\"default\" onClick={handlePrint}>\r\n                Print\r\n        </Button>\r\n            <div style={{ display: 'none' }}>\r\n                <PrintPrescription ref={componentRef} patientVitals={appointmentDetails} appointmentId={appointmentDetails.appointmentId} patientId={queryParams.patientId} medicineList={medicineData} testList={testData} patientDetails={patientDetails} />\r\n            </div>\r\n            <h4>Patient Info</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Name\">{patientDetails.patientName} </Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"AppointmentId\">{appointmentDetails.appointmentId}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{patientDetails.visitType}</Descriptions.Item>\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Patient Vitals</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Height\">{appointmentDetails.height}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Weight\">{appointmentDetails.weight}</Descriptions.Item>\r\n                <Descriptions.Item label=\"BP\">{appointmentDetails.Bp}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Temperature\">{appointmentDetails.temperature}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Disease description\">{appointmentDetails.diseaseDesc}</Descriptions.Item>\r\n\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Prescribed Medicines</h4>\r\n            <Table columns={medicinecolumns} dataSource={medicineData} size=\"middle\" />\r\n            <hr />\r\n            <h4>Prescribed Tests</h4>\r\n            <Table columns={testcolumns} dataSource={testData} size=\"middle\" />\r\n            <hr />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Appointment Summary\">{appointmentDetails.advise}</Descriptions.Item>\r\n            </Descriptions>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default ViewPrescription;","export const registration = { label: \"Registration\", link: \"/registration\" }\r\nexport const patientSearch = { label: \"Search Patients\", link: \"/patientSearch\" }\r\nexport const doctorAppointment = { label: \"Doctor Appointment\", link: \"/doctorAppointment\" }\r\nexport const addDoctor = { label: \"Add Doctors\", link: \"/addDoctor\" }\r\nexport const addMedicine = { label: \"Add Medicines\", link: \"/addMedicine\" }\r\nexport const addTest = { label: \"Add Test\", link: \"/addTest\" }\r\nexport const serviceCatalogue = { label: \"Service Catalogue\", link: \"/inProgress\" }\r\nexport const addNewMedicine = { label: \"Add New Medicine\", link: \"/addNewMedicine\" }\r\nexport const manageMedicines = { label: \"Manage Medicines\", link: \"/manageMedicines\" }\r\nexport const purchaseOrderList = { label: \"Purchase Order List\", link: \"/purchaseOrderList\" }\r\nexport const newPurchaseOrder = { label: \"New Purchase Order\", link: \"/newPurchaseOrder\" }\r\nexport const manageSuppliers = { label: \"Manage Suppliers\", link: \"/manageSuppliers\" }\r\nexport const billing = { label: \"Billing\", link: \"/billing\" };\r\nexport const billSearch = { label: \"Bill Search\", link: \"/billSearch\" };\r\nexport const appointment = { label: \"Appointment\", link: \"/appointment\" };\r\nexport const certificates = { label: \"Certificates\", link: \"/certificates\" };\r\nexport const packageManagement = { label: \"Package Management\", link: \"/package\" };\r\nexport const canteen = { label: \"Canteen\", link: \"/canteen\" };\r\nexport const pharmacy = { label: \"Pharmacy\", link: \"/pharmacy\" };\r\nexport const reimbursements = { label: \"Reimbursements\", link: \"/inProgress\" };\r\nexport const insurance = { label: \"Insurance\", link: \"/inProgress\" };\r\nexport const certificateCreation = { label: \"Certificate creation\", link: \"/inProgress\" };\r\nexport const referrals = { label: \"Referrals\", link: \"/inProgress\" };\r\n\r\nexport const doctorRoutes = [doctorAppointment];\r\nexport const pharmacyRoutes = [addNewMedicine, manageMedicines, purchaseOrderList, newPurchaseOrder, manageSuppliers, billing, billSearch];\r\nexport const receptionRoutes = [registration, patientSearch, appointment, billing, billSearch];\r\nexport const upcomingRoutes = [certificates, packageManagement, canteen, pharmacy, reimbursements, insurance, certificateCreation, referrals];\r\nexport const adminRoutes = [addMedicine, addTest, addDoctor, serviceCatalogue]; \r\n","import { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from \"../utils/roles\";\r\nimport { adminRoutes, doctorRoutes, pharmacyRoutes, receptionRoutes, upcomingRoutes } from \"./allRoutesData\";\r\n\r\nconst map = new Map();\r\n\r\nmap.set(ADMIN, adminRoutes);\r\nmap.set(DOCTOR, doctorRoutes);\r\nmap.set(PHARMACY, pharmacyRoutes);\r\nmap.set(RECEPTION, receptionRoutes);\r\nmap.set(UPCOMING, upcomingRoutes);\r\n\r\nexport var getRoutes = function (roleList) {\r\n    const routes = {};\r\n    roleList.forEach(role => {\r\n        routes[role] = map.get(role);\r\n    });\r\n    return routes;\r\n}","import React, { useRef } from 'react';\r\nimport '../components/mainBillView.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class MainBillView extends React.Component {\r\n    render() {\r\n        const billItemList = this.props.billItemList;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = billItemList.map(item => {\r\n            let itemList = [];\r\n            if (item['billDetailList']) {\r\n                itemList = item['billDetailList'].map(billItem => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{(billItem.purchaseType == \"pharmacy-return\" ? billItem.itemName + '(' + billItem.purchaseType + ')' : billItem.itemName)}</td>\r\n                            <td>{billItem.quantity}</td>\r\n                            <td>{billItem.mrp}</td>\r\n                            <td>{billItem.gstPercentage}</td>\r\n                            <td>{billItem.concessionPercentage}</td>\r\n                            <td>{billItem.cost}</td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            }\r\n            return (\r\n                <div style={{ width: '100%' }}>\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Bill Id:</span> {item.billId} &nbsp;&nbsp;\r\n                    <span>Bill Date:</span> {new Date(item.createdAt).toDateString()} &nbsp;&nbsp;\r\n                    <span>Payment Mode:</span> {item.paymentMode}\r\n                    </div>\r\n                    <br />\r\n                    <table class=\"itemTable\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(%)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemList}\r\n                        </tbody>\r\n                    </table>\r\n                    <br />\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Total Amount :</span> {item.totalCost} &nbsp;&nbsp;\r\n                        <span>Total Discount :</span>  {item.totalDiscount} &nbsp;&nbsp;\r\n                        <span>Total GST :</span>  {item.totalGST}\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    {itemArray}\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import { Space, Table, Button, Input, Row, Col, Select, notification } from 'antd';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport moment from 'moment';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport BillSearchComp from '../billing/components/billSearch';\r\nimport { getBillDetails } from '../billing/services';\r\nimport { MainBillView } from './components/mainBillView';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { getBillListByDateRange } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst BillSearch = ({ history }) => {\r\n    const columns = [\r\n        {\r\n            title: 'Bill Id',\r\n            dataIndex: 'billId',\r\n            key: 'billId',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Patient Id',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId'\r\n        },\r\n        {\r\n            title: 'Bill Date',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n        },\r\n        {\r\n            title: 'Bill Total',\r\n            dataIndex: 'totalCost',\r\n            key: 'totalCost',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'paymentStatus',\r\n            key: 'paymentStatus',\r\n            filters: [\r\n                {\r\n                    text: 'dues',\r\n                    value: 'dues',\r\n                },\r\n                {\r\n                    text: 'paid',\r\n                    value: 'paid',\r\n                }\r\n            ],\r\n            onFilter: (value, record) => record.paymentStatus == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/billing', search: '?context=edit' + '&billId=' + record.billId });\r\n                    }}>View/Edit</a>\r\n                    {/* <a onClick={() => {\r\n                        printSingleBill(record);\r\n                    }}>Print</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [data, setData] = useState([]);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [searchCriteria, setSearchFilter] = useState({});\r\n    const [, setSingleBillData] = useState({});\r\n    let mainBillViewButton = \"\";\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    const componentRefSingleBillPrint = useRef();\r\n    useEffect(() => {\r\n        // \r\n    }, []);\r\n\r\n    if (searchCriteria.searchFilter == \"patientId\") {\r\n        console.log(searchCriteria);\r\n        mainBillViewButton = <Button type=\"primary\" onClick={viewMainBill}>View Main Bill</Button>;\r\n    }\r\n\r\n    function viewMainBill() {\r\n        handlePrint();\r\n    }\r\n    function changePatientdetails(patientId) {\r\n        getPatientById(patientId).then(patientDetails => {\r\n            setPatientDetails(patientDetails);\r\n        }).catch(() => {\r\n\r\n        });\r\n    }\r\n\r\n    function onBillSearch(searchValue, searchFilter) {\r\n        if (searchFilter != \"dateRange\") {\r\n            getBillDetails(searchValue, searchFilter).then(response => {\r\n                if (response) {\r\n                    setSearchFilter({\r\n                        searchFilter: searchFilter,\r\n                        searchValue: searchValue\r\n                    });\r\n                    if (searchFilter == \"patientId\") {\r\n                        changePatientdetails(searchValue);\r\n                    }\r\n                    if (response) {\r\n                        const temp = response.map((data, index) => {\r\n                            return {\r\n                                ...data, createdAt: new Date(data.createdAt).toDateString(), key: index\r\n                            }\r\n                        });\r\n                        setData([...temp]);\r\n                    }\r\n\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter} ${searchValue}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: `Error while searching ${searchFilter} ${searchValue}`,\r\n                    duration: 3\r\n                });\r\n            });\r\n        } else {\r\n            getBillListByDateRange(moment(searchValue[1]).toDate().getTime(), moment(searchValue[0]).toDate().getTime(), 'PHARMACY').then(data => {\r\n                console.log(data);\r\n                if (data) {\r\n                    setData([...data]);\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(err => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{ display: 'none' }}>\r\n                <MainBillView ref={componentRef} billItemList={data} patientDetails={patientDetails} patientId={searchCriteria.searchValue} />\r\n                {/* <BillPrint ref={componentRef} itemList={billPrintData} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} /> */}\r\n            </div>\r\n            <Row gutter={24}>\r\n                <Col span={10}>\r\n                    <BillSearchComp onSearch={onBillSearch} />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button type=\"primary\" onClick={() => { history.push({ pathname: '/home/billing' }) }}>Create New bill</Button>\r\n                </Col>\r\n                <Col span={4}>\r\n                    {mainBillViewButton}\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BillSearch;","import { MedicineBoxOutlined, MenuFoldOutlined, MenuUnfoldOutlined, UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons';\r\nimport { Layout, Menu } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport AddDoctor from '../admin/addDoctor';\r\nimport Appointment from '../appointment';\r\nimport Billing from '../billing';\r\nimport Canteen from '../canteen';\r\nimport CanteenStock from '../canteen/canteenStock';\r\nimport DoctorAppointment from '../doctorAppointment';\r\nimport '../home/home.css';\r\nimport AddMedicine from '../medicine/addMedicine';\r\nimport AddTest from '../medicine/addTest';\r\nimport PackageManagement from '../package';\r\nimport PatientSearch from '../patientSearch';\r\nimport Pharmacy from '../pharmacy';\r\nimport Prescription from '../prescription';\r\nimport Registration from '../registration';\r\nimport HomeScreen from './homescreen';\r\nimport AddNewMedicine from '../pharmacy/addNewMedicine';\r\nimport ManageMedicines from '../pharmacy/manageMedicine';\r\nimport PurchaseOrder from '../pharmacy/purchaseOrderList';\r\nimport NewPurchaseOrder from '../pharmacy/newPurchaseOrder';\r\nimport IndentPreparation from '../pharmacy/indentPreparations';\r\nimport ManageSupplier from '../pharmacy/manageSupplier';\r\nimport IndentList from '../pharmacy/indentPreparations/indentList';\r\nimport Certificates from '../certificates';\r\nimport Package from '../package';\r\nimport NewPackage from '../package/newPackage';\r\nimport InProgress from '../inProgress';\r\nimport ViewPrescription from '../prescription/viewPrescription';\r\nimport { useStateValue } from '../../state';\r\nimport { getRoutes } from '../../routes/routeResolver';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\nimport BillSearch from '../billSearch';\r\n\r\nconst { Header, Sider, Content, Footer } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Home = ({ location, history, match }) => {\r\n  const path = match.path;\r\n  let realRoutes = [];\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [itemSelected, setItemSelected] = useState(\"\");\r\n  const [routes, setRoutes] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    // setRoutes(getRoutes([RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING]));\r\n    setRoutes(getRoutes([...auth.roles]));\r\n  }, []);\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n    setItemSelected(\"\");\r\n  };\r\n\r\n  const handleClick = e => {\r\n    setItemSelected(e.key);\r\n  };\r\n\r\n  for (const [roleName, routeList] of Object.entries(routes)) {\r\n    const childroutes = routeList.map(route => {\r\n      return generateRouteObject(route);\r\n    });\r\n    if (auth.roles.length == 1) {\r\n      realRoutes = childroutes;\r\n    } else {\r\n      realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n    }\r\n    // realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n  }\r\n  function generateRouteObject(routeObject) {\r\n    return <Menu.Item key={routeObject.label}><Link to={`${path}${routeObject.link}`}>{routeObject.label}</Link></Menu.Item>\r\n  }\r\n  function subRoutesByRole(routes, roleName) {\r\n    return <SubMenu key={roleName} icon={<UserOutlined />} title={roleName}>{routes}</SubMenu>\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Sider trigger={null} collapsible collapsed={collapsed}>\r\n        <div className=\"logo\" />\r\n        <Menu onSelect={handleClick} theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          {realRoutes}\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n            className: 'trigger',\r\n            onClick: toggle,\r\n          })}\r\n          {itemSelected}\r\n        </Header>\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            margin: '24px 16px',\r\n            padding: 24,\r\n            minHeight: 280,\r\n            overflow: 'auto',\r\n            height: '100vh',\r\n          }}\r\n        >\r\n          <Route exact path=\"/home\" component={HomeScreen} />\r\n          <Route path={`${path}/billing`} component={Billing} />\r\n          <Route path={`${path}/billSearch`} component={BillSearch} />\r\n          <Route path={`${path}/registration`} component={Registration} />\r\n          <Route path={`${path}/patientSearch`} component={PatientSearch} />\r\n          <Route path={`${path}/addDoctor`} component={AddDoctor} />\r\n          <Route path={`${path}/appointment`} component={Appointment} />\r\n          <Route path={`${path}/doctorAppointment`} component={DoctorAppointment} />\r\n          <Route path={`${path}/prescription`} component={Prescription} />\r\n          <Route path={`${path}/addMedicine`} component={AddMedicine} />\r\n          <Route path={`${path}/addTest`} component={AddTest} />\r\n          <Route path={`${path}/packages`} component={PackageManagement} />\r\n          <Route path={`${path}/canteen`} component={Canteen} />\r\n          <Route path={`${path}/canteenStock`} component={CanteenStock} />\r\n          <Route path={`${path}/pharmacy`} component={Pharmacy} />\r\n          <Route path={`${path}/addNewMedicine`} component={AddNewMedicine} />\r\n          <Route path={`${path}/manageMedicines`} component={ManageMedicines} />\r\n          <Route path={`${path}/purchaseOrderList`} component={PurchaseOrder} />\r\n          <Route path={`${path}/newPurchaseOrder`} component={NewPurchaseOrder} />\r\n          <Route path={`${path}/indentPreparation`} component={IndentPreparation} />\r\n          <Route path={`${path}/indentList`} component={IndentList} />\r\n          <Route path={`${path}/certificates`} component={Certificates} />\r\n          <Route path={`${path}/package`} component={Package} />\r\n          <Route path={`${path}/newPackage`} component={NewPackage} />\r\n          <Route path={`${path}/manageSuppliers`} component={ManageSupplier} />\r\n          <Route path={`${path}/inProgress`} component={InProgress} />\r\n          <Route path={`${path}/viewPrescription`} component={ViewPrescription} />\r\n\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>BayMax ©2021</Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { StateProvider } from '../state';\r\nimport { INITIAL_STATE as AUTH_INITIAL_STATE } from '../state/auth/reducers';\r\nimport { INITIAL_STATE as PRODUCT_INITIAL_STATE } from '../state/product/reducers';\r\nimport reducers from '../state/reducers';\r\nimport BaseStyles from './base-styles';\r\nimport PrivateRoute from './private-route';\r\nimport Content from '../components/content';\r\nimport Header from '../components/header';\r\nimport Login from '../views/login';\r\nimport Home from '../views/home';\r\n\r\nconst Root = props => {\r\n  const initialState = {\r\n    auth: AUTH_INITIAL_STATE,\r\n    product: PRODUCT_INITIAL_STATE,\r\n  };\r\n  return (\r\n    <StateProvider initialState={initialState} reducer={reducers}>\r\n      <BaseStyles />\r\n      <Router>\r\n        <>\r\n          <Header />\r\n          <Content>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Login} />\r\n              {/* <PrivateRoute path=\"/home\" component={Home} /> */}\r\n              <Route path=\"/home\" component={Home} />\r\n            </Switch>\r\n          </Content>\r\n        </>\r\n      </Router>\r\n    </StateProvider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Root from './routes';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nrender(<Root />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.e8f986ac.jpg\";"],"sourceRoot":""}