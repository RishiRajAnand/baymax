{"version":3,"sources":["assets/images/corousal1.jpg","assets/images/corousal2.jpg","assets/images/corousal3.jpg","assets/images/corousal4.jpg","state/index.js","state/auth/actions.js","state/auth/reducers.js","utils/roles.js","state/product/reducers.js","state/product/actions.js","state/reducers.js","routes/base-styles.js","components/content.js","components/theme.js","components/button.js","components/header.js","state/auth/hooks/useLogin.js","views/login/containers/container.js","components/form/formGroup.js","components/form/error.js","views/login/containers/form.js","components/spinner.js","views/login/index.js","utils/departmentList.js","utils/services.js","state/registration/queries.js","state/registration/hooks/useDoctorRegistration.js","views/admin/addDoctor/index.js","state/appointment/queries.js","state/appointment/hooks/useBookAppointment.js","state/patientSearch/queries.js","state/patientSearch/hooks/useGetAllDoctorByDepartment.js","state/patientSearch/hooks/useGetAllDoctors.js","state/patientSearch/hooks/usePatientSearchbyId.js","views/patientDetails/index.js","utils/timeSlot.js","utils/constants.js","views/appointment/components/appointmentCardPrint.js","views/appointment/index.js","state/pharmacy/queries.js","state/pharmacy/hooks/useGetAllPharmacyMedicines.js","state/addMedicine/queries.js","state/addMedicine/hooks/useSearchTest.js","views/billing/components/addItemModal.js","views/billing/components/billPrint.js","views/billing/components/finalCharges.js","state/billing/queries.js","state/billing/hooks/useGenerateBill.js","views/billing/services.js","views/billing/components/returnItemModal.js","utils/constantMessages.js","views/billing/index.js","views/billing/components/billSearch.js","views/canteen/index.js","views/canteen/canteenStock/index.js","state/patientSearch/hooks/usePatientSearch.js","state/appointment/hooks/useGetAppointmentsByDoctorId.js","state/appointment/hooks/useGetAppointmentByPatientId.js","views/doctorAppointment/index.js","state/addMedicine/hooks/useAddMedicine.js","state/addMedicine/hooks/useSearchMedicine.js","views/medicine/addMedicine/index.js","state/addMedicine/hooks/useAddTest.js","views/medicine/addTest/index.js","views/package/index.js","views/patientSearch/components/viewPatientRecords.js","views/patientSearch/components/patientSearchComponent.js","state/patientSearch/hooks/usePatientSearchByName.js","views/patientSearch/index.js","views/pharmacy/index.js","state/prescription/queries.js","state/prescription/hooks/useSavePrescription.js","views/prescription/index.js","views/registration/index.js","views/home/homescreen/index.js","state/pharmacy/hooks/useGetMedicinedetail.js","views/pharmacy/addNewMedicine/index.js","views/pharmacy/addNewMedicine/utils.js","views/pharmacy/manageMedicine/index.js","state/pharmacy/hooks/UseGetAllPurchaseOrders.js","state/pharmacy/hooks/useDeletePurchaseOrder.js","views/pharmacy/purchaseOrderList/index.js","state/pharmacy/hooks/useGetAllSupplier.js","state/pharmacy/hooks/useSavePurchaseOrder.js","state/pharmacy/hooks/useGetPurchaseOrderDetails.js","views/pharmacy/newPurchaseOrder/index.js","views/pharmacy/indentPreparations/index.js","state/pharmacy/hooks/useAddSupplier.js","views/pharmacy/manageSupplier/index.js","views/pharmacy/indentPreparations/indentList/index.js","views/certificates/index.js","views/package/newPackage/index.js","views/inProgress/index.js","state/prescription/hooks/useGetPrescriptionByAppointmentId.js","views/prescription/printPrescription/index.js","views/prescription/viewPrescription/index.js","routes/allRoutesData.js","routes/routeResolver.js","views/billSearch/components/mainBillView.js","views/billSearch/index.js","views/admin/viewDoctors/index.js","views/home/index.js","routes/index.js","registerServiceWorker.js","index.js","assets/images/logo.jpg"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","LOGIN","LOGOUT","INITIAL_STATE","logged","username","roles","state","action","type","payload","list","auth","product","authReducer","productReducer","BaseStyles","createGlobalStyle","reset","Content","styled","div","colors","primary","secondary","default","gradient","bg","forms","labelColor","light","errorColor","danger","theme","Object","freeze","viewports","smartphone","tablet","desktop","Button","button","props","keys","find","p","upper","large","Nav","fixed","Right","nav","Title","h1","Header","dispatch","handleLogout","a","Link","to","onClick","useProducts","useState","isLoading","setIsLoading","values","actions","password","Container","span","layout","labelCol","wrapperCol","tailLayout","LoginForm","style","width","marginBottom","src","logo","name","initialValues","remember","onFinish","console","log","onSubmit","onFinishFailed","errorInfo","Item","label","placeholder","rules","required","message","Password","htmlType","BackDrop","Spinner","Loading","show","allowedRoles","Login","location","history","from","pathname","useLogin","setLogin","useEffect","push","roleName","checkAllowedUsers","notification","description","duration","departments","api","url","token","registration","body","axios","post","then","res","data","catch","err","doctorsRegistration","useDoctorRegistration","status","setStatus","response","Option","Select","validateMessages","types","email","number","range","department","map","key","speciality","qualification","AddDoctor","Form","useForm","form","queryParams","queryString","parse","search","doctorId","mode","get","setFieldsValue","user","doctorName","experience","highestQualification","designation","consulationCharge","icon","OrderedListOutlined","formData","min","max","offset","bookAppointment","getAppointmentByDoctorId","getAppointmentByPatientId","patientId","useBookAppointment","getAllPatients","getPatientByName","patientName","getPatientById","getAllDoctors","useGetAllDoctorByDepartment","patients","setPatients","deptname","useGetAllDoctors","usePatientById","PatientDetails","prop","bordered","patientDetails","visitType","age","contactNum","text","timeSlot","date","startHours","startminutes","endHours","endMinutes","interval","startDate","Date","setHours","setMinutes","endDate","start","getTime","end","timeSlots","hospitalDetails","address","contact","regNo","gstin","AppointmentCardPrint","appointmentDetails","this","id","marginTop","display","flexDirection","justifyContent","alignItems","margin","marginLeft","fontSize","fontWeight","height","background","padding","float","dateAndTime","React","Component","Search","Input","disabledDate","current","moment","endOf","Appointment","doctorsList","Map","selectedDepartment","setSelectedDepartment","selectedDate","setSelectedDate","componentRef","useRef","selectedDoctor","setSelectedDoctor","selectedTimeSlot","setSelectedTimeSlot","doctors","setRequest","usePatientSearchbyId","setPatientSearchById","doctorBydepartment","callDoctorByDepartment","setBookAppointment","handlePrint","useReactToPrint","content","length","doctor","set","MainButton","appointmentCard","size","concat","toDateString","title","extra","val","toLocaleTimeString","format","allowClear","enterButton","onSearch","className","fullscreen","onSelect","showSearch","defaultValue","onChange","optionFilterProp","filterOption","input","option","toLowerCase","indexOf","ref","savePharmacyMedicine","saveSupplier","getCategoriesList","savePurchaseOrder","deletePurchaseOrder","delete","getPharmacyMedicineList","getPharmacyMedicineDetail","medicineId","useGetPharmacyMedicines","medicines","setMedicineList","addMedicine","addTest","useTestSearch","AddItem","medicineMap","testMap","options","selected","setSelected","setMedicineSearch","tests","setTestSearch","quantity","amount","test","testName","forEach","medicine","medicineName","obj","itemId","itemType","medicinedetail","salePrice","testdetail","price","onItemAdded","dropdownClassName","autoFocus","dropdownMatchSelectWidth","inputValue","toUpperCase","BillPrint","itemList","isGSTIncluded","billId","paymentMode","finalCharges","todaysDate","billDate","itemArray","item","index","gst","discount","total","textAlign","border","cellPadding","cellSpacing","colSpan","totalAmount","totalDiscount","totalGST","FinalCharges","gutter","formatter","parser","replace","onDiscountChange","saveGenerateBill","useSaveGenerateBill","responseObj","setResponseObj","getBillDetails","searchValue","searchBy","searchURL","EditableContext","components","row","component","cell","editable","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","focus","toggleEdit","save","validateFields","childNode","onPressEnter","onBlur","paddingRight","ReturnItem","errorMessagesRows","returnButton","printButton","backToMainButton","initialRowData","setInitialRowData","setData","errorMessage","setErrorMessage","billGeneratedStatus","setBillGeneratedStatus","selectedRowKeys","setSelectedRowKeys","rowsData","columns","handleChangeFormField","newData","findIndex","initialItemValue","temp","splice","col","onCell","isModalVisible","listOfErrors","hasOwnProperty","color","selectedRows","filter","d","includes","billType","createdAt","paymentStatus","gender","billDetailList","billItem","itemName","billMapId","cost","concessionPercentage","gstPercentage","mrp","concessionType","purchaseType","onItemsReturned","updateMainBill","hasSelected","rowSelection","dataSource","pagination","filters","sorter","rowClassName","SERVER_ERROR","EditableRow","EditableCell","Billing","getFinalCharges","discountedAmount","toFixed","calculateTotalCharges","defaultbillDetails","printBillButton","generateBillButton","billDetails","totalCost","newPatientSwitch","newPatientFormValues","newPatientForm","getFieldsValue","setPatientDetails","generateBillStatus","setBillDetails","setState","context","setPaymentMode","setIsGSTIncluded","setNewPatientSwitch","setIsModalVisible","isReturnModalVisible","setIsReturnModalVisible","setBillDate","setFinalCharges","patientInfo","patientSearch","searchType","dataList","Number","parseInt","itemFormValue","Math","random","tempDataList","tempData","charges","compare","b","multiple","render","onConfirm","handleDelete","visible","footer","onOk","onCancel","returnedRows","itemKeysToRemove","mainRow","mainIndex","returnedRow","checked","momentDate","dateString","e","target","discountValue","Group","RangePicker","DatePicker","BillSearchComp","filterValue","setfilterValue","inputSearch","actualDates","toDate","date2","convertToActualDate","compact","renderTitle","href","rel","renderItem","count","UserOutlined","Canteen","PlusOutlined","autoComplete","List","fields","add","remove","field","align","fieldKey","MinusCircleOutlined","block","shape","DownloadOutlined","defaultSortOrder","cat","onFilter","category","sortDirections","CanteenStock","forceUpdate","setName","items","setItems","onNameChange","event","addItem","dropdownRender","menu","flexWrap","flex","cursor","shouldUpdate","disabled","isFieldsTouched","getFieldsError","errors","usePatientSearch","useGetAppointmentByDoctorId","useGetAppointmentByPatientId","DoctorAppointment","tags","tag","proceed","appointmentId","patientAppointments","setAppointmentByPatientId","setFilter","appointments","setAppointmentByDoctorId","appointment","time","appointmentDate","useAddMedicine","useMedicineSearch","AddMedicine","strength","medicineType","prefix","useAddTest","AddTest","useSearchTest","packageName","packageEndDate","Package","ViewPatientRecords","dataModal","userDetails","columnsModal","PatientSearchComp","usePatientByName","PatientSearch","isPatientRecordModalVisible","setIsPatientRecordModalVisible","showPatient","setShowPatient","allPatients","setAllPatients","dateFilteredPatient","setDateFilteredPatient","setPatientSearchbyId","currentPatientDetails","setCurrentPatientDetails","currentPatientAppointments","setCurrentPatientAppointments","patientDetailsByName","setPatientSearchbyName","street","patient","searchFilter","Pharmacy","savePrescription","getPrescriptionByAppointmentId","useSavePrescription","Prescription","optionsTests","submitted","setSubmitted","medicineForm","vitalsForm","adviceForm","setSavePrescription","medicineList","users","testList","patientVitals","appointmentDto","weight","Bp","bp","temprature","temparature","advise","advice","prescribedMedsDtoList","prescribedTestingDtoList","medName","days","numberOfDays","dosage","comment","comments","dateOfBooking","handleSearch","handleTestSearch","has","formActions","PrinterOutlined","TextArea","PhonePrefixSelector","noStyle","Registration","phone","alternatecontact","country","visit","recieptId","errr","addonBefore","HomeScreen","autoplay","class","backgroundImage","corousal1","corousal2","corousal3","corousal4","useGetPharmacyMedicineDetail","medicineUnits","medicineDistributionUnit","AddNewMedicine","medicineDetail","setRequest1","genericName","boxSize","expDate","expiryDate","medicineShelf","details","unit","triggerValue","parseFloat","image","supplierPrice","suppliersPrice","tax","supplierName","availability","stockQuantity","saveItemCategory","categoryId","categoryName","clearForm","rows","listType","UploadOutlined","Text","Typography","ManageMedicines","medicineData","setMedicineData","itemCategories","setItemCategories","useGetAllPharmacyMedicines","getAllMedicines","deleteMedicineRecord","deleteMedicine","UseGetAllPurchaseOrder","useDeletePurchaseOrder","resolveTag","PurchaseOrder","orderDate","deliveryDate","supplier","purchaseOrderId","storeName","rol","productDetails","setDeletePurchaseOrder","purchaseOrders","setGetAllPurchaseOrder","order","invoiceNumber","store","useGetAllSuppliers","useSavePurchaseOrder","useGetPurchaseOrderDetails","NewPurchaseOrder","supplierOptions","purchaseDetailsForm","productListForm","suppliers","setSupplierSearch","setSavePurchaseOrder","orderDetail","setGetPurchaseOrderDetails","productList","productId","productName","purchaseCost","batchNumber","purchaseDetails","onSearchProduct","minWidth","IndentPreparation","useAddSupplier","ManageSupplier","phoneNumber","editSupplier","supplierId","IndentList","Certificates","setValue","NewPackage","InProgress","useGetPrescriptionByAppointmentId","PrintPrescription","medicineTable","testTable","dateOfResult","reportDesc","testDesc","cellpadding","cellspacing","temperature","diseaseDesc","medicinecolumns","testcolumns","ViewPrescription","testData","prescriptionDetails","setPrescriptionDetails","billing","link","billSearch","doctorRoutes","pharmacyRoutes","receptionRoutes","upcomingRoutes","adminRoutes","MainBillView","billItemList","BillSearch","searchCriteria","setSearchFilter","mainBillViewButton","fromDate","ViewDoctors","doctorList","setDoctorList","Layout","Sider","Footer","SubMenu","Menu","Home","path","match","realRoutes","collapsed","setCollapsed","itemSelected","setItemSelected","routes","setRoutes","roleList","role","getRoutes","entries","childroutes","route","routeObject","subRoutesByRole","trigger","collapsible","defaultSelectedKeys","createElement","MenuUnfoldOutlined","MenuFoldOutlined","minHeight","overflow","Route","exact","PackageManagement","Root","AUTH_INITIAL_STATE","PRODUCT_INITIAL_STATE","reducers","Switch","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","error","document","getElementById","URL","process","origin","addEventListener","fetch","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.34cd5e74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/corousal1.93dd94f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal2.79453c34.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal3.f5b70fd5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal4.7e7b53cf.jpg\";","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export const LOGIN = 'auth/LOGIN';\r\nexport const LOGOUT = 'auth/CLEAR_USER';\r\n\r\nexport const login = (payload) => ({\r\n  type: LOGIN,\r\n  payload\r\n});\r\n\r\nexport const logout = () => ({\r\n  type: LOGOUT,\r\n});\r\n","import { allRoles } from '../../utils/roles';\r\nimport { LOGIN, LOGOUT } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  logged: false,\r\n  username: \"\",\r\n  roles: allRoles\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return {\r\n        logged: true,\r\n        username: action.payload,\r\n        roles: [action.payload],\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...INITIAL_STATE,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const DOCTOR = \"doctor\";\r\nexport const PHARMACY = \"pharmacy\";\r\nexport const ADMIN = \"admin\";\r\nexport const RECEPTION = \"reception\";\r\nexport const UPCOMING = \"upcoming\";\r\n\r\nexport const allRoles = [RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING];","import { LIST_PRODUCTS } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  list: null,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LIST_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const LIST_PRODUCTS = 'product/LIST_PRODUCTS';\r\n\r\nexport const listProducts = payload => ({\r\n  type: LIST_PRODUCTS,\r\n  payload,\r\n});\r\n","import authReducer from './auth/reducers';\r\nimport productReducer from './product/reducers';\r\n\r\nexport default ({ auth, product }, action) => ({\r\n  auth: authReducer(auth, action),\r\n  product: productReducer(product, action),\r\n});\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst BaseStyles = createGlobalStyle`\r\n    ${reset}\r\n    body { margin: 0 };\r\n    html { font-family: 'Montserrat', sans-serif; }\r\n    * { box-sizing: border-box; };\r\n`;\r\n\r\nexport default BaseStyles;\r\n","import styled from 'styled-components';\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Content;\r\n","const colors = {\r\n  primary: '#7159c1',\r\n  secondary: '#9b49c1',\r\n  default: '#fff',\r\n  gradient:\r\n    'linear-gradient(112deg, rgba(113,89,193,1) 0%, rgba(155,73,193,1) 100%);',\r\n  bg: 'linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%);',\r\n};\r\n\r\nconst viewports = {\r\n  smartphone: '360px',\r\n  tablet: '720px',\r\n  desktop: '1280px',\r\n};\r\n\r\nconst forms = {\r\n  labelColor: colors.light,\r\n  errorColor: colors.danger,\r\n};\r\n\r\nconst theme = Object.freeze({\r\n  colors,\r\n  forms,\r\n  viewports,\r\n});\r\n\r\nexport default theme;\r\n","import styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst Button = styled.button`\r\n  transition: all 0.3s ease;\r\n  background: ${props =>\r\n    theme.colors[Object.keys(props).find(p => theme.colors[p])] ||\r\n    theme.colors.primary};\r\n  text-transform: ${props => (props.upper ? 'uppercase' : 'none')};\r\n  font-weight: 300;\r\n  color: ${theme.colors.default};\r\n  padding: 9px 13px;\r\n  margin: 1px;\r\n  border: none;\r\n  border-radius: 2px;\r\n  cursor: pointer;\r\n  width: ${props => (props.large ? '100%' : 'auto')};\r\n  &:hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { useStateValue } from '../state';\r\nimport { logout } from '../state/auth/actions';\r\n\r\nimport Button from './button';\r\n\r\nconst Nav = styled.div`\r\n  height: 50px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  background: #001529;\r\n  position: ${props => (props.fixed ? 'fixed' : 'relative')};\r\n`;\r\n\r\nconst Right = styled.nav`\r\n  flex: 1;\r\n  text-align: right;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n  color: white;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Header = props => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n\r\n  const handleLogout = async () => {\r\n    await dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <Nav>\r\n      <Title><Link to={`/home`}>BAYMAX</Link></Title>\r\n      <Right>\r\n          <Link to={`/`}><Button gradient onClick={() => handleLogout()}>\r\n            Logout\r\n          </Button>\r\n          </Link>\r\n      </Right>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\nimport { useStateValue } from '../../index';\r\nimport { login } from '../actions';\r\n\r\nconst useProducts = () => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const formData = async ({ values, actions }) => {\r\n    setIsLoading(true);\r\n\r\n    setIsLoading(false);\r\n    if (values.username !== '' && values.password !== '') {\r\n      dispatch(login(values.username));\r\n    }\r\n  };\r\n\r\n  return [auth, formData, isLoading];\r\n};\r\n\r\nexport default useProducts;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: calc(100vh - 50px);\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\n\r\nconst formGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default formGroup;\r\n","import styled from 'styled-components';\r\nimport theme from '../theme';\r\n\r\nconst ErrorText = styled.span`\r\n  text-align: center;\r\n  color: ${theme.forms.errorColor};\r\n`;\r\n\r\nexport default ErrorText;\r\n","/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react';\r\nimport { Formik } from 'formik';\r\n// import Button from '../../../components/button';\r\nimport FormGroup from '../../../components/form/formGroup';\r\n// import Input from '../../../components/form/input';\r\nimport ErrorText from '../../../components/form/error';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {span: 24 },\r\n};\r\n\r\nconst LoginForm = (props) => {\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n    props.onSubmit(values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          placeholder=\"Username\"\r\n          rules={[{ required: true, message: 'Please input your username!' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          rules={[{ required: true, message: 'Please input your password!' }]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" style={{ width: '100%'}}  htmlType=\"submit\">\r\n            Submit\r\n        </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\n// const LoginForm = props => (\r\n\r\n//   return (<>\r\n//   <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n//   <Form\r\n//     {...layout}\r\n//     name=\"basic\"\r\n//     initialValues={{ remember: true }}\r\n//     onFinish={onFinish}\r\n//     onFinishFailed={onFinishFailed}\r\n//   >\r\n//     <Form.Item\r\n//       label=\"Username\"\r\n//       name=\"username\"\r\n//       rules={[{ required: true, message: 'Please input your username!' }]}\r\n//     >\r\n//       <Input />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item\r\n//       label=\"Password\"\r\n//       name=\"password\"\r\n//       rules={[{ required: true, message: 'Please input your password!' }]}\r\n//     >\r\n//       <Input.Password />\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n//       <Checkbox>Remember me</Checkbox>\r\n//     </Form.Item>\r\n\r\n//     <Form.Item {...tailLayout}>\r\n//       <Button type=\"primary\" htmlType=\"submit\">\r\n//         Submit\r\n//         </Button>\r\n//     </Form.Item>\r\n//   </Form>\r\n//   <Formik initialValues={{ username: '', password: '' }} {...props}>\r\n//     {({ handleChange, handleBlur, values, handleSubmit, errors }) => (\r\n//       <FormGroup>\r\n//         {errors.genericError && <ErrorText>{errors.genericError}</ErrorText>}\r\n//         <Input\r\n//           name=\"username\"\r\n//           id=\"username\"\r\n//           placeholder=\"Username\"\r\n//           onChange={handleChange('username')}\r\n//           onBlur={handleBlur('username')}\r\n//           error={errors.username}\r\n//           value={values.username}\r\n//         />\r\n//         <Input\r\n//           id=\"password\"\r\n//           name=\"password\"\r\n//           type=\"password\"\r\n//           placeholder=\"Password\"\r\n//           onChange={handleChange('password')}\r\n//           onBlur={handleBlur('password')}\r\n//           error={errors.password}\r\n//           value={values.password}\r\n//         />\r\n//         <Button primary large onClick={handleSubmit} style={{ background: 'skyblue', color: 'white' }} type=\"submit\">\r\n//           Login\r\n//         </Button>\r\n//       </FormGroup>\r\n//     )}\r\n//   </Formik>\r\n// </>);\r\n\r\n// );\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst BackDrop = styled.div`\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.67);\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid ${theme.colors.primary};\r\n  border-radius: 50%;\r\n  width: 120px;\r\n  height: 120px;\r\n  animation: spin 2s linear infinite;\r\n  margin: 40vh auto;\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loading = props => {\r\n  return (\r\n    props.show && (\r\n      <BackDrop>\r\n        <Spinner />\r\n      </BackDrop>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport useLogin from '../../state/auth/hooks/useLogin';\r\n\r\nimport Container from './containers/container';\r\nimport Form from './containers/form';\r\nimport Spinner from '../../components/spinner';\r\nimport { notification } from 'antd';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\n\r\nconst allowedRoles = [DOCTOR, PHARMACY, RECEPTION, UPCOMING, ADMIN]\r\nconst Login = ({ location, history }) => {\r\n  const { from } = location.state || { from: { pathname: '/home' } };\r\n  const [auth, setLogin, isLoading] = useLogin();\r\n\r\n  useEffect(() => {\r\n    if (auth.logged) {\r\n      history.push(from);\r\n    }\r\n  }, [auth, from, history]);\r\n\r\n  function checkAllowedUsers(values) {\r\n    for (const roleName of allowedRoles) {\r\n      if (roleName == values.username && roleName == values.password) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  return (\r\n    <Container>\r\n      <Spinner show={isLoading} />\r\n      <Form onSubmit={(values, actions) => {\r\n        console.log(\"values\", values);\r\n        console.log(\"actions\", actions);\r\n        if (checkAllowedUsers(values)) {\r\n          setLogin({ values, actions });\r\n        } else {\r\n          notification[\"error\"]({\r\n            message: 'Invalid username or password!',\r\n            description:\r\n              'Please check the username and password and try again.',\r\n            duration: 5,\r\n          });\r\n        }\r\n\r\n      }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export const departments = [\r\n    \"Accident and emergency (A&E)\",\r\n    \"Admissions\",\r\n    \"Anesthetics\",\r\n    \"Breast Screening\",\r\n    \"Burn Center\",\r\n    \"Cardiology\",\r\n    \"Central Sterile Services Department (CSSD)\",\r\n    \"Chaplaincy\",\r\n    \"Coronary Care Unit (CCU)\",\r\n    \"Critical Care\",\r\n    \"Diagnostic Imaging\",\r\n    \"Discharge Lounge\",\r\n    \"Elderly services\",\r\n    \"Finance Department\",\r\n    \"Gastroenterology\",\r\n    \"General Services\",\r\n    \"General Surgery\",\r\n    \"Gynecology\",\r\n    \"Haematology\",\r\n    \"Health & Safety\",\r\n    \"Intensive Care Unit (ICU)\",\r\n    \"Human Resources\",\r\n    \"Infection Control\",\r\n    \"Information Management\",\r\n    \"Maternity\",\r\n    \"Medical Records\",\r\n    \"Microbiology\",\r\n    \"Neonatal\",\r\n    \"Nephrology\",\r\n    \"Neurology\",\r\n    \"Nutrition and Dietetics\",\r\n    \"Obstetrics/Gynecology\",\r\n    \"Occupational Therapy\",\r\n    \"Oncology\",\r\n    \"Ophthalmology\",\r\n    \"Orthopaedics\",\r\n    \"Otolaryngology (Ear, Nose, and Throat)\",\r\n    \"Pain Management\",\r\n    \"Patient Accounts\",\r\n    \"Patient Services\",\r\n    \"Pharmacy\",\r\n    \"Physiotherapy\",\r\n    \"Purchasing & Supplies\",\r\n    \"Radiology\",\r\n    \"Radiotherapy\",\r\n    \"Renal\",\r\n    \"Rheumatology\",\r\n    \"Sexual Health\",\r\n    \"Social Work\",\r\n    \"Urology\"];\r\n\r\nexport const doctorsSpeciality = [\"Allergist\",\r\n    \"Anaesthesiologist\",\r\n    \"Andrologist\",\r\n    \"Cardiologist\",\r\n    \"Cardiac Electrophysiologist\",\r\n    \"Dermatologist\",\r\n    \"Emergency Room (ER) Doctors\",\r\n    \"Endocrinologist\",\r\n    \"Epidemiologist\",\r\n    \"Family Medicine Physician\",\r\n    \"Gastroenterologist\",\r\n    \"Geriatrician\",\r\n    \"Hyperbaric Physician\",\r\n    \"Hematologist\",\r\n    \"Hepatologist\",\r\n    \"Immunologist\",\r\n    \"Infectious Disease Specialist\",\r\n    \"Intensivist\",\r\n    \"Internal Medicine Specialist\",\r\n    \"Maxillofacial Surgeon / Oral Surgeon\",\r\n    \"Medical Examiner\",\r\n    \"Medical Geneticist\",\r\n    \"Neonatologist\",\r\n    \"Nephrologist\",\r\n    \"Neurologist\",\r\n    \"Neurosurgeon\",\r\n    \"Nuclear Medicine Specialist\",\r\n    \"Obstetrician/Gynecologist (OB/GYN)\",\r\n    \"Occupational Medicine Specialist\",\r\n    \"Oncologist\",\r\n    \"Ophthalmologist\",\r\n    \"Orthopedic Surgeon / Orthopedist\",\r\n    \"Otolaryngologist (also ENT Specialist)\",\r\n    \"Parasitologist\",\r\n    \"Pathologist\",\r\n    \"Perinatologist\",\r\n    \"Periodontist\",\r\n    \"Pediatrician\",\r\n    \"Physiatrist\",\r\n    \"Plastic Surgeon\",\r\n    \"Psychiatrist\",\r\n    \"Pulmonologist\",\r\n    \"Radiologist\",\r\n    \"Rheumatologist\",\r\n    \"Sleep Doctor / Sleep Disorders Specialist\",\r\n    \"Spinal Cord Injury Specialist\",\r\n    \"Sports Medicine Specialist\",\r\n    \"Surgeon\",\r\n    \"Thoracic Surgeon\",\r\n    \"Urologist\",\r\n    \"Vascular Surgeon\",\r\n    \"Veterinarian\",\r\n    \"Palliative Care Specialist\",\r\n    \"Acupuncturist\",\r\n    \"Audiologist\",\r\n    \"Ayurvedic Practioner\",\r\n    \"Chiropractor\",\r\n    \"Diagnostician\",\r\n    \"Homeopathic Doctor\",\r\n    \"Microbiologist\",\r\n    \"Naturopathic Doctor\",\r\n    \"Pharmacist\",\r\n    \"Physiotherapist\",\r\n    \"Podiatrist / Chiropodist\",\r\n    \"Registered Massage Therapist\"];\r\n\r\nexport const qualifications = [\"MS\", \"MD\", \"MBBS\"];\r\n","const api = {\r\n  // url: 'http://ec2-18-221-50-135.us-east-2.compute.amazonaws.com:8080',\r\n  url: 'http://localhost:8080',\r\n  token: '',\r\n};\r\n\r\nexport default api;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const registration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/patient/registration`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const doctorsRegistration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/doctorService/createNewDoctorsRecord`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getDoctorDetailById = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorDetailById?doctorId=` +  doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n","import { useState } from 'react';\r\nimport { doctorsRegistration } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useDoctorRegistration = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await doctorsRegistration(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useDoctorRegistration;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport { OrderedListOutlined } from '@ant-design/icons';\r\nimport '../addDoctor/addDoctor.css';\r\nimport { departments, doctorsSpeciality, qualifications } from '../../../utils/departmentList';\r\nimport useDoctorRegistration from '../../../state/registration/hooks/useDoctorRegistration';\r\nimport { doctorsRegistration, getDoctorDetailById } from '../../../state/registration/queries';\r\nimport queryString from 'query-string';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\nconst speciality = doctorsSpeciality.map(speciality => <Option key={speciality}>{speciality}</Option>);\r\nconst qualification = qualifications.map(qualification => <Option key={qualification}>{qualification}</Option>);\r\n\r\n\r\nfunction handleChange(value) {\r\n    console.log(`Selected: ${value}`);\r\n}\r\n\r\nconst AddDoctor = ({ location, history }) => {\r\n    const [form] = Form.useForm();\r\n    const [status, isLoading, setRequest] = useDoctorRegistration();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.doctorId != null) {\r\n            getDoctorDetailById(queryParams.doctorId).then(data => {\r\n                form.setFieldsValue({\r\n                    user: {\r\n                        name: data.doctorName,\r\n                        department: data.department,\r\n                        experience: data.experience,\r\n                        speciality: data.speciality,\r\n                        highestQualification: data.highestQualification,\r\n                        designation: data.designation,\r\n                        consulationCharge: data.consulationCharge,\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        };\r\n        if (queryParams.mode == \"edit\" && queryParams.doctorId != null) {\r\n            body[\"doctorId\"] = queryParams.doctorId;\r\n        }\r\n        doctorsRegistration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `The Doctor has been ${(queryParams.mode == \"edit\" ? \"Edited\" : \"registered\" )} successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'Error while saving doctor details',\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/viewDoctors' });\r\n            }} type=\"dashed\" icon={<OrderedListOutlined />}>View doctors</Button>\r\n            <Form {...layout} form={form} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Department\" name={['user', 'department']}>\r\n                    <Select>\r\n                        {department}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'experience']} label=\"Experience\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item label=\"Specialization\" name={['user', 'speciality']}>\r\n                    <Select>\r\n                        {speciality}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Highest Qualification\" name={['user', 'highestQualification']}>\r\n                    <Select>\r\n                        {qualification}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'designation']} label=\"Designation\">\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'consulationCharge']} label=\"Consultation Charges\" rules={[{ type: 'number', min: 0, max: 10000 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddDoctor;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const bookAppointment = (body) => {\r\n  return axios\r\n    .post(`${api.url}/HMServiceController/createNewAppointment`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByDoctorId = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentList?numberOfDays=30&startIndex=0&pazeSize=30&doctorId=` + doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByPatientId = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentListByPatientId?numberOfDays=30&startIndex=0&pazeSize=30&patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};","import { useState } from 'react';\r\nimport { bookAppointment } from '../queries';\r\n\r\nconst useBookAppointment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await bookAppointment(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useBookAppointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getAllPatients = () => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientByName = (patientName) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientByName?patientName=` + patientName)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientById = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientById?patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n\r\nexport const getAllDoctors = () => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAllDoctorsByDepartment = (name) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsListByDepartment?departmentName=` + name)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n","import { useState } from 'react';\r\nimport { getAllDoctorsByDepartment } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctorByDepartment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (deptname) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctorsByDepartment(deptname);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctorByDepartment;\r\n","import { useState } from 'react';\r\nimport { getAllDoctors } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctors = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctors();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctors;\r\n","import { useState } from 'react';\r\nimport { getPatientById } from '../queries';\r\n\r\nconst usePatientById = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState({});\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientById(patientId);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientById;\r\n","import React from 'react';\r\nimport { Divider, Descriptions, Badge } from 'antd';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\n\r\nconst PatientDetails = (prop) => {\r\n    // const [patient, isLoading, setRequest] = usePatientSearchbyId();\r\n\r\n    // useEffect(() => {\r\n    //     if(prop.patientId != null) {\r\n    //         setRequest(prop.patientId);\r\n    //     }\r\n    // }, [prop.patientId]);\r\n\r\n    return (\r\n        <>\r\n            <Divider>Patient Details</Divider>\r\n            <Descriptions bordered>\r\n                <Descriptions.Item label=\"Name\">{prop.patientDetails.patientName}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{prop.patientDetails.visitType}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{prop.patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Contact\">{prop.patientDetails.contactNum}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"success\" text=\"Active\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n        </>);\r\n};\r\n\r\nexport default PatientDetails;\r\n","const timeSlot = (date, startHours, startminutes, endHours,endMinutes, interval) => {\r\n    // date.setHours(startTime);\r\n    let startDate = new Date(date);\r\n    startDate.setHours(startHours);\r\n    startDate.setMinutes(startminutes);\r\n    // date.setHours(endTime);\r\n    let endDate = new Date(date);\r\n    endDate.setHours(endHours);\r\n    endDate.setMinutes(endMinutes);\r\n    console.log(startDate);\r\n    console.log(endDate);\r\n    let start = startDate.getTime();\r\n    let end = endDate.getTime();\r\n    var timeSlots = [];\r\n\r\n    while (start < end) {\r\n        timeSlots.push([new Date(start), new Date(start += interval * 60000)]);\r\n    }\r\n    return timeSlots;\r\n}\r\n\r\nexport default timeSlot;","const hospitalDetails = {\r\n    name: 'Medi World Hospital',\r\n    address: 'East Ramakrishna Nagar, Near ICICI Bank, New Bypass Road, Patna-800027',\r\n    contact: '+91-6205880418',\r\n    regNo: '642/2021',\r\n    gstin: '10ASOCM1716C1Z2'\r\n\r\n};\r\n\r\nexport default hospitalDetails;","import React, { useRef } from 'react';\r\nimport { Descriptions, Divider } from 'antd';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class AppointmentCardPrint extends React.Component {\r\n    render() {\r\n        const appointmentDetails = this.props.appointmentDetails;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <div style={{ marginTop: '50px' }}>\r\n                        <h3 style={{ fontWeight: 'bold', fontSize: '30px' }}>Appointment Card</h3>\r\n                    </div>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ fontSize: '25px', float: 'left' }}>\r\n                            <p><b>Patient Name:</b> {appointmentDetails.patientName}</p>\r\n                            <p><b>Doctor Name:</b> {appointmentDetails.doctorName}</p>\r\n                            <p><b>Date:</b> {appointmentDetails.dateAndTime}</p>\r\n                            <p><b>Time Slot:</b> {appointmentDetails.timeSlot}</p>\r\n                            <p><b>Department: </b>{appointmentDetails.department}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { Button, Calendar, Card, Col, Divider, notification, Row, Select, Input, Form } from 'antd';\r\nimport moment from 'moment';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useBookAppointment from '../../state/appointment/hooks/useBookAppointment';\r\nimport useGetAllDoctorByDepartment from '../../state/patientSearch/hooks/useGetAllDoctorByDepartment';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport { departments } from '../../utils/departmentList';\r\nimport '../appointment/appointment.css';\r\nimport PatientDetails from '../patientDetails';\r\nimport timeSlot from '../../utils/timeSlot';\r\nimport { AppointmentCardPrint } from './components/appointmentCardPrint';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\n\r\nfunction disabledDate(current) {\r\n    // Can not select days before today and today\r\n    return current && current < moment().endOf('day');\r\n}\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\n\r\nconst Appointment = ({ location, history }) => {\r\n\r\n    let doctorsList = [];\r\n    let timeSlots = [];\r\n    let appointmentDetails = {\r\n        patientName: '',\r\n        doctorName: '',\r\n        dateAndTime: '',\r\n        timeSlot: '',\r\n        department: ''\r\n    };\r\n    // let selectedDoctor = \"\";\r\n    const map = new Map();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"all\");\r\n    const [form] = Form.useForm();\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const componentRef = useRef();\r\n    const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n    const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\r\n\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [patientDetails, isLoading2, setPatientSearchById] = usePatientSearchbyId();\r\n    const [doctorBydepartment, isLoadings, callDoctorByDepartment] = useGetAllDoctorByDepartment();\r\n    const [status, isLoading1, setBookAppointment] = useBookAppointment();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        if (selectedDepartment === \"all\") {\r\n            setRequest();\r\n            if (queryParams.patientId != null) {\r\n                setPatientSearchById(queryParams.patientId);\r\n            } else {\r\n                setPatientSearchById(patientDetails.patientId);\r\n            }\r\n\r\n\r\n        } else {\r\n            callDoctorByDepartment(selectedDepartment);\r\n        }\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Appointment successfully booked for patient with id ' + queryParams.patientId + 'and Doctor ' + selectedDoctor,\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [selectedDepartment, status]);\r\n\r\n    if (selectedDepartment !== \"all\") {\r\n        if (doctorBydepartment.length > 0) {\r\n            doctorsList = doctorBydepartment.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>;\r\n            });\r\n        }\r\n    } else {\r\n        if (doctors.length > 0) {\r\n            doctorsList = doctors.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>\r\n            });\r\n        }\r\n    }\r\n    function handleChange(value) {\r\n        setSelectedDepartment(value);\r\n    }\r\n    function onDateSelect(value) {\r\n        setSelectedDate(new Date(value));\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedDoctor(value);\r\n    }\r\n    function handleChangeOfTimeSlot(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedTimeSlot(value);\r\n    }\r\n\r\n    function bookAppointment(formData) {\r\n        const body = {\r\n            \"diseaseDesc\": \"test desc\",\r\n            \"advise\": \"test\",\r\n            \"patientId\": patientDetails.patientId,\r\n            \"patientName\": patientDetails.patientName,\r\n            \"doctorId\": selectedDoctor,\r\n            \"appointmentDate\": selectedDate.getTime(),\r\n            \"timeSlot\": selectedTimeSlot,\r\n            \"height\": 6,\r\n            \"weight\": 80,\r\n            \"Bp\": \"120/80\",\r\n            \"status\": \"booked\"\r\n        };\r\n        console.log(body);\r\n        if (patientDetails.patientId != null) {\r\n            setBookAppointment(body);\r\n        } else {\r\n            notification[\"error\"]({\r\n                message: 'Failed',\r\n                description: 'Please Enter a valid patient Id!',\r\n                duration: 3\r\n            });\r\n        }\r\n\r\n    }\r\n    let MainButton = \"\";\r\n    let appointmentCard = \"\";\r\n    if (!status) {\r\n        MainButton = <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Book Appointment</Button>;\r\n    } else {\r\n        console.log(\"dsadsad\" + selectedDoctor);\r\n        MainButton = <Button type=\"primary\" size=\"large\" onClick={() => {\r\n            console.log(patientDetails.patientId,);\r\n            history.push({ pathname: '/home/billing', search: '?patientId='.concat(patientDetails.patientId) + '&doctorName=' + map.get(selectedDoctor).doctorName + '&charges=' + map.get(selectedDoctor).consulationCharge + '&context=consulation' })\r\n        }}>Go To Billing</Button>;\r\n        appointmentDetails = {\r\n            patientName: patientDetails.patientName,\r\n            doctorName: map.get(selectedDoctor).doctorName,\r\n            dateAndTime: selectedDate.toDateString(),\r\n            timeSlot: selectedTimeSlot,\r\n            department: selectedDepartment\r\n        };\r\n        appointmentCard = (<Card title=\"Appointment Details\" extra={<a onClick={() => { handlePrint(); }}>Print</a>} style={{ width: 300 }}>\r\n            <p>Appointment booked for :</p>\r\n            <p>{patientDetails.patientName}</p>\r\n            <p>on {selectedDate.toDateString()}</p>\r\n            <p>between {selectedTimeSlot}</p>\r\n            <p>At {selectedDepartment}</p>\r\n            <p>With Dr. {map.get(selectedDoctor).doctorName}</p>\r\n        </Card>);\r\n    }\r\n\r\n    timeSlots = timeSlot(new Date(), 9, 0, 18, 0, 15).map(val => {\r\n        const timeSlot = moment(val[0].toLocaleTimeString(), \"HH:mm:ss\").format(\"hh:mm A\") + \"-\" + moment(val[1].toLocaleTimeString(), \"HH:mm:ss\").format(\"hh:mm A\");\r\n        return <Option key={timeSlot}>{timeSlot}</Option>;\r\n    });\r\n    const onPatientSearch = value => {\r\n        setPatientSearchById(value);\r\n    };\r\n    return (\r\n        <>\r\n            <Search\r\n                placeholder=\"Search Patient By Id\"\r\n                allowClear\r\n                enterButton=\"Search\"\r\n                size=\"large\"\r\n                style={{ width: '40%' }}\r\n                onSearch={onPatientSearch}\r\n            />\r\n            <br />\r\n            <PatientDetails patientDetails={patientDetails} />\r\n            <br></br>\r\n            <Divider>Appointment Booking</Divider>\r\n            <Form form={form} name=\"nest-messages\" onFinish={bookAppointment}>\r\n                <Row>\r\n                    <Col span={8}>\r\n                        <div className=\"site-calendar-demo-card\">\r\n                            <Calendar fullscreen={false} onSelect={onDateSelect} disabledDate={disabledDate} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Form.Item name={['user', 'departmentName']}>\r\n                            <Select\r\n                                showSearch\r\n                                defaultValue=\"all\"\r\n                                onChange={handleChange}\r\n                                placeholder=\"Select Department\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                <Option value=\"all\">All</Option>\r\n                                {department}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'doctorName']} rules={[{ required: true }]}>\r\n                            <Select\r\n                                onChange={handleChangeOfDoctor}\r\n                                showSearch\r\n                                placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {doctorsList}\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'timeSlot']}>\r\n                            <Select onChange={handleChangeOfTimeSlot} placeholder=\"Select Time Slot\" style={{ width: 300 }}>\r\n                                {timeSlots}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div style={{ display: 'none' }}>\r\n                            <AppointmentCardPrint ref={componentRef} appointmentDetails={appointmentDetails} />\r\n                        </div>\r\n                        {appointmentCard}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={12} offset={10}>\r\n                        {MainButton}\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>);\r\n};\r\n\r\nexport default Appointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePharmacyMedicine = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePharmacyMedicine`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveSupplier = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveSupplier`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveItemCategory = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveItemCategory`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getCategoriesList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getAllItemCategories`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const savePurchaseOrder = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deletePurchaseOrder = (body) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deletePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderDetails = (purchaseOrderId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderDetails?purchaseOrderId=` + purchaseOrderId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getSuppliersList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getSupplierList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineListByName = (medicineName) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineListByName?medicineName=` + medicineName)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineDetail = (medicineId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineDetails?medicineId=` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deleteMedicine = (medicineId) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deleteMedicineRecord/` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { getPharmacyMedicineList } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetPharmacyMedicines = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPharmacyMedicineList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicines;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const addMedicine = (body) => {\r\n  return axios\r\n    .post(`${api.url}/medicine/medicine`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getAllMedicines = () => {\r\n  return axios\r\n    .get(`${api.url}/medicine/medicineList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAllTests = () => {\r\n  return axios\r\n    .get(`${api.url}/test/testList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err\r\n    });\r\n};\r\n\r\nexport const addTest = (body) => {\r\n  return axios\r\n    .post(`${api.url}/test/test`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};","import { useState } from 'react';\r\nimport { getAllMedicines, getAllTests } from '../queries';\r\n\r\nconst useTestSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllTests();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useTestSearch;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col, AutoComplete } from 'antd';\r\nimport useGetPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useTestSearch from '../../../state/addMedicine/hooks/useSearchTest';\r\nconst { Option } = Select;\r\n\r\nconst AddItem = (props) => {\r\n    const [form] = Form.useForm();\r\n    const medicineMap = new Map();\r\n    const testMap = new Map();\r\n    let options = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n    const [selected, setSelected] = useState(\"others\");\r\n    const [medicines, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    const [tests, isLoading1, setTestSearch] = useTestSearch();\r\n    // const [options, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setFormdefaultValue();\r\n    }, []);\r\n\r\n\r\n    function setFormdefaultValue() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                quantity: 1,\r\n                amount: 0,\r\n            }\r\n        });\r\n    }\r\n    if (selected == \"test\") {\r\n        options = [...tests.map(test => {\r\n            testMap.set(test.testName, test);\r\n            return { value: test.testName, label: test.testName };\r\n        })];\r\n    } else if (selected == \"medicine\") {\r\n        if (medicines.length > 0) {\r\n\r\n            medicines.forEach(medicine => {\r\n                medicineMap.set(medicine.medicineName, medicine);\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    } else if (selected == \"consultation\") {\r\n        if (medicines.length > 0) {\r\n            medicines.forEach(medicine => {\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    }\r\n\r\n    function onFinish(value) {\r\n        console.log(\"arakadra\", value.user.name);\r\n        const obj = {\r\n            itemId: null,\r\n            name: value.user.name,\r\n            quantity: value.user.quantity,\r\n            itemType: selected,\r\n            amount: value.user.amount\r\n        }\r\n        if (selected == \"medicine\") {\r\n            const medicinedetail = medicineMap.get(value.user.name);\r\n            obj[\"amount\"] = medicinedetail.salePrice;\r\n            obj[\"itemId\"] = medicinedetail.medicineId;\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(value.user.name);\r\n            obj[\"amount\"] = testdetail.price;\r\n            obj[\"itemId\"] = null;\r\n        }\r\n        // console.log(obj);\r\n        props.onItemAdded(obj);\r\n    }\r\n    function onItemTypeSelect(value) {\r\n        setSelected(value);\r\n        if (value == \"test\") {\r\n            setTestSearch();\r\n        }\r\n    }\r\n    function onSelect(data) {\r\n        if (selected == \"inventory\") {\r\n            const medicinedetail = medicineMap.get(data);\r\n            console.log(medicinedetail.salePrice);\r\n            form.setFieldsValue({\r\n                user: {\r\n                    amount: medicinedetail.salePrice,\r\n                }\r\n            });\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(data);\r\n            form.setFieldsValue({\r\n                user: {\r\n                    amount: testdetail.salePrice,\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} >\r\n            <Form.Item name={['user', 'name']} label=\"Item name\">\r\n                <AutoComplete\r\n                    dropdownClassName=\"certain-category-search-dropdown\"\r\n                    autoFocus={true}\r\n                    allowClear={true}\r\n                    dropdownMatchSelectWidth={200}\r\n                    style={{ width: '100%' }}\r\n                    options={options}\r\n                    onChange={onSelect}\r\n                    filterOption={(inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\r\n                >\r\n                    <Input.Search size=\"default\" placeholder=\"Item name\" />\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'quantity']} label=\"Quantity\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'amount']} label=\"Amount\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'itemType']} label=\"Item type\" >\r\n                <Select onSelect={onItemTypeSelect} defaultValue={selected} placeholder=\"Item type\">\r\n                    <Option value=\"medicine\">Medicine</Option>\r\n                    <Option value=\"test\">Test</Option>\r\n                    <Option value=\"consulation\">Others</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Add Item\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>);\r\n};\r\nexport default AddItem;","import React, { useRef } from 'react';\r\nimport '../components/billingPrint.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class BillPrint extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const isGSTIncluded = this.props.isGSTIncluded;\r\n        const billId = this.props.billId;\r\n        const paymentMode = this.props.paymentMode;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const finalCharges = this.props.finalCharges;\r\n        const todaysDate = new Date(this.props.billDate).toDateString();\r\n\r\n        const itemArray = itemList.map((item, index) => {\r\n            return (\r\n                <tr>\r\n                    <td>{index + 1} .</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.quantity}</td>\r\n                    <td>{item.amount}</td>\r\n                    <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>{item.gst}</td>\r\n                    <td>{item.discount}</td>\r\n                    <td>{item.total}</td>\r\n                </tr>)\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ padding: '20px', marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                        <p style={{ float: 'right', marginLeft: '20px' }}>\r\n                            Reg No.- {hospitalDetails.regNo}\r\n                        </p>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p style={{ textAlign: 'center'}}>Contact: {hospitalDetails.contact}</p>\r\n                            <p style={{ textAlign: 'center'}}>GSTIN: {hospitalDetails.gstin}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellPadding=\"5\" cellSpacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                                <td>BillId</td>\r\n                                <td>{billId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Payment mode</td>\r\n                                <td>{paymentMode}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>S.No</th>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }} >GST(CGST + SGST)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemArray}\r\n                            <tr>\r\n                                <td colSpan={(isGSTIncluded ? \"5\" : \"4\")} ></td>\r\n                                <td>Total</td>\r\n                                <td>{finalCharges.totalAmount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan={(isGSTIncluded ? \"5\" : \"4\")}></td>\r\n                                <td>Discount(%)</td>\r\n                                <td>{finalCharges.totalDiscount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }} colSpan=\"5\"></td>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>Tax</td>\r\n                                <td style={{ display: (isGSTIncluded ? \"table-cell\" : \"none\") }}>{finalCharges.totalGST}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst FinalCharges = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({ discount: props.finalCharges.totalDiscount });\r\n  }, [props.finalCharges.totalDiscount]);\r\n\r\n  function onDiscountChange(value) {\r\n    props.onDiscountChange(value);\r\n  }\r\n  return (\r\n    <Form name=\"final_charges\" form={form}>\r\n      <Row gutter={24}>\r\n        <Col span={8} key={1}>\r\n          <Form.Item label=\"Total Amount\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalAmount}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={2}>\r\n          <Form.Item label=\"Total discount(%)\" name=\"discount\">\r\n            <InputNumber\r\n              min={0}\r\n              \r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace('%', '')}\r\n              onChange={onDiscountChange}\r\n            />\r\n            {/* <span className=\"ant-form-text\">{props.finalCharges.totalDiscount}</span> */}\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={3}>\r\n          <Form.Item label=\"Total GST\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalGST}</span>\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>);\r\n};\r\nexport default FinalCharges;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nconst rootURI = `${api.url}/HMServiceController/fetchBillDtails`;\r\nexport const searchBillDetails = (id, filterType) => {\r\n    let url = '';\r\n    if (filterType === 'patientId') {\r\n        url = `${rootURI}?patientId=` + id + '&billId=';\r\n    } else if (filterType === 'billId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    } else if (filterType === 'receiptId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    }\r\n    return axios\r\n        .get(url)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err.response;\r\n        });\r\n};\r\n\r\nexport const saveGenerateBill = (body) => {\r\n    return axios\r\n        .post(`${api.url}/HMServiceController/generateBill`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getBillListByDateRange = (toDate, fromDate, billType) => {\r\n    return axios\r\n        .get(`${api.url}/HMServiceController/fetchBillListByDateRange?toDate=` + toDate + '&fromDate=' + fromDate + '&billType=' + billType)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n","import { useState } from 'react';\r\nimport { saveGenerateBill } from '../queries';\r\n\r\nconst useSaveGenerateBill = () => {\r\n  const [responseObj, setResponseObj] = useState({});\r\n\r\n  const request = async (body) => {\r\n    const response = await saveGenerateBill(body);\r\n    if (response) {\r\n      if (response.response == \"success\") {\r\n        setResponseObj(response);\r\n      }\r\n    } else {\r\n      setResponseObj(null);\r\n    }\r\n  };\r\n\r\n  return [responseObj, request];\r\n};\r\n\r\nexport default useSaveGenerateBill;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getBillDetails = (searchValue, searchBy) => {\r\n\r\n    let searchURL = \"\";\r\n\r\n    if (searchBy == \"patientId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?billId=&patientId=` + searchValue;\r\n    } else if (searchBy == \"billId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?patientId=&billId=` + searchValue;\r\n    }\r\n    return axios\r\n        .get(searchURL)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { Form, Input, Select, Row, Col, Table, notification, Button } from 'antd';\r\nimport { saveGenerateBill } from '../../../state/billing/queries';\r\nconst EditableContext = React.createContext();\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    ...restProps\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef = useRef();\r\n    const form = useContext(EditableContext);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0,\r\n                }}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: `${title} is required.`,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n            </Form.Item>\r\n        ) : (\r\n                <div\r\n                    className=\"editable-cell-value-wrap\"\r\n                    style={{\r\n                        paddingRight: 24,\r\n                    }}\r\n                    onClick={toggleEdit}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n    }\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst components = {\r\n    body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n    },\r\n};\r\nconst ReturnItem = (props) => {\r\n    let errorMessagesRows = \"\";\r\n    let returnButton = \"\";\r\n    let printButton = \"\";\r\n    let backToMainButton = \"\";\r\n    const [initialRowData, setInitialRowData] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState({});\r\n    const [billGeneratedStatus, setBillGeneratedStatus] = useState(false);\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n    useEffect(() => {\r\n        setData(props.rowsData);\r\n        setInitialRowData(props.rowsData);\r\n    }, []);\r\n\r\n    let columns = [\r\n        {\r\n            title: 'Item Name',\r\n            dataIndex: 'name',\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            editable: \"true\",\r\n            width: '10%',\r\n        }\r\n    ];\r\n    columns = columns.map((col) => {\r\n        if (col.editable == \"false\") {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                handleSave: handleChangeFormField,\r\n            }),\r\n        };\r\n    });\r\n    if (billGeneratedStatus) {\r\n        printButton = <Button style={{ width: '90%' }} type=\"primary\">Print</Button>;\r\n        backToMainButton = <Button onClick={() => { props.isModalVisible(false); }} style={{ width: '90%' }} type=\"primary\">Go to Main Bill</Button>;\r\n    }\r\n\r\n    function updateMainBill() {\r\n        const selectedRows = data.filter(d => selectedRowKeys.includes(d.key));\r\n        props.onItemsReturned(selectedRows);\r\n    }\r\n    function handleChangeFormField(row) {\r\n        console.log(row);\r\n        console.log(initialRowData);\r\n\r\n        const newData = [...data];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        const initialItemValue = initialRowData[index];\r\n        if (row.quantity > initialItemValue.quantity) {\r\n            const message = `Item ${row.name} cannot have quantity more than ${initialItemValue.quantity}`;\r\n            setErrorMessage({ ...errorMessage, ... { [row.key]: message } });\r\n        } else {\r\n            const temp = { ...errorMessage };\r\n            delete temp[row.key];\r\n            setErrorMessage(temp);\r\n        }\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        // const finalCharges = getFinalCharges([row]);\r\n        // row.total = finalCharges.discountedAmount + finalCharges.totalGST;\r\n\r\n        // calculateTotalCharges(newData);\r\n    };\r\n    console.log(\"error meessages\", errorMessage);\r\n    if (errorMessage) {\r\n        const listOfErrors = [];\r\n        for (var key in errorMessage) {\r\n            if (errorMessage.hasOwnProperty(key)) {\r\n                listOfErrors.push(<p style={{ color: 'red' }} key={key}>{errorMessage[key]}</p>);\r\n            }\r\n        }\r\n        if (listOfErrors.length == 0) {\r\n            returnButton = <Button style={{ width: '90%' }} onClick={returnItems} type=\"primary\">Return</Button>;\r\n        } else {\r\n            returnButton = \"\";\r\n        }\r\n        errorMessagesRows = <div>{listOfErrors}</div>;\r\n    }\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n\r\n    function onSelectChange(selectedRowKeys) {\r\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n        setSelectedRowKeys(selectedRowKeys);\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: onSelectChange,\r\n    };\r\n\r\n    function returnItems() {\r\n        console.log(data);\r\n        console.log(selectedRowKeys);\r\n        const selectedRows = data.filter(d => selectedRowKeys.includes(d.key));\r\n        const body = {\r\n            billId: null,\r\n            billType: \"PHARMACY\",\r\n            createdAt: new Date(),\r\n            paymentStatus: \"paid\",\r\n            paymentMode: \"Cash\",\r\n            patientId: props.patientDetails.patientId,\r\n            name: props.patientDetails.patientName,\r\n            age: props.patientDetails.age,\r\n            gender: props.patientDetails.gender,\r\n            // totalCost: finalCharges.totalAmount,\r\n            // totalDiscount: finalCharges.totalDiscount,x\r\n            // totalGST: finalCharges.totalGST,\r\n            billDetailList: []\r\n        };\r\n        selectedRows.forEach(item => {\r\n            const billItem = {\r\n                id: null,\r\n                itemName: item.name,\r\n                itemId: item.itemId,\r\n                billMapId: null,\r\n                cost: item.total,\r\n                concessionPercentage: item.discount,\r\n                gstPercentage: item.gst,\r\n                mrp: item.amount,\r\n                concessionType: \"discount\",\r\n                quantity: item.quantity,\r\n                purchaseType: (item.type == \"medicine\" ? \"pharmacy-return\" : item.type)\r\n            };\r\n            body.billDetailList.push(billItem);\r\n        });\r\n        saveGenerateBill(body).then(response => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Return Bill Generated Successfully with id ' + response.billId,\r\n                duration: 3\r\n            });\r\n            setBillGeneratedStatus(true);\r\n            updateMainBill();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'Error while returning bill',\r\n                duration: 3\r\n            });\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span style={{ marginLeft: 8 }}>\r\n                {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\r\n            </span>\r\n            {errorMessagesRows}\r\n            <Table rowSelection={rowSelection} columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n            <br /><br /><br />\r\n            <Row gutter={24}>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {returnButton}\r\n\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {printButton}\r\n\r\n                </Col>\r\n                <Col className=\"gutter-row\" span={8}>\r\n                    {backToMainButton}\r\n\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\nexport default ReturnItem;","export const SERVER_ERROR =`Server error, Please contact Administrator at (+91-8142638458)`;\r\n","import { Button, Col, Descriptions, Divider, Checkbox, Form, InputNumber, Switch, DatePicker, Input, notification, Radio, Row, Table, Popconfirm, Modal } from 'antd';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport React, { useRef, useState, useEffect, useContext, useLayoutEffect } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PatientDetails from '../patientDetails';\r\nimport AddItem from './components/addItemModal';\r\nimport { BillPrint } from './components/billPrint';\r\nimport FinalCharges from './components/finalCharges';\r\nimport useSaveGenerateBill from '../../state/billing/hooks/useGenerateBill';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport { getBillDetails } from './services';\r\nimport ReturnItem from './components/returnItemModal';\r\nimport { saveGenerateBill } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst EditableContext = React.createContext();\r\nconst { Search } = Input;\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef();\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst Billing = ({ location, history }) => {\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n  const queryParams = queryString.parse(location.search);\r\n  const components = {\r\n    body: {\r\n      row: EditableRow,\r\n      cell: EditableCell,\r\n    },\r\n  };\r\n  function handleSave(row) {\r\n    const newData = [...data];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    const finalCharges = getFinalCharges([row]);\r\n    row.total = (finalCharges.discountedAmount + finalCharges.totalGST).toFixed(2);\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    setData(newData);\r\n    calculateTotalCharges(newData);\r\n  };\r\n\r\n  const defaultbillDetails = {\r\n    billId: '',\r\n    createdAt: (new Date()).toDateString() + ' ' + (new Date()).toLocaleTimeString()\r\n  };\r\n\r\n  const defaultFinalCharges = {\r\n    totalAmount: 0,\r\n    totalDiscount: 0,\r\n    totalGST: 0\r\n  };\r\n  const printBillButton = <Col className=\"gutter-row\" span={6}>\r\n\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={handlePrint}>Print</Button>\r\n  </Col>;\r\n  let generateBillButton = <Col className=\"gutter-row\" span={6}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={generateBill}>Generate {queryParams.context == \"edit\" ? \"new \" : \"\"}bill</Button>\r\n  </Col>;\r\n  let printButton = \"\";\r\n  const [newPatientForm] = Form.useForm();\r\n  const [state, setState] = useState(\"initial\");\r\n  const [paymentMode, setPaymentMode] = useState(\"Cash\");\r\n  const [isGSTIncluded, setIsGSTIncluded] = useState(true);\r\n  // const [billResponse, isLoading, setBillSearch] = useBillSearch();\r\n  const [patientDetails, setPatientDetails] = useState({});\r\n  const [newPatientSwitch, setNewPatientSwitch] = useState(false);\r\n  const [generateBillStatus, setGenerateBillStatus] = useSaveGenerateBill();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isReturnModalVisible, setIsReturnModalVisible] = useState(false);\r\n  const [billDetails, setBillDetails] = useState(defaultbillDetails);\r\n  const [billDate, setBillDate] = useState(moment(new Date()));\r\n\r\n  const [finalCharges, setFinalCharges] = useState(defaultFinalCharges);\r\n  const [data, setData] = useState([]);;\r\n\r\n  let patientInfo = <div>\r\n    <Search placeholder=\"Search by Patient Id\" allowClear onSearch={patientSearch} style={{ width: '30%' }} />\r\n    <PatientDetails searchType=\"patientId\" patientDetails={patientDetails} />\r\n  </div>;\r\n  // let billSearchComp = <BillSearch onSearch={onBillSearch} />;\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const showReturnItemModal = () => {\r\n    setIsReturnModalVisible(true);\r\n  };\r\n\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const submitReturn = () => {\r\n    setIsReturnModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n  const cancelReturnModal = () => {\r\n    setIsReturnModalVisible(false);\r\n  };\r\n  useEffect(() => {\r\n    // calculateTotalCharges(mockData);\r\n    // setData(mockData);\r\n    if (queryParams.context == 'registration') {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Registration',\r\n          quantity: 1,\r\n          type: 'registration',\r\n          amount: 500,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: 500,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'consulation') {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Consultation ' + '(' + (queryParams.doctorName) + ')',\r\n          quantity: 1,\r\n          type: 'consultation',\r\n          amount: queryParams.charges,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: Number(queryParams.charges) + 0,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'edit') {\r\n      onBillSearch(queryParams.billId, \"billId\");\r\n    }\r\n  }, []);\r\n  if (state == \"billGenerated\") {\r\n    generateBillButton = \"\";\r\n    printButton = printBillButton;\r\n  }\r\n\r\n  if (queryParams.context == \"edit\") {\r\n    printButton = printBillButton;\r\n  }\r\n  if (newPatientSwitch) {\r\n    patientInfo = <div>\r\n      <Divider>Patient Details</Divider>\r\n      <Form layout=\"inline\" form={newPatientForm}>\r\n        <Form.Item name=\"patientName\" label=\"Name\">\r\n          <Input placeholder=\"name\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"age\" label=\"Age\">\r\n          <InputNumber placeholder=\"age\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"contact\" label=\"Contact\">\r\n          <Input placeholder=\"phone number\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"referal doctor\" label=\"Referal doctor\">\r\n          <Input placeholder=\"doctor name\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>;\r\n  }\r\n  function getFinalCharges(dataList) {\r\n    const finalCharges = {\r\n      totalAmount: 0,\r\n      totalGST: 0,\r\n      totalDiscount: 0,\r\n      discountedAmount: 0\r\n    }\r\n\r\n    dataList.forEach(data => {\r\n      const amount = Number.parseInt(data.amount) * Number.parseInt(data.quantity);\r\n      const discountedAmount = Number.parseInt(amount) - ((Number.parseInt(data.discount) / 100) * Number.parseInt(amount));\r\n      finalCharges.totalAmount += Number.parseInt(amount);\r\n      finalCharges.totalDiscount += Number.parseInt(data.discount);\r\n      finalCharges.discountedAmount += discountedAmount;\r\n      finalCharges.totalGST += Number.parseInt(data.gst);\r\n    });\r\n    return finalCharges;\r\n  }\r\n  function onChange(pagination, filters, sorter, extra) {\r\n    console.log('params', pagination, filters, sorter, extra);\r\n  }\r\n\r\n  function onBillSearch(searchValue, searchFilter) {\r\n    getBillDetails(searchValue, searchFilter).then(data => {\r\n      if (data && data[0]) {\r\n        const billDetails = data[0];\r\n        setBillDetails({\r\n          billId: billDetails.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        setBillDate(moment(new Date(billDetails.createdAt)));\r\n        setPaymentMode(billDetails.paymentMode);\r\n        if (billDetails[\"patientId\"]) {\r\n          patientSearch(billDetails.patientId);\r\n        } else {\r\n          setPatientDetails({ patientId: null, patientName: billDetails.name, age: billDetails.age, gender: billDetails.gender, visitType: \"General\" });\r\n        }\r\n        if (billDetails[\"billDetailList\"]) {\r\n\r\n          const tempData = billDetails[\"billDetailList\"].map((item, index) => {\r\n            return {\r\n              key: item.itemName + index,\r\n              id: item.id,\r\n              itemId: item.itemId,\r\n              name: item.itemName,\r\n              type: item.purchaseType,\r\n              billMapId: item.billMapId,\r\n              quantity: item.quantity,\r\n              amount: item.mrp,\r\n              gst: 0,\r\n              discount: item.concessionPercentage,\r\n              total: (Number(item.mrp) - ((Number(item.concessionPercentage) / 100) * Number(item.mrp))) * item.quantity,\r\n            }\r\n          });\r\n\r\n          setData(tempData);\r\n          calculateTotalCharges(tempData);\r\n        }\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  function patientSearch(patientId) {\r\n    getPatientById(patientId).then(patientDetails => {\r\n      setPatientDetails(patientDetails);\r\n    }).catch(() => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: 'Error while searching patient with Id' + patientId,\r\n        duration: 3\r\n      });\r\n    });\r\n  }\r\n  function onItemAdded(itemFormValue) {\r\n    console.log(itemFormValue);\r\n    const newData = {\r\n      key: Math.random(),\r\n      name: itemFormValue.name,\r\n      itemId: itemFormValue.itemId,\r\n      quantity: itemFormValue.quantity,\r\n      amount: itemFormValue.amount,\r\n      type: itemFormValue.itemType,\r\n      gst: 0,\r\n      discount: 0,\r\n      total: itemFormValue.quantity * itemFormValue.amount,\r\n    }\r\n    const tempDataList = [...data, newData];\r\n\r\n    setData(tempDataList);\r\n    calculateTotalCharges(tempDataList);\r\n    setIsModalVisible(false);\r\n  }\r\n  function handleDelete(key) {\r\n    const dataSource = data.filter((item) => item.key !== key);\r\n    calculateTotalCharges(dataSource);\r\n    setData(dataSource);\r\n  };\r\n\r\n  function calculateTotalCharges(tempDataList) {\r\n    const finalCharges = getFinalCharges(tempDataList);\r\n    console.log(finalCharges);\r\n    setFinalCharges({\r\n      totalAmount: (finalCharges.discountedAmount + finalCharges.totalGST).toFixed(2),\r\n      totalDiscount: ((finalCharges.totalAmount - finalCharges.discountedAmount) / finalCharges.totalAmount * 100).toFixed(2),\r\n      totalGST: (finalCharges.totalGST).toFixed(2)\r\n    });\r\n  }\r\n\r\n  function onDiscountChange(discountValue) {\r\n    console.log(\"Discount changed\", discountValue);\r\n    let tempData = [];\r\n    tempData = data.map(item => {\r\n      return {\r\n        ...item,\r\n        discount: discountValue\r\n      }\r\n    });\r\n    calculateTotalCharges(tempData);\r\n    setData(tempData);\r\n  }\r\n\r\n  function paymentMethod(e) {\r\n    setPaymentMode(e.target.value);\r\n  }\r\n\r\n  function generateBill() {\r\n    const body = {\r\n      billId: (billDetails.billId),\r\n      billType: \"PHARMACY\",\r\n      createdAt: (new Date(billDetails.createdAt)),\r\n      paymentStatus: (paymentMode == \"Due\" ? \"dues\" : \"paid\"),\r\n      paymentMode: paymentMode,\r\n      patientId: patientDetails.patientId,\r\n      name: patientDetails.name,\r\n      age: patientDetails.age,\r\n      gender: patientDetails.gender,\r\n      totalCost: finalCharges.totalAmount,\r\n      totalDiscount: finalCharges.totalDiscount,\r\n      totalGST: finalCharges.totalGST,\r\n      billDetailList: []\r\n    };\r\n    data.forEach(item => {\r\n      const billItem = {\r\n        id: null,\r\n        itemName: item.name,\r\n        itemId: item.itemId,\r\n        billMapId: null,\r\n        cost: item.total,\r\n        concessionPercentage: item.discount,\r\n        gstPercentage: item.gst,\r\n        mrp: item.amount,\r\n        concessionType: \"discount\",\r\n        quantity: item.quantity,\r\n        purchaseType: (item.type == \"medicine\" ? \"pharmacy-purchase\" : item.type)\r\n      };\r\n      body.billDetailList.push(billItem);\r\n    });\r\n    console.log(\"body\", body);\r\n    if (newPatientSwitch) {\r\n      const newPatientFormValues = newPatientForm.getFieldsValue();\r\n      body.name = newPatientFormValues.patientName;\r\n      body.age = newPatientFormValues.age;\r\n      body.patientId = null;\r\n      setPatientDetails({\r\n        patientName: newPatientFormValues.patientName,\r\n        patientId: \"N/A\",\r\n        age: newPatientFormValues.age,\r\n      });\r\n    }\r\n    saveGenerateBill(body).then(generateBillStatus => {\r\n      if (generateBillStatus.response == \"success\") {\r\n        notification[\"success\"]({\r\n          message: 'SUCCESS',\r\n          description: 'Bill Generated Successfully with id ' + generateBillStatus.billId,\r\n          duration: 3\r\n        });\r\n        setBillDetails({\r\n          billId: generateBillStatus.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        setState(\"billGenerated\");\r\n\r\n      }\r\n    }).catch(err => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: SERVER_ERROR,\r\n        duration: 3\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n  function onNewPatientSwitchChange(checked) {\r\n    setNewPatientSwitch(checked);\r\n  }\r\n\r\n  function onItemsReturned(returnedRows) {\r\n    let tempData = [...data];\r\n    let itemKeysToRemove = [];\r\n    data.forEach((mainRow, mainIndex) => {\r\n      returnedRows.forEach(returnedRow => {\r\n        if (returnedRow.key == mainRow.key) {\r\n          if (mainRow.quantity == returnedRow.quantity) {\r\n            console.log(\"remove\", tempData[mainIndex]);\r\n            itemKeysToRemove.push(mainRow.key);\r\n\r\n          } else {\r\n            mainRow.quantity = mainRow.quantity - returnedRow.quantity;\r\n            console.log(\"edit\", tempData[mainIndex]);\r\n            console.log(\"with\", mainRow);\r\n            tempData.splice(mainIndex, 1, { ...tempData, ...mainRow });\r\n          }\r\n        }\r\n      });\r\n    });\r\n    tempData = tempData.filter(item => !itemKeysToRemove.includes(item.key));\r\n\r\n    setData(tempData);\r\n    calculateTotalCharges(tempData);\r\n  }\r\n  function onBillDateChange(momentDate, dateString) {\r\n    let date = new Date(dateString);\r\n    setBillDetails({\r\n      createdAt: (date).toDateString()\r\n    });\r\n    setBillDate(moment(date));\r\n  }\r\n\r\n  function onGSTIncludedChange(e) {\r\n    setIsGSTIncluded(e.target.checked);\r\n  }\r\n\r\n\r\n  let columns = [\r\n    {\r\n      title: 'Item Name',\r\n      dataIndex: 'name',\r\n      editable: \"true\"\r\n    },\r\n    {\r\n      title: 'Quantity',\r\n      dataIndex: 'quantity',\r\n      editable: \"true\",\r\n      width: '10%',\r\n    },\r\n    {\r\n      title: 'Amount',\r\n      dataIndex: 'amount',\r\n      editable: \"true\",\r\n      sorter: {\r\n        compare: (a, b) => a.amount - b.amount,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'Discount(%)',\r\n      dataIndex: 'discount',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.discount - b.discount,\r\n        multiple: 2,\r\n      },\r\n    },\r\n    {\r\n      title: 'Total',\r\n      dataIndex: 'total',\r\n      sorter: {\r\n        compare: (a, b) => a.total - b.total,\r\n        multiple: 1,\r\n      },\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) =>\r\n        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n          <a> {queryParams.context != \"edit\" ? \"Delete\" : \"\"} </a>\r\n        </Popconfirm>\r\n    }\r\n  ];\r\n  if (isGSTIncluded) {\r\n    columns.splice(3, 0, {\r\n      title: 'GST(CGST+SGST)',\r\n      dataIndex: 'gst',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.gst - b.gst,\r\n        multiple: 3,\r\n      },\r\n    });\r\n  }\r\n\r\n  columns = columns.map((col) => {\r\n    if (col.editable == \"false\") {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        editable: col.editable,\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        handleSave: handleSave,\r\n      }),\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Modal title=\"Add Item\" visible={isModalVisible} footer={null} onOk={handleOk} onCancel={handleCancel}>\r\n        <AddItem onItemAdded={onItemAdded} />\r\n      </Modal>\r\n      <Modal title=\"Return Item\" visible={isReturnModalVisible} footer={null} onOk={submitReturn} onCancel={cancelReturnModal}>\r\n        <ReturnItem rowsData={data} patientDetails={patientDetails} onItemAdded={onItemAdded} onItemsReturned={onItemsReturned} isModalVisible={setIsReturnModalVisible} />\r\n      </Modal>\r\n      New Patient <Switch onChange={onNewPatientSwitchChange} /> <br /> <br />\r\n      {patientInfo}\r\n      <div style={{ display: 'none' }}>\r\n        <BillPrint ref={componentRef} itemList={data} paymentMode={paymentMode} isGSTIncluded={isGSTIncluded} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} billDate={billDetails.createdAt} patientId={patientDetails.patientId} />\r\n      </div>\r\n      <Divider>Bill Details</Divider>\r\n      <Row gutter={24}>\r\n        <Col span={4}>\r\n          <Descriptions>\r\n            <Descriptions.Item label=\"Bill Id\">{billDetails.billId}</Descriptions.Item>\r\n            {/* <Descriptions.Item label=\"Receipt Id\">{queryParams.receiptId}</Descriptions.Item> */}\r\n            {/* <Descriptions.Item label=\"Date and time\">{billDetails.createdAt}</Descriptions.Item> */}\r\n          </Descriptions>\r\n        </Col>\r\n        <Col span={16}>\r\n          <DatePicker onChange={onBillDateChange} value={billDate} />\r\n        </Col>\r\n        <Col span={4}>\r\n          <Checkbox checked={isGSTIncluded} onChange={onGSTIncludedChange}>Include GST</Checkbox>\r\n        </Col>\r\n      </Row>\r\n\r\n\r\n      <Button\r\n        onClick={showModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"none\" : \"\")\r\n        }}>Add Item\r\n        </Button>\r\n      <Button\r\n        onClick={showReturnItemModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"\" : \"none\")\r\n        }}>Return Item\r\n        </Button>\r\n      <Table columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n\r\n      <FinalCharges finalCharges={finalCharges} onDiscountChange={onDiscountChange} />\r\n      <Divider>Payment</Divider>\r\n      <Radio.Group onChange={paymentMethod} value={paymentMode}>\r\n        <Radio value=\"Cash\">Cash</Radio>\r\n        <Radio value=\"Card\">Card</Radio>\r\n        <Radio value=\"UPI\">UPI</Radio>\r\n        <Radio value=\"Paytm\">Paytm</Radio>\r\n        <Radio value=\"Due\">Due</Radio>\r\n      </Radio.Group>\r\n      <br /><br /><br />\r\n      <Row gutter={24}>\r\n        {generateBillButton}\r\n        {/* <Col className=\"gutter-row\" span={3}>\r\n          <Button type=\"primary\">Cancel</Button>\r\n        </Col> */}\r\n        {printButton}\r\n\r\n        <Col className=\"gutter-row\" span={6}>\r\n          <Button style={{ width: '100%' }} type=\"primary\" onClick={() => history.push({ pathname: '/home/appointment', search: '?patientId='.concat(queryParams.patientId) })}>Go To Appointment</Button>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Billing;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Select, DatePicker } from 'antd';\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\nconst BillSearchComp = (props) => {\r\n    const defaultSearch = \"billId\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n    let inputSearch = <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Bill by\" />;\r\n\r\n    if (filterValue == \"dateRange\") {\r\n        inputSearch = <RangePicker onChange={onDateRangeSelect} disabledDate={disabledDate} />;\r\n    }\r\n    \r\n    function onDateRangeSelect(values) {\r\n        var actualDates = convertToActualDate(values);\r\n        props.onSearch(actualDates, filterValue);\r\n    }\r\n\r\n    function convertToActualDate(values) {\r\n        var date = moment(values[0]).toDate();\r\n        date.setHours(0);\r\n\r\n        var date2 = moment(values[1]).toDate();\r\n        date2.setHours(24);\r\n        return [date.getTime(), date2.getTime()];\r\n    }\r\n    function disabledDate(current) {\r\n        // Can not select days before today and today\r\n        return current && current > moment().endOf('day');\r\n    }\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n        <Input.Group compact>\r\n            <Select defaultValue={defaultSearch} onSelect={setfilterValue}>\r\n                <Option key=\"patientId\" value=\"patientId\">Patient Id</Option>\r\n                <Option key=\"billId\" value=\"billId\">Bill Id</Option>\r\n                <Option key=\"dateRange\" value=\"dateRange\">Date Range</Option>\r\n            </Select>\r\n            { inputSearch }\r\n        </Input.Group>);\r\n};\r\nexport default BillSearchComp;\r\n","import React, { useEffect } from 'react';\r\nimport BillSearch from '../billing/components/billSearch';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, AutoComplete, Badge, Descriptions, Row, Col, Button, Space } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UserOutlined, DownloadOutlined, OrderedListOutlined } from '@ant-design/icons';\r\nconst renderTitle = (title: string) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title: string, count: number) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\nconst options = [\r\n    {\r\n        label: renderTitle('Libraries'),\r\n        options: [renderItem('AntDesign', 10000), renderItem('AntDesign UI', 10600)],\r\n    },\r\n    {\r\n        label: renderTitle('Solutions'),\r\n        options: [renderItem('AntDesign UI FAQ', 60100), renderItem('AntDesign FAQ', 30010)],\r\n    },\r\n    {\r\n        label: renderTitle('Articles'),\r\n        options: [renderItem('AntDesign design language', 100000)],\r\n    },\r\n];\r\n\r\nconst Canteen = () => {\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <BillSearch />\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Button type=\"dashed\" icon={<PlusOutlined />}>\r\n                        New\r\n                    </Button>\r\n                    <Button type=\"dashed\" style={{ marginLeft: '5px' }} icon={<OrderedListOutlined />}>\r\n                        <Link to=\"/home/canteenStock\">View Stock</Link>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Descriptions title=\"Patient Info\">\r\n                <Descriptions.Item label=\"Patient Name\">Rishiraj</Descriptions.Item>\r\n                <Descriptions.Item label=\"Phone\">919829128</Descriptions.Item>\r\n                <Descriptions.Item label=\"Department\">Ward 1</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"warning\" text=\"pending\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <br /><br />\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'itemName']}\r\n                                            fieldKey={[field.fieldKey, 'itemName']}\r\n                                            rules={[{ required: true, message: 'Missing Item name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search placeholder=\"Search item\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <Input placeholder=\"Price\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'gst']}\r\n                                            fieldKey={[field.fieldKey, 'gst']}\r\n                                        >\r\n                                            <Input placeholder=\"gst\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n            <Descriptions title=\"\">\r\n                <Descriptions.Item label=\"Total Amount\">100</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total GST\">15</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total discount\">0</Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <Form.Item>\r\n                <Row>\r\n                    <Col span={12} offset={11}>\r\n                        <Button type=\"primary\" shape=\"round\" icon={<DownloadOutlined />} size='large'>Print</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Pay Now</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Add to Bill</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form.Item>\r\n        </>\r\n\r\n    );\r\n};\r\nexport default Canteen;\r\n","import { PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Divider, Form, Input, InputNumber, Select, Table } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { Option } = Select;\r\nconst defaultCategories = ['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian'];\r\nconst columns = [\r\n    {\r\n        title: 'Item Name',\r\n        dataIndex: 'itemName',\r\n        defaultSortOrder: 'descend',\r\n        sorter: (a, b) => a.itemName - b.itemName,\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price'\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        filters: defaultCategories.map(cat => {\r\n            return {\r\n                text: cat,\r\n                value: cat,\r\n            }\r\n        }),\r\n        onFilter: (value, record) => record.category.indexOf(value) === 0,\r\n        sorter: (a, b) => a.category.length - b.category.length,\r\n        sortDirections: ['descend'],\r\n    }\r\n];\r\n\r\nconst CanteenStock = () => {\r\n    let index = 0;\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    const [, forceUpdate] = useState();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian']);\r\n\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const onFinish = values => {\r\n        console.log('Finish:', values);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"itemName\"\r\n                    rules={[{ required: true, message: 'Please enter item name!' }]}\r\n                >\r\n                    <Input placeholder=\"Item Name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please enter a price!' }]}\r\n                >\r\n                    <InputNumber placeholder=\"Price\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"Category\"\r\n                >\r\n                    <Select\r\n                        style={{ width: 240 }}\r\n                        placeholder=\"Select category\"\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                <Divider style={{ margin: '4px 0' }} />\r\n                                <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                    <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                    <a\r\n                                        style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                        onClick={addItem}\r\n                                    >\r\n                                        <PlusOutlined /> Add item\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {items.map(item => (\r\n                            <Option key={item}>{item}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Item\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default CanteenStock;\r\n","import { useState } from 'react';\r\nimport { getAllPatients } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst usePatientSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllPatients();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientSearch;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByDoctorId } from '../queries';\r\n\r\nconst useGetAppointmentByDoctorId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (doctorId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByDoctorId(doctorId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByDoctorId;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByPatientId } from '../queries';\r\n\r\nconst useGetAppointmentByPatientId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByPatientId(patientId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByPatientId;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, DatePicker, Button, TimePicker, Select, Space, Input } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport useGetAppointmentByDoctorId from '../../state/appointment/hooks/useGetAppointmentsByDoctorId';\r\nimport useGetAppointmentByPatientId from '../../state/appointment/hooks/useGetAppointmentByPatientId';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\nfunction PickerWithType({ type, onChange }) {\r\n    if (type === 'time') return <TimePicker onChange={onChange} />;\r\n    if (type === 'date') return <DatePicker onChange={onChange} />;\r\n    return <DatePicker picker={type} onChange={onChange} />;\r\n}\r\n\r\nfunction DoctorAppointment({ location, history }) {\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Patient Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n        },\r\n        {\r\n            title: 'Date',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n        },\r\n        {\r\n            title: 'Time Slot',\r\n            dataIndex: 'timeSlot',\r\n            key: 'timeSlot',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color=\"green\" key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Booked',\r\n                    value: 'booked',\r\n                },\r\n                {\r\n                    text: 'Appointment done',\r\n                    value: 'done',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => {\r\n                let proceed = \"\";\r\n                if (record.status != \"done\") {\r\n                    proceed = <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/prescription', search: '?patientId=' + record.patientId + '&patientName=' + record.patientName + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        Proceed\r\n                </Button>\r\n                }\r\n                return <Space size=\"middle\">\r\n                    {proceed}\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        View\r\n            </Button>\r\n                </Space>\r\n            },\r\n        }\r\n    ];\r\n    let doctorsList = [];\r\n    const [type, setType] = useState('time');\r\n    const [patientAppointments, isLoading2, setAppointmentByPatientId] = useGetAppointmentByPatientId();\r\n    // const [selectedDoctor, setSelectedDoctor] = useState(\"initial\");\r\n    const [filter, setFilter] = useState(\"none\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [appointments, isLoading1, setAppointmentByDoctorId] = useGetAppointmentByDoctorId();\r\n    let data = [];\r\n    useEffect(() => {\r\n        setRequest();\r\n    }, []);\r\n\r\n    if (doctors.length > 0) {\r\n        doctorsList = doctors.map(doctor => <Option key={doctor.doctorId} >{doctor.doctorName}</Option>);\r\n    }\r\n    console.log(\"asadada\", appointments);\r\n    if (filter == \"doctor\" && appointments.length > 0) {\r\n        data = appointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                timeSlot: appointment.timeSlot,\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['booked'])\r\n            };\r\n        });\r\n    }\r\n    if (filter == \"patient\" && patientAppointments.length > 0) {\r\n        data = patientAppointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                timeSlot: appointment.timeSlot,\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['booked'])\r\n            };\r\n        });\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        setAppointmentByDoctorId(value);\r\n        setFilter(\"doctor\");\r\n    }\r\n\r\n    const onPatientSearch = value => {\r\n        setAppointmentByPatientId(value);\r\n        setFilter(\"patient\");\r\n    };\r\n    return (\r\n        <>\r\n            <Space>\r\n                <Select\r\n                    onChange={handleChangeOfDoctor}\r\n                    showSearch\r\n                    placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }>\r\n                    {doctorsList}\r\n                </Select>\r\n                {/* <Select value={type} onChange={setType}>\r\n                    <Option value=\"time\">Time</Option>\r\n                    <Option value=\"date\">Date</Option>\r\n                    <Option value=\"week\">Week</Option>\r\n                    <Option value=\"month\">Month</Option>\r\n                    <Option value=\"quarter\">Quarter</Option>\r\n                    <Option value=\"year\">Year</Option>\r\n                </Select>\r\n                <PickerWithType type={type} onChange={value => console.log(value)} /> */}\r\n                <Search\r\n                    placeholder=\"Search Patient By Id\"\r\n                    allowClear\r\n                    enterButton=\"Search\"\r\n                    size=\"medium\"\r\n                    style={{ width: '100%', marginLeft: '200px' }}\r\n                    onSearch={onPatientSearch}\r\n                />\r\n            </Space>\r\n            <br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DoctorAppointment;","import { useState } from 'react';\r\nimport { addMedicine } from '../queries';\r\n\r\nconst useAddMedicine = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addMedicine(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddMedicine;\r\n","import { useState } from 'react';\r\nimport { getAllMedicines } from '../queries';\r\n\r\nconst useMedicineSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllMedicines();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useMedicineSearch;","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\n\r\nconst AddMedicine = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddMedicine();\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Medicine added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    console.log(\"medicines list\", medicines);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"medicineName\": form.name,\r\n            \"medicineType\": form.type,\r\n            \"strength\": form.strength,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Medicine Name',\r\n            dataIndex: 'medicineName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Strength',\r\n            dataIndex: 'strength'\r\n        },\r\n        {\r\n            title: 'Medicine Type',\r\n            dataIndex: 'medicineType',\r\n            filters: [\r\n                {\r\n                    text: 'Aspirin',\r\n                    value: 'aspirin',\r\n                },\r\n                {\r\n                    text: 'Painkillers',\r\n                    value: 'painkiller',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.medicineType.indexOf(value) === 0,\r\n            sorter: (a, b) => a.medicineType.length - b.medicineType.length,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                medicineName: medicine.medicineName,\r\n                price: medicine.price,\r\n                strength: medicine.strength,\r\n                medicineType: medicine.medicineType,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please medicine name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"type\"\r\n                    rules={[{ required: true, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine type\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"strength\"\r\n                    rules={[{ required: true, message: 'Please input strength!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Strength\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Medicine\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddMedicine;","import { useState } from 'react';\r\nimport { addMedicine, addTest } from '../queries';\r\n\r\nconst useAddTest = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addTest(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddTest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Table, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport useAddTest from '../../../state/addMedicine/hooks/useAddTest';\r\nimport Spinner from '../../../components/spinner';\r\nimport useSearchTest from '../../../state/addMedicine/hooks/useSearchTest';\r\n\r\nconst AddTest = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddTest();\r\n    const [medicines, isLoadings, setMedicineSearch] = useSearchTest();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Test added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"testName\": form.name,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Test Name',\r\n            dataIndex: 'testName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.testName - b.testName,\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                testName: medicine.testName,\r\n                price: medicine.price\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please select test name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Test name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Test\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddTest;","import { Button, Col, Form, Row, Space, Table, Tag } from 'antd';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nconst columns = [\r\n    {\r\n        title: 'Package Name',\r\n        dataIndex: 'packageName',\r\n        key: 'packageName',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Package End Date',\r\n        dataIndex: 'packageEndDate',\r\n        key: 'packageEndDate',\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '2',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '3',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n];\r\n\r\nconst Package = () => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            <Link to=\"/home/newPackage\">Create New</Link>\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Package;\r\n","import React, { } from 'react';\r\nimport { Table, Input, Select, Button, Descriptions } from 'antd';\r\nimport PatientDetails from '../../patientDetails';\r\nconst ViewPatientRecords = (props) => {\r\n    let history = props.history;\r\n    const patientDetails = props.patientDetails;\r\n    let dataModal = [];\r\n    let userDetails = [];\r\n    const columnsModal = [\r\n        { title: 'Appointment ID', dataIndex: 'appointmentId', key: 'appointmentId' },\r\n        { title: 'Appointment Date', dataIndex: 'appointmentDate', key: 'appointmentDate' },\r\n        { title: 'Disease summary', dataIndex: 'diseaseDesc', key: 'diseaseDesc' },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            render: (text, record) => <Button type=\"primary\" onClick={() => {\r\n                history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n            }}>View</Button>,\r\n        },\r\n    ];\r\n    props.patientAppointments.map(data => {\r\n        if (data.status == \"done\") {\r\n            dataModal.push({ ...data, appointmentDate: (new Date(data.appointmentDate)).toDateString() });\r\n        }\r\n    });\r\n    console.log(\"patient\", patientDetails);\r\n    for (var key of Object.keys(patientDetails)) {\r\n        if (patientDetails[key] && key!= \"key\") {\r\n            userDetails.push(<Descriptions.Item label={key}>{patientDetails[key]}</Descriptions.Item>);\r\n        }\r\n    }\r\n    // const dataModal = [\r\n    //     {\r\n    //         key: 1,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"15 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 2,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"23 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 3,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"30 Aug 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    //     {\r\n    //         key: 4,\r\n    //         appointmentid: '3723823d',\r\n    //         appointmentdate: \"14 Sep 2020\",\r\n    //         description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n    //     },\r\n    // ];\r\n\r\n    return (\r\n        <>\r\n            <Descriptions>\r\n            {userDetails}\r\n            </Descriptions>\r\n            <Table\r\n                columns={columnsModal}\r\n                // expandable={{\r\n                //     expandedRowRender: record => <p style={{ margin: 0 }}>{record.description}</p>,\r\n                //     rowExpandable: record => record.app !== '14 Aug',\r\n                // }}\r\n                dataSource={dataModal}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewPatientRecords;","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Select, DatePicker } from 'antd';\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\nconst PatientSearchComp = (props) => {\r\n    const defaultSearch = \"patientName\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n    let inputSearch =  <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Patient by\" />\r\n\r\n    if (filterValue == \"dateRange\") {\r\n        inputSearch = <RangePicker onChange={onDateRangeSelect} disabledDate={disabledDate} />;\r\n    }\r\n    \r\n    function onDateRangeSelect(values) {\r\n        var actualDates = convertToActualDate(values);\r\n      props.onSearch(actualDates, filterValue);\r\n    }\r\n\r\n    function convertToActualDate(values) {\r\n        var date = moment(values[0]).toDate();\r\n        date.setHours(0);\r\n\r\n        var date2 = moment(values[1]).toDate();\r\n        date2.setHours(24);\r\n        return [date, date2];\r\n    }\r\n    function disabledDate(current) {\r\n        // Can not select days before today and today\r\n        return current && current > moment().endOf('day');\r\n    }\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n        <Input.Group compact>\r\n        <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n            <Option value=\"patientName\">Patient Name</Option>\r\n            <Option value=\"patientId\">Patient Id</Option>\r\n            <Option key=\"dateRange\" value=\"dateRange\">Date Range</Option>\r\n        </Select>\r\n        { inputSearch }\r\n    </Input.Group>);\r\n};\r\nexport default PatientSearchComp;\r\n","import { useState } from 'react';\r\nimport { getPatientByName } from '../queries';\r\n\r\nconst usePatientByName = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientName) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientByName(patientName);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientByName;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Input, Space, Button, Modal, Select, notification } from 'antd';\r\nimport moment from 'moment';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport ViewPatientRecords from './components/viewPatientRecords';\r\nimport Spinner from '../../components/spinner';\r\nimport PatientSearchComp from './components/patientSearchComponent';\r\nimport usePatientById from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../patientDetails';\r\nimport usePatientByName from '../../state/patientSearch/hooks/usePatientSearchByName';\r\nimport { getAppointmentByPatientId } from '../../state/appointment/queries';\r\nimport { responsiveArray } from 'antd/lib/_util/responsiveObserve';\r\nimport { getAllPatients } from '../../state/patientSearch/queries';\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nconst PatientSearch = ({ history }) => {\r\n    const [isPatientRecordModalVisible, setIsPatientRecordModalVisible] = useState(false);\r\n    const [name, setName] = useState([]);\r\n    const [showPatient, setShowPatient] = useState(\"all\");\r\n    const [allPatients, setAllPatients] = useState([]);\r\n    const [dateFilteredPatient, setDateFilteredPatient] = useState([]);\r\n    const [patients, isLoading, setRequest] = usePatientSearch();\r\n    const [patientDetails, isLoading1, setPatientSearchbyId] = usePatientById();\r\n    const [currentPatientDetails, setCurrentPatientDetails] = useState({});\r\n    const [currentPatientAppointments, setCurrentPatientAppointments] = useState({});\r\n    const [patientDetailsByName, isLoading2, setPatientSearchbyName] = usePatientByName();\r\n    let data = [];\r\n\r\n    useEffect(() => {\r\n        if (showPatient === \"all\") {\r\n            setRequest();\r\n            setAllPatientList();\r\n        }\r\n    }, [showPatient]);\r\n\r\n    function setAllPatientList() {\r\n        getAllPatients().then(data => {\r\n            setAllPatients(data);\r\n        }).catch(err => {\r\n\r\n        });\r\n    }\r\n    function onPatientSearch(searchValue, searchFilter) {\r\n        console.log(searchValue);\r\n\r\n        if (searchValue == '') {\r\n            setRequest();\r\n            setShowPatient(\"all\");\r\n        } else if (searchFilter == \"patientId\") {\r\n            setPatientSearchbyId(searchValue);\r\n            setShowPatient(\"patientId\");\r\n        } else if (searchFilter == \"patientName\") {\r\n            setPatientSearchbyName(searchValue);\r\n            setShowPatient(\"patientName\");\r\n        } else if (searchFilter == \"dateRange\") {\r\n            console.log(searchValue);\r\n            data = allPatients.filter(data => {\r\n                if (data.createdAt < searchValue[1] && data.createdAt > searchValue[0]) {\r\n                    console.log('aaya');\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n            setShowPatient(searchFilter);\r\n            setDateFilteredPatient(data);\r\n        }\r\n\r\n    }\r\n    if (showPatient == \"patientId\" && patientDetails != null) {\r\n        const row = [{\r\n            key: patientDetails.patientId,\r\n            patientId: patientDetails.patientId,\r\n            patientName: patientDetails.patientName,\r\n            age: patientDetails.age,\r\n            contactNum: patientDetails.contactNum,\r\n            street: patientDetails.street,\r\n            status: ['registered']\r\n        }];\r\n        data = row;\r\n    }\r\n\r\n    if (showPatient == \"patientName\" && patientDetailsByName != null) {\r\n        data = patientDetailsByName.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"all\" && patients.length > 0) {\r\n        data = patients.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"dateRange\" && dateFilteredPatient.length > 0) {\r\n        data = dateFilteredPatient.map((patient, index) => {\r\n            return {\r\n                ...patient,\r\n                key: patient.patientId,\r\n                status: ['registered']\r\n            };\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n            sorter: (a, b) => a.patientName.length - b.patientName.length,\r\n            sortDirections: ['descend', 'ascend'],\r\n        },\r\n        {\r\n            title: 'Patient Id',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId',\r\n        },\r\n        {\r\n            title: 'Age',\r\n            dataIndex: 'age',\r\n            key: 'age',\r\n        },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 'contactNum',\r\n            key: 'contactNum',\r\n        },\r\n        {\r\n            title: 'Visit Type',\r\n            dataIndex: 'visitType',\r\n            key: 'visitType',\r\n            filters: [\r\n                {\r\n                    text: 'OPD',\r\n                    value: 'OPD',\r\n                },\r\n                {\r\n                    text: 'IPD',\r\n                    value: 'IPD',\r\n                },\r\n                {\r\n                    text: 'OPD to IPD',\r\n                    value: 'OPD to IPD',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.visitType == value,\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        let color = tag.length > 5 ? 'geekblue' : 'green';\r\n                        if (tag === 'loser') {\r\n                            color = 'volcano';\r\n                        }\r\n                        return (\r\n                            <Tag color={color} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Registered',\r\n                    value: 'registered',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'discharged',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        setCurrentPatientDetails(record);\r\n                        getAppointmentByPatientId(record.patientId).then(response => {\r\n                            setCurrentPatientAppointments(response);\r\n                            setIsPatientRecordModalVisible(true);\r\n                        }).catch(err => {\r\n                            notification[\"error\"]({\r\n                                message: 'Error',\r\n                                description: 'Error while searching records with Patient Id' + record.patientId,\r\n                                duration: 3\r\n                            });\r\n                        });\r\n                    }}>\r\n                        View records\r\n                    </Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <PatientSearchComp onSearch={onPatientSearch} />\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n            <Modal title=\"Patient Records\" visible={isPatientRecordModalVisible} footer={null} width={800} onCancel={() => setIsPatientRecordModalVisible(false)} >\r\n                <ViewPatientRecords patientDetails={currentPatientDetails} patientAppointments={currentPatientAppointments} history={history} />\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PatientSearch;","import React, { useEffect } from 'react';\r\n\r\nconst Pharmacy = () => {\r\n    return (\r\n        <>\r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pharmacy;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePrescription = (body) => {\r\n    return axios\r\n        .post(`${api.url}/doctorService/savePrescription`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPrescriptionByAppointmentId = (appointmentId) => {\r\n    return axios\r\n        .get(`${api.url}/doctorService/getPrescriptionDetails?appointmentId=` + appointmentId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { savePrescription } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useSavePrescription = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState({});\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await savePrescription(body);\r\n\r\n    setStatus(response);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useSavePrescription;\r\n","import { PrinterOutlined, MinusCircleOutlined, PlusOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useMedicineSearch from '../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useSearchTest from '../../state/addMedicine/hooks/useSearchTest';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport useSavePrescription from '../../state/prescription/hooks/useSavePrescription';\r\nimport PatientDetails from '../patientDetails';\r\nimport '../prescription/prescription.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst renderTitle = (title) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title, count) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\n\r\n\r\nconst Prescription = ({ location, history }) => {\r\n    let options = [];\r\n    const optionsTests = [];\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [form] = Form.useForm();\r\n    const [medicineForm] = Form.useForm();\r\n    const [vitalsForm] = Form.useForm();\r\n    const [adviceForm] = Form.useForm();\r\n\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    const [response, isLoading1, setSavePrescription] = useSavePrescription();\r\n    const [tests, isLoading, setTestSearch] = useSearchTest();\r\n    // const [tests, isLoading, setTestSearch] = usePre();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        getPatientDetails(queryParams.patientId);\r\n        if (response.status == \"SUCCESS\") {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient prescription has been generated successfully',\r\n                duration: 3\r\n            });\r\n        } else if (response.status == 500) {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error saving the prescription, please check with admin',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [response]);\r\n    function getPatientDetails(patientId) {\r\n        getPatientById(patientId).then(data => {\r\n            setPatientDetails(data);\r\n        });\r\n    }\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n        console.log('Dawaiyaan', form.getFieldsValue());\r\n        console.log('tests:', medicineForm.getFieldsValue());\r\n        console.log('vitals:', vitalsForm.getFieldsValue());\r\n        const medicineList = medicineForm.getFieldsValue().users;\r\n        const testList = form.getFieldsValue().users;\r\n        const patientVitals = vitalsForm.getFieldsValue();\r\n        const body = {\r\n            appointmentDto: {\r\n                appointmentId: queryParams.appointmentId,\r\n                appointmentDate: new Date().getTime(),\r\n                patientId: queryParams.patientId,\r\n                patientName: queryParams.patientName,\r\n                doctorId: queryParams.doctorId,\r\n                height: patientVitals.height,\r\n                weight: patientVitals.weight,\r\n                Bp: patientVitals.bp,\r\n                temprature: patientVitals.temparature,\r\n                advise: adviceForm.getFieldsValue().advice,\r\n                status: \"done\"\r\n            },\r\n            prescribedMedsDtoList: null,\r\n            prescribedTestingDtoList: null\r\n        };\r\n\r\n        if (medicineList != null && medicineList.length > 0) {\r\n            body.prescribedMedsDtoList = medicineList.map(medicine => {\r\n                return { medName: medicine.medicineName, days: medicine.numberOfDays, dosage: medicine.dosage, comment: medicine.comments };\r\n            });\r\n        }\r\n\r\n        if (testList != null && testList.length > 0) {\r\n            body.prescribedTestingDtoList = testList.map(test => {\r\n                return {\r\n                    testName: test.testName,\r\n                    dateOfBooking: test.date,\r\n                    comment: test.comments\r\n                };\r\n            });\r\n        }\r\n        setSavePrescription(body);\r\n        setSubmitted(true);\r\n    };\r\n    const handleSearch = (value) => {\r\n        setMedicineSearch();\r\n    };\r\n\r\n    const handleTestSearch = (value) => {\r\n        setTestSearch();\r\n    };\r\n\r\n    if (tests.length > 0) {\r\n        tests.forEach(test => {\r\n            optionsTests.push({ value: test.testName });\r\n        });\r\n    }\r\n\r\n    if (medicines.length > 0) {\r\n        var map = new Map();\r\n\r\n        medicines.forEach(medicine => {\r\n            if (map.has(medicine.medicineType)) {\r\n                map.set(medicine.medicineType, [...map.get(medicine.medicineType), medicine.medicineName]);\r\n            } else {\r\n                map.set(medicine.medicineType, [medicine.medicineName])\r\n            }\r\n        });\r\n        console.log(map);\r\n        for (let [key, value] of map) {\r\n            console.log(key + \" = \" + value);\r\n            options.push({\r\n                label: renderTitle(key),\r\n                options: value.map(val => renderItem(val, 100)),\r\n            });\r\n        }\r\n    }\r\n    let formActions = <Button size=\"large\" type=\"primary\">Submit</Button>;\r\n    if (submitted && response.status != 500) {\r\n        formActions = (<><Button type=\"primary\" shape=\"round\" onClick={() => {\r\n            history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + queryParams.patientId + '&doctorId=' + queryParams.doctorId + '&appointmentId=' + queryParams.appointmentId });\r\n        }} icon={<PrinterOutlined />} size='large'>Print</Button>\r\n            <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large' onClick={value => history.push({ pathname: '/home/doctorAppointment' })}>Go to My Appoinments</Button></>);\r\n    }\r\n    return (\r\n        <>\r\n            <PatientDetails patientDetails={patientDetails} />\r\n            <br></br>\r\n            <Divider>Patient Vitals</Divider>\r\n\r\n            <Form\r\n                form={vitalsForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"BP\" name=\"bp\">\r\n                            <InputNumber name=\"bp\" style={{ width: '90%' }} placeholder=\"Blood pressure\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Temparature\" name=\"temparature\">\r\n                            <InputNumber name=\"temparature\" style={{ width: '90%' }} placeholder=\"Temp In degrees Celsius\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Height\" name=\"height\">\r\n                            <InputNumber name=\"height\" style={{ width: '90%' }} placeholder=\"Height in feet\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Weight\" name=\"weight\">\r\n                            <Input name=\"weight\" style={{ width: '90%' }} placeholder=\"Weight in (kgs)\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </Form>\r\n            <Divider>Prescribe Medicines</Divider>\r\n            {/* <PrescribeMedicine /> */}\r\n\r\n            <Form name=\"dynamic_form_nest_item\" form={medicineForm} onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map((field, index) => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'medicineName']}\r\n                                            fieldKey={[field.fieldKey, 'medicineName']}\r\n                                            rules={[{ required: true, message: 'Missing Medicine name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleSearch}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Medicine\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'dosage']}\r\n                                            fieldKey={[field.fieldKey, 'dosage']}\r\n                                            rules={[{ required: true, message: 'Missing Dosage' }]}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Dosage per day (M-A-N)\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">1-0-0</Option>\r\n                                                <Option value=\"1-1-0\">1-1-0</Option>\r\n                                                <Option value=\"1-1-1\">1-1-1</Option>\r\n                                                <Option value=\"0-0-1\">0-0-1</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'numberOfDays']}\r\n                                            fieldKey={[field.fieldKey, 'numberOfDays']}\r\n                                            rules={[{ required: true, message: 'Missing Number of days' }]}\r\n                                        >\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Medicines\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n\r\n            <br></br>\r\n            <Divider>Prescribe Tests</Divider>\r\n            <Form name=\"dynamic_form_nest_item2\" form={form} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'testName']}\r\n                                            fieldKey={[field.fieldKey, 'testName']}\r\n                                            rules={[{ required: true, message: 'Missing test name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleTestSearch}\r\n                                                style={{ width: 200 }}\r\n                                                options={optionsTests}\r\n                                                placeholder=\"Type test name\"\r\n                                                filterOption={(inputValue, option) =>\r\n                                                    option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                                                }\r\n                                            />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'date']}\r\n                                            fieldKey={[field.fieldKey, 'date']}\r\n                                            rules={[{ required: false }]}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Tests\r\n                                   </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                form={adviceForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={20}>\r\n                        <Form.Item name='advice' label=\"Summary\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <Row>\r\n                <Col span={12} onClick={onFinish} offset={11}>\r\n                    {formActions}\r\n                </Col>\r\n            </Row>\r\n        </>);\r\n};\r\n\r\nexport default Prescription;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport useRegistration from '../../state/registration/hooks/useRegistration';\r\nimport Spinner from '../../components/spinner';\r\nimport { registration } from '../../state/registration/queries';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst Registration = ({ location, history }) => {\r\n    const onFinish = formData => {\r\n\r\n        const form = formData.user;\r\n        const body = {\r\n            \"patientName\": form.name,\r\n            \"age\": form.age,\r\n            \"contactNum\": form.phone,\r\n            \"altContactNum\": form.alternatecontact,\r\n            \"street\": form.address,\r\n            \"state\": form.state,\r\n            \"country\": form.country,\r\n            \"visitType\": form.visit,\r\n            \"createdAt\": (new Date()).getTime()\r\n        };\r\n        registration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient has been registered successfully',\r\n                duration: 3\r\n            });\r\n            history.push({ pathname: '/home/billing', search: '?patientId=' + data.patientId + '&receiptId=' + data.recieptId + '&context=registration' });\r\n        }).catch(errr => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error in registration',\r\n                duration: 3\r\n            });\r\n\r\n        });\r\n        // setRequest(body);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'gender']} label=\"Gender\" rules={[{ required: true }]}>\r\n                    <Select\r\n                        placeholder=\"Select Gender\"\r\n                        allowClear>\r\n                        <Option value=\"male\">male</Option>\r\n                        <Option value=\"female\">female</Option>\r\n                        <Option value=\"other\">other</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'age']} label=\"Age\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'visit']} label=\"Visit Type\" rules={[{ required: true }]}>\r\n                    <Select placeholder=\"Select Visit type\">\r\n                        <Option value=\"OPD\">OPD</Option>\r\n                        <Option value=\"IPD\">IPD</Option>\r\n                        <Option value=\"OPD to IPD\">OPD to IPD</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'phone']} label=\"Phone Number\" rules={[{ required: true, message: 'Please input your phone number!' }]}>\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'alternatecontact']} label=\"Alternate Contact Number\">\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'email']} label=\"Email\" rules={[{ type: 'email' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'address']} label=\"Address\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'state']} label=\"State\">\r\n                    <Select\r\n                        defaultValue=\"bihar\"\r\n                        placeholder=\"Select State\"\r\n                        allowClear>\r\n                        <Option value=\"bihar\">Bihar</Option>\r\n                        <Option value=\"up\">UP</Option>\r\n                        <Option value=\"Karnataka\">Karnataka</Option>\r\n                        <Option value=\"Jharkhand\">Jharkhand</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'country']} label=\"Country\">\r\n                    <Select\r\n                        defaultValue=\"india\"\r\n                        placeholder=\"Select Country\"\r\n                        allowClear>\r\n                        <Option value=\"india\">India</Option>\r\n                        <Option value=\"us\">US</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" size='large' htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, { useEffect } from 'react';\r\nimport { Carousel } from 'antd';\r\nimport corousal1 from '../../../assets/images/corousal1.jpg';\r\nimport corousal2 from '../../../assets/images/corousal2.jpg';\r\nimport corousal3 from '../../../assets/images/corousal3.jpg';\r\nimport corousal4 from '../../../assets/images/corousal4.jpg';\r\nimport '../homescreen/homescreen.css';\r\nconst contentStyle = {\r\n    height: '700px',\r\n    color: '#fff',\r\n    lineHeight: '500px',\r\n    textAlign: 'center',\r\n    background: '#364d79',\r\n    fontSize: \"32px\"\r\n};\r\n\r\n\r\n\r\nconst HomeScreen = () => {\r\n    return (\r\n        <Carousel autoplay>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal1})` }}>\r\n                    Welcome to Baymax Healthcare\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal2})` }}>\r\n                    Manage everything from central place\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal3})` }}>\r\n                    Secure and reliable\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal4})` }}>\r\n                    Access records from anywhere\r\n                </div>\r\n            </div>\r\n        </Carousel>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import { useState } from 'react';\r\nimport { getPharmacyMedicineDetail } from '../queries';\r\n\r\nconst useGetPharmacyMedicineDetail = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPharmacyMedicineDetail(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicineDetail;","import React, { useState, useEffect } from 'react';\r\nimport { PlusOutlined, OrderedListOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport { medicineDistributionUnits } from './utils';\r\nimport queryString from 'query-string';\r\nimport useSavePharmacyMedicine from '../../../state/pharmacy/hooks/useSavePharmacyMedicine';\r\nimport useGetPharmacyMedicineDetail from '../../../state/pharmacy/hooks/useGetMedicinedetail';\r\nimport { setNestedObjectValues } from 'formik';\r\nimport { saveItemCategory, getCategoriesList, savePharmacyMedicine } from '../../../state/pharmacy/queries';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst medicineUnits = medicineDistributionUnits.map(medicineDistributionUnit => <Option key={medicineDistributionUnit}>{medicineDistributionUnit}</Option>);\r\nconst AddNewMedicine = ({ location, history }) => {\r\n    let index = 0;\r\n    const [form] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n    const [medicineDetail, setRequest1] = useGetPharmacyMedicineDetail();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            setRequest1(queryParams.medicineId);\r\n        }\r\n        intialiseCategories();\r\n    }, []);\r\n\r\n    if (medicineDetail != null && queryParams.mode == \"edit\") {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: medicineDetail.medicineId,\r\n                medicineName: medicineDetail.medicineName,\r\n                genericName: medicineDetail.genericName,\r\n                boxSize: Number.parseInt(medicineDetail.boxSize),\r\n                expDate: medicineDetail.expiryDate,\r\n                medicineShelf: medicineDetail.medicineShelf,\r\n                details: medicineDetail.details,\r\n                category: medicineDetail.category,\r\n                unit: medicineDetail.unit,\r\n                triggerValue: Number.parseFloat(medicineDetail.triggerValue),\r\n                image: medicineDetail.image,\r\n                salePrice: Number.parseFloat(medicineDetail.salePrice),\r\n                supplierPrice: medicineDetail.suppliersPrice,\r\n                tax: medicineDetail.tax,\r\n                supplierName: medicineDetail.supplierName,\r\n                availability: medicineDetail.availability,\r\n                stockQuantity: medicineDetail.stockQuantity,\r\n            }\r\n        });\r\n    }\r\n\r\n    function intialiseCategories() {\r\n        getCategoriesList().then(data => {\r\n            if(data) {\r\n                setItems(data);\r\n            }\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        console.log(form);\r\n        const body = {\r\n            medicineName: form.medicineName,\r\n            genericName: form.genericName,\r\n            boxSize: form.boxSize,\r\n            details: form.details,\r\n            category: form.category,\r\n            unit: form.unit,\r\n            triggerValue: form.triggerValue,\r\n            image: form.image,\r\n            salePrice: form.salePrice,\r\n            availability: form.availability,\r\n            stockQuantity: form.stockQuantity\r\n        };\r\n\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            body[\"medicineId\"] = queryParams.medicineId;\r\n        }\r\n\r\n        savePharmacyMedicine(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Medicine ${form.medicineName} ${queryParams.mode == 'edit' ? 'edited' : 'added'} successfully`,\r\n                duration: 3\r\n            });\r\n            clearForm();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while saving Medicine`,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        // setName('');\r\n        const body = {\r\n            categoryId: null,\r\n            categoryName: name\r\n        };\r\n        saveItemCategory(body).then(data => {\r\n            setItems([...items, {categoryId: null, categoryName: name} || `New item ${index++}`]);\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Category ${name} added successfully`,\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while creating category`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    function clearForm() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: null,\r\n                medicineName: \"\",\r\n                genericName: \"\",\r\n                boxSize: 0,\r\n                details: \"\",\r\n                category: \"\",\r\n                unit: \"\",\r\n                triggerValue: 0,\r\n                image: null,\r\n                salePrice: 0,\r\n                availability: \"In stock\",\r\n                stockQuantity: 0\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageSuppliers' });\r\n            }} type=\"dashed\" icon={<PlusOutlined />}>Add Supplier</Button>\r\n            <Button type=\"dashed\" onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button>\r\n            <br /><br /><br />\r\n            <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'availability']} label=\"Availability\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"In stock\">In Stock</Option>\r\n                                <Option value=\"Out of stock\">Out Of Stock</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'stockQuantity']} label=\"Stock Quantity\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineName']} label=\"Medicine Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'genericName']} label=\"Generic Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'boxSize']} label=\"Box Size\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'expiryDate']} label=\"Expiry Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineShelf']} label=\"Medicine Shelf\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'details']} label=\"Details\">\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'category']} label=\"Category\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select category\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item.categoryName}>{item.categoryName}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'unit']} label=\"Unit\">\r\n                            <Select\r\n                                showSearch\r\n                                placeholder=\"Select Distribution Unit\" style={{ width: '100%' }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {medicineUnits}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'image']} label=\"Image\">\r\n                            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\r\n                                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'triggerValue']} label=\"Reorder value\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salePrice']} label=\"Sale price per unit\" rules={[{ required: true }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save and Add another\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default AddNewMedicine;\r\n","export const medicineDistributionUnits = [\"ampoule\",\r\n    \"bag\",\r\n    \"bottle\",\r\n    \"box\",\r\n    \"bundle\",\r\n    \"capsule\",\r\n    \"case\",\r\n    \"container\",\r\n    \"cream\",\r\n    \"each\",\r\n    \"gel\",\r\n    \"nebule\",\r\n    \"ointment\",\r\n    \"pack\",\r\n    \"pair\",\r\n    \"pallet\",\r\n    \"patch\",\r\n    \"pcs\",\r\n    \"pill\",\r\n    \"plastic\",\r\n    \"polyamp\",\r\n    \"roll\",\r\n    \"spray\",\r\n    \"suppository\",\r\n    \"suspension\",\r\n    \"set\",\r\n    \"syrup\",\r\n    \"tablet\",\r\n    \"tray\",\r\n    \"tube\",\r\n    \"vial\", \r\n    \"strips\"];","import { Space, Table, Input, Select, Typography, notification, Tag } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport { getPharmacyMedicineList, getPharmacyMedicineListByName, deleteMedicine, getCategoriesList } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nconst { Text } = Typography;\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\nconst ManageMedicines = ({ location, history }) => {\r\n    let data = [];\r\n    const [medicineData, setMedicineData] = useState([]);\r\n    const [itemCategories, setItemCategories] = useState([]);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [filterValue, setfilterValue] = useState(\"medicineName\");\r\n\r\n    useEffect(() => {\r\n        getAllMedicines();\r\n        intialiseCategories();\r\n    }, []);\r\n\r\n    function intialiseCategories() {\r\n        getCategoriesList().then(data => {\r\n            if (data) {\r\n                setItemCategories(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    if (medicineData.length > 0) {\r\n        const tempData = [];\r\n        medicineData.forEach((medicine, index) => {\r\n            tempData.push({\r\n                key: index,\r\n                name: medicine.medicineName,\r\n                medicineId: medicine.medicineId,\r\n                category: medicine.category,\r\n                supplierPrice: medicine.supplierPrice,\r\n                triggerValue: medicine.triggerValue,\r\n                salePrice: medicine.salePrice,\r\n                genericName: medicine.genericName,\r\n                expDate: medicine.expDate,\r\n                availability: medicine.availability,\r\n                stockQuantity: medicine.stockQuantity\r\n            });\r\n        });\r\n        data = [...tempData];\r\n    }\r\n\r\n    function onMedicineSearch(value) {\r\n        getPharmacyMedicineListByName(value).then(data => {\r\n            if (data) {\r\n                setMedicineData([...data]);\r\n            }\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: `Error while searching`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function deleteMedicineRecord(medicineId) {\r\n        deleteMedicine(medicineId).then(data => {\r\n            getAllMedicines();\r\n            notification[\"success\"]({\r\n                message: 'Success',\r\n                description: 'Medicine deleted successfully',\r\n                duration: 3\r\n            });\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n\r\n    function getAllMedicines() {\r\n        getPharmacyMedicineList().then(data => {\r\n            setMedicineData([...data]);\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text, record) => (\r\n                <Text type={record.stockQuantity - record.triggerValue > 0 ? 'success' : 'danger'}>{text}</Text>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Category',\r\n            dataIndex: 'category',\r\n            key: 'category',\r\n            filters: itemCategories.map(data => { return { text: data.categoryName, value: data.categoryName } }),\r\n            onFilter: (value, record) => record.category == value,\r\n            sorter: (a, b) => a.category - b.category,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Purchase Price',\r\n            dataIndex: 'supplierPrice',\r\n            key: 'supplierPrice',\r\n        },\r\n        {\r\n            title: 'Selling Price',\r\n            dataIndex: 'salePrice',\r\n            key: 'salePrice',\r\n        },\r\n        {\r\n            title: 'Common Name',\r\n            dataIndex: 'genericName',\r\n            key: 'genericName',\r\n        },\r\n        {\r\n            title: 'Expiry date',\r\n            dataIndex: 'expDate',\r\n            key: 'expDate',\r\n        },\r\n        {\r\n            title: 'Stock',\r\n            dataIndex: 'availability',\r\n            key: 'availability',\r\n            render: text => (text == 'In stock' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n        },\r\n        {\r\n            title: 'Stock Quantity',\r\n            dataIndex: 'stockQuantity',\r\n            key: 'stockQuantity',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=prefetch' + '&medicineName=' + record.name });\r\n                    }}>Place Order</a>\r\n                    {/* <a>Stock</a> */}\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addNewMedicine', search: '?mode=edit' + '&medicineId=' + record.medicineId });\r\n                    }}>Edit</a>\r\n                    <a onClick={() => {\r\n                        deleteMedicineRecord(record.medicineId);\r\n                    }}>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"medicineName\">Medicine Name</Option>\r\n                    <Option value=\"genericName\">Generic Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onMedicineSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageMedicines;","import { useState } from 'react';\r\nimport { getPurchaseOrderList } from '../queries';\r\n\r\nconst UseGetAllPurchaseOrder = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPurchaseOrderList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default UseGetAllPurchaseOrder;","import { useState } from 'react';\r\nimport { deletePurchaseOrder } from '../queries';\r\n\r\nconst useDeletePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    const response = await deletePurchaseOrder(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n    } else {\r\n      setStatus(false);\r\n    }\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useDeletePurchaseOrder;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space, notification, Input, Select } from 'antd';\r\nimport UseGetAllPurchaseOrder from '../../../state/pharmacy/hooks/UseGetAllPurchaseOrders';\r\nimport useDeletePurchaseOrder from '../../../state/pharmacy/hooks/useDeletePurchaseOrder';\r\nimport { getRenderPropValue } from 'antd/lib/_util/getRenderPropValue';\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n// ];\r\n\r\nfunction resolveTag(tag) {\r\n    if (tag == \"cancelled\") {\r\n        return \"red\";\r\n    } else if (tag == \"orderPlaced\") {\r\n        return \"orange\";\r\n    } else {\r\n        return \"green\";\r\n    }\r\n\r\n}\r\nconst PurchaseOrder = ({ location, history }) => {\r\n\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Invoice No.',\r\n            dataIndex: 'invoiceNumber',\r\n            key: 'invoiceNumber',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Order Date',\r\n            dataIndex: 'orderDate',\r\n            key: 'orderDate',\r\n            render: text => <a>{text}</a>,\r\n            sorter: (a, b) => a.orderDate - b.orderDate,\r\n        },\r\n        {\r\n            title: 'Delivery Date',\r\n            dataIndex: 'deliveryDate',\r\n            key: 'deliveryDate',\r\n            sorter: (a, b) => a.deliveryDate - b.deliveryDate,\r\n        },\r\n        {\r\n            title: 'Supplier',\r\n            dataIndex: 'supplier',\r\n            key: 'supplier',\r\n            filters: [\r\n                {\r\n                    text: 'ACME',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'GSK',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Medimex',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.supplier == value,\r\n        },\r\n        {\r\n            title: 'Store',\r\n            dataIndex: 'store',\r\n            key: 'store',\r\n        },\r\n        {\r\n            title: 'Total Amount',\r\n            dataIndex: 'totalAmount',\r\n            key: 'totalAmount',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color={resolveTag(tag)} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Cancelled',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Order Placed',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=edit' + '&purchaseOrderId=' + record.purchaseOrderId });\r\n                    }}>View</a>\r\n                    <a onClick={() => deletePurchaseOrder(record)}>Cancel</a>\r\n                    {/* <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>edit</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [filterValue, setfilterValue] = useState(\"invoiceNumber\");\r\n    const [purchaseOrders, isLoading, setGetAllPurchaseOrder] = UseGetAllPurchaseOrder();\r\n    const [status, setDeletePurchaseOrder] = useDeletePurchaseOrder();\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n        setGetAllPurchaseOrder();\r\n    }, []);\r\n\r\n    function deletePurchaseOrder(record) {\r\n        const body = {\r\n            purchaseOrderId: record.purchaseOrderId,\r\n            supplierName: null,\r\n            orderDate: null,\r\n            storeName: null,\r\n            // totalAmount: null,\r\n            deliveryDate: null,\r\n            rol: null,\r\n            productDetails: null,\r\n        };\r\n        setDeletePurchaseOrder(body);\r\n    }\r\n    if (purchaseOrders.length > 0) {\r\n        data = purchaseOrders.map((order, index) => {\r\n            return {\r\n                key: index,\r\n                invoiceNumber: order.invoiceNumber,\r\n                purchaseOrderId: order.purchaseOrderId,\r\n                orderDate: (new Date(order.orderDate)).toDateString(),\r\n                deliveryDate: (new Date(order.deliveryDate)).toDateString(),\r\n                supplier: order.supplierName,\r\n                store: order.storeName,\r\n                totalAmount: order.totalAmount,\r\n                status: (order.status != null ? [order.status] : ['Order Placed'])\r\n            };\r\n        });\r\n    }\r\n    function onOrderSearch(searchValue) {\r\n\r\n        if (searchValue == '') {\r\n            // setRequest();\r\n            // // setShowPatient(\"all\");\r\n        } else if (filterValue == \"invoiceNumber\") {\r\n            // setPatientSearchbyId(searchValue);\r\n            // setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"supplierName\") {\r\n            // setPatientSearchbyName(searchValue);\r\n            // setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"invoiceNumber\">Invoice Number</Option>\r\n                    <Option value=\"supplierName\">Supplier</Option>\r\n                    {/* <Option value=\"SupplierName\">Supplier Name</Option> */}\r\n                </Select>\r\n                <Input.Search onSearch={onOrderSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getSuppliersList } from '../queries';\r\n\r\nconst useGetAllSuppliers = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getSuppliersList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetAllSuppliers;","import { useState } from 'react';\r\nimport { savePurchaseOrder } from '../queries';\r\n\r\nconst useSavePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const request = async (body) => {\r\n    const response = await savePurchaseOrder(body);\r\n\r\n    setStatus(response);\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useSavePurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getPurchaseOrderDetails } from '../queries';\r\n\r\nconst useGetPurchaseOrderDetails = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPurchaseOrderDetails(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPurchaseOrderDetails;","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useSavePurchaseOrder from '../../../state/pharmacy/hooks/useSavePurchaseOrder';\r\nimport useGetPurchaseOrderDetails from '../../../state/pharmacy/hooks/useGetPurchaseOrderDetails';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 8 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPurchaseOrder = ({ location, history }) => {\r\n    const medicineMap = new Map();\r\n    let options = [];\r\n    const supplierOptions = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    let index = 0;\r\n    const [purchaseDetailsForm] = Form.useForm();\r\n    const [productListForm] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n    const [suppliers, isLoadings, setSupplierSearch] = useGetAllSuppliers();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [status, setSavePurchaseOrder] = useSavePurchaseOrder();\r\n    const [orderDetail, setGetPurchaseOrderDetails] = useGetPurchaseOrderDetails();\r\n    // const [purchaseOrderList, isLoading1, setPurchaseOrderListFetch] = UseGetAllPurchaseOrder();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setSupplierSearch();\r\n        if (status && submitted) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n            setSubmitted(false);\r\n        }\r\n        if (queryParams.mode == \"edit\" && queryParams.purchaseOrderId != null && submitted == false && status == false) {\r\n            setGetPurchaseOrderDetails(queryParams.purchaseOrderId);\r\n        }\r\n    }, [status, submitted]);\r\n\r\n\r\n    if (orderDetail != null) {\r\n        console.log(orderDetail);\r\n        purchaseDetailsForm.setFieldsValue({\r\n            user: {\r\n                supplierName: orderDetail.supplierName,\r\n                orderDate: moment(new Date(orderDetail.orderDate), 'YYYY-MM-DD'),\r\n                storeName: orderDetail.storeName,\r\n                status: orderDetail.status,\r\n                invoiceNumber: orderDetail.invoiceNumber,\r\n                deliveryDate: moment(new Date(orderDetail.deliveryDate), 'YYYY-MM-DD'),\r\n                rol: orderDetail.rol\r\n            }\r\n        });\r\n        productListForm.setFieldsValue({\r\n            user: {\r\n                totalAmount: orderDetail.totalAmount,\r\n                totalGST: orderDetail.totalGST,\r\n                totalDiscount: orderDetail.totalDiscount,\r\n            }\r\n        });\r\n        if (orderDetail.productDetails != null) {\r\n            const productList = [];\r\n            orderDetail.productDetails.forEach(product => {\r\n                productList.push({\r\n                    productId: product.productId,\r\n                    productName: product.productName,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    batchNumber: product.batchNumber,\r\n                    expiryDate: moment(new Date(product.expiryDate), 'YYYY-MM-DD'),\r\n                    discount: product.discount,\r\n                    tax: product.tax,\r\n                });\r\n            });\r\n            productListForm.setFieldsValue({\r\n                users: [...productList]\r\n            });\r\n        }\r\n\r\n    }\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach(supplier => {\r\n            supplierOptions.push({ value: supplier.supplierName, label: supplier.supplierName });\r\n        });\r\n    }\r\n    if (medicines.length > 0) {\r\n        medicines.forEach(medicine => {\r\n            options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            medicineMap.set(medicine.medicineName, medicine);\r\n        });\r\n    }\r\n    if (queryParams.mode == \"prefetch\") {\r\n\r\n        productListForm.setFieldsValue({\r\n            users: [{\r\n                productId: null,\r\n                productName: queryParams.medicineName,\r\n                quantity: 1,\r\n                unit: \"\",\r\n                purchaseCost: \"\",\r\n                batchNumber: \"\",\r\n                expDate: \"\",\r\n                discount: \"\",\r\n                tax: \"\"\r\n            }]\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const purchaseDetails = purchaseDetailsForm.getFieldsValue().user;\r\n        const productList = productListForm.getFieldsValue().users;\r\n        const finalCharges = productListForm.getFieldsValue().user;\r\n        const body = {\r\n            purchaseOrderId: queryParams.purchaseOrderId,\r\n            supplierName: purchaseDetails.supplierName,\r\n            orderDate: purchaseDetails.orderDate,\r\n            storeName: purchaseDetails.storeName,\r\n            invoiceNumber: purchaseDetails.invoiceNumber,\r\n            totalAmount: finalCharges.totalAmount,\r\n            totalGST: finalCharges.totalGST,\r\n            totalDiscount: finalCharges.totalDiscount,\r\n            deliveryDate: purchaseDetails.deliveryDate,\r\n            rol: purchaseDetails.rol,\r\n            status: purchaseDetails.status,\r\n            productDetails: [],\r\n        };\r\n        if (productList != null && productList.length > 0) {\r\n            productList.forEach(product => {\r\n                const medicine = medicineMap.get(product.productName);\r\n                body.productDetails.push({\r\n                    productId: product.productId,\r\n                    purchaseOrderId: queryParams.purchaseOrderId,\r\n                    medicineId: medicine.medicineId,\r\n                    productName: product.productName,\r\n                    batchNumber: product.batchNumber,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    discount: product.discount,\r\n                    tax: product.tax\r\n                });\r\n            });\r\n        }\r\n        setSubmitted(true);\r\n        setSavePurchaseOrder(body);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n        // setMedicineSearch();\r\n    }\r\n\r\n    const onSearchSupplier = (value) => {\r\n        // setSupplierSearch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/purchaseOrderList' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button>\r\n            <br /><br /><br />\r\n            <Form form={purchaseDetailsForm}  {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'rol']} label=\"ROL\">\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear>\r\n                                <Option value=\"orderPlaced\">Order Placed</Option>\r\n                                <Option value=\"delivered\">Delivered</Option>\r\n                                <Option value=\"cancelled\">Cancelled</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'supplierName']} label=\"Suppliers Name\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                onSearch={onSearchSupplier}\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                                options={supplierOptions}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Supplier name\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'deliveryDate']} label=\"Delivery Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'invoiceNumber']} label=\"Invoice Number\">\r\n                            <Input style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'orderDate']} label=\"Order Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'storeName']} label=\"Store Name\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select Store\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'salesStartDate']} label=\"Sales Start Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salesEndDate']} label=\"Sales End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form form={productListForm} name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'batchNumber']}\r\n                                            fieldKey={[field.fieldKey, 'batchNumber']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 150 }} placeholder=\"Batch No.\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'unit']}\r\n                                            fieldKey={[field.fieldKey, 'unit']}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Unit\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">bottle</Option>\r\n                                                <Option value=\"1-1-0\">box</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'purchaseCost']}\r\n                                            fieldKey={[field.fieldKey, 'purchaseCost']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 150 }} placeholder=\"Purchase Cost\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'expiryDate']}\r\n                                            fieldKey={[field.fieldKey, 'expiryDate']}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'discount']}\r\n                                            fieldKey={[field.fieldKey, 'discount']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"discount\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'tax']}\r\n                                            fieldKey={[field.fieldKey, 'tax']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"tax\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalGST']} label=\"Total GST\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalDiscount']} label=\"Total Discount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPurchaseOrder;\r\n","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst IndentPreparation = () => {\r\n    let options = [];\r\n    let index = 0;\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientId']} label=\"Patient Search\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Reg. No\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'indentDate']} label=\"Indent Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientName']} label=\"Patient Name\">\r\n                            <Input placeholder=\"Patient Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'consultantName']} label=\"Consultant Name\">\r\n                            <Input placeholder=\"Consultant Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'mobileNumber']} label=\"Mobile\">\r\n                            <Input placeholder=\"Mobile Number\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'comments']} label=\"Comments\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'address']} label=\"Address\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'uom']}\r\n                                            fieldKey={[field.fieldKey, 'uom']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 125 }} placeholder=\"UOM\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'mrp']}\r\n                                            fieldKey={[field.fieldKey, 'mrp']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"MRP\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'stockQuantity']}\r\n                                            fieldKey={[field.fieldKey, 'stockQuantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Stock Quantity\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item htmlType=\"submit\">\r\n                            <Button type=\"primary\">\r\n                                Bill\r\n                            </Button>\r\n                            <Button type=\"primary\" style={{ marginLeft: '15px' }} >\r\n                                Add New\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default IndentPreparation;","import { useState } from 'react';\r\nimport { saveSupplier } from '../queries';\r\n\r\nconst useAddSupplier = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n    const response = await saveSupplier(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddSupplier;\r\n","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table, Space } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useAddSupplier from '../../../state/pharmacy/hooks/useAddSupplier';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\n\r\nconst ManageSupplier = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddSupplier();\r\n    const [suppliers, isLoadings, setMedicineSearch] = useGetAllSuppliers();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Supplier added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (suppliers.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = formData => {\r\n        const body = {\r\n            \"supplierName\": formData.name,\r\n            \"email\": formData.email,\r\n            \"phoneNumber\": formData.phone,\r\n            \"address\": formData.address,\r\n        };\r\n        setRequest(body);\r\n        form.setFieldsValue({\r\n            \"name\": \"\",\r\n            \"email\": \"\",\r\n            \"phone\": \"\",\r\n            \"address\": \"\",\r\n        });\r\n        \r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'supplierName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email'\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber'\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={()=> editSupplier(record)}>Edit</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    function editSupplier(record) {\r\n        form.setFieldsValue({\r\n            \"name\": record.supplierName,\r\n            \"email\": record.email,\r\n            \"phone\": record.phoneNumber,\r\n            \"address\": record.address,\r\n        });\r\n    }\r\n\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach((supplier, index) => {\r\n            data.push({\r\n                key: index,\r\n                supplierId: supplier.supplierId,\r\n                supplierName: supplier.supplierName,\r\n                email: supplier.email,\r\n                phoneNumber: supplier.phoneNumber,\r\n                address: supplier.address,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Supplier name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[{ required: false, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    rules={[{ required: false, message: 'Please input contact!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Contact\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"address\"\r\n                    rules={[{ required: false, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Address\" />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Supplier\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageSupplier;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space } from 'antd';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Patient Reg No',\r\n        dataIndex: 'regNo',\r\n        key: 'regNo',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Patient Name',\r\n        dataIndex: 'patientName',\r\n        key: 'patientName',\r\n    },\r\n    {\r\n        title: 'Indent Date and Time',\r\n        dataIndex: 'indentDate',\r\n        key: 'indentDate',\r\n    },\r\n    {\r\n        title: 'Submitted By',\r\n        dataIndex: 'submittedBy',\r\n        key: 'submittedBy',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n    },\r\n    {\r\n        key: '2',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n    {\r\n        key: '3',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n];\r\n\r\nconst IndentList = () => {\r\n    return (\r\n        <>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IndentList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\nconst Certificates = () => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'name']} label=\"Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'guardianName']} label=\"Guardian Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'relation']} label=\"Relation\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'dateAndTime']} label=\"Date and time\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <ReactQuill theme=\"snow\" value={value} onChange={setValue} />\r\n\r\n            <Row style={{ textAlign: 'right', marginTop: 30 }}>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Generate\r\n                            </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Certificates;\r\n","import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Form, Input, Switch, InputNumber, Row, Select, Space } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPackage = () => {\r\n    let options = [];\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"dashed\" icon={<PlusOutlined />}>All Packages</Button>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageName']} label=\"Package Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageEndDate']} label=\"Package End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packagePrice']} label=\"Package Price\" rules={[{ required: true, type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\" >\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"price\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPackage;\r\n","import React, { useEffect } from 'react';\r\n\r\nconst InProgress = () => {\r\n    return (\r\n        <>\r\n        <h1 style={{fontSize: '56px'}}>The Page is in Progress ...</h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InProgress;\r\n","import { useState } from 'react';\r\nimport { getPrescriptionByAppointmentId } from '../queries';\r\n\r\nconst useGetPrescriptionByAppointmentId = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (appointmentId) => {\r\n        const response = await getPrescriptionByAppointmentId(appointmentId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPrescriptionByAppointmentId;","import React, { useRef } from 'react';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\nimport './printPrescription.css';\r\nexport class PrintPrescription extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const appointmentId = this.props.appointmentId;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const patientVitals = this.props.patientVitals;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        let medicineTable = \"\";\r\n        let testTable = \"\";\r\n        if (this.props.medicineList != null && this.props.medicineList.length > 0) {\r\n            const medicineList = this.props.medicineList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.medicineName}</td>\r\n                        <td>{item.dosage}</td>\r\n                        <td>{item.days}</td>\r\n                        <td>{item.comment}</td>\r\n                    </tr>)\r\n            });\r\n            medicineTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed medicines</h3>\r\n                <table class=\"itemTable\" >\r\n                    <tr>\r\n                        <th>Medicine Name</th>\r\n                        <th>Dosage</th>\r\n                        <th>Days</th>\r\n                        <th>Comment</th>\r\n                    </tr>\r\n                    {medicineList}\r\n                </table>\r\n            </div>\r\n        }\r\n        if (this.props.testList != null && this.props.testList.length > 0) {\r\n            const testList = this.props.testList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.testName}</td>\r\n                        <td>{item.dateOfBooking}</td>\r\n                        <td>{item.dateOfResult}</td>\r\n                        <td>{item.reportDesc}</td>\r\n                        <td>{item.testDesc}</td>\r\n                    </tr>)\r\n            });\r\n            testTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed tests</h3>\r\n                <table class=\"itemTable\">\r\n                    <tr>\r\n                        <th>Test Name</th>\r\n                        <th>Test Date</th>\r\n                        <th>Report Date</th>\r\n                        <th>Doctor comment</th>\r\n                        <th>Report summary</th>\r\n                    </tr>\r\n                    {testList}\r\n                </table>\r\n            </div>\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Info</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>{patientDetails.patientName}</th>\r\n                            <td>Age</td>\r\n                            <td>{patientDetails.age}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>PatientId</td>\r\n                            <td>{patientId}</td>\r\n                            <td>AppointmentId</td>\r\n                            <td>{appointmentId}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Date</td>\r\n                            <td>{todaysDate}</td>\r\n                            <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Vitals</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Height : {patientVitals.height}</th>\r\n                            <td>Weight : {patientVitals.weight}</td>\r\n                            <td>Bp : {patientVitals.Bp}</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Temperature : {patientVitals.temperature}</td>\r\n                            <td>Disease description : {patientVitals.diseaseDesc}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            {/* <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td> */}\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    {medicineTable}\r\n                    {testTable}\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Appointment summary : {patientVitals.advise}</th>\r\n                        </tr>\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        {/* <div>Cashier Signature</div> */}\r\n                        <div style={{ float: 'right' }}>Doctor's Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Table, Descriptions, Button } from 'antd';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useGetPrescriptionByAppointmentId from '../../../state/prescription/hooks/useGetPrescriptionByAppointmentId';\r\nimport queryString from 'query-string';\r\nimport usePatientById from '../../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../../patientDetails';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport { PrintPrescription } from '../printPrescription';\r\nconst medicinecolumns = [\r\n    {\r\n        title: 'Medicine Name',\r\n        dataIndex: 'medicineName',\r\n    },\r\n    {\r\n        title: 'Dosage',\r\n        dataIndex: 'dosage',\r\n    },\r\n    {\r\n        title: 'Days',\r\n        dataIndex: 'days',\r\n    },\r\n    {\r\n        title: 'Comment',\r\n        dataIndex: 'comment',\r\n    },\r\n];\r\n\r\nconst testcolumns = [\r\n    {\r\n        title: 'Test Name',\r\n        dataIndex: 'testName',\r\n    },\r\n    {\r\n        title: 'Test Date',\r\n        dataIndex: 'dateOfBooking',\r\n    },\r\n    {\r\n        title: 'Report Date',\r\n        dataIndex: 'dateOfResult',\r\n    },\r\n    {\r\n        title: 'Doctor comment',\r\n        dataIndex: 'testDesc',\r\n\r\n    },\r\n    {\r\n        title: 'Report Summary',\r\n        dataIndex: 'reportDesc',\r\n\r\n    }\r\n];\r\n\r\n\r\nconst ViewPrescription = ({ location, history }) => {\r\n    const medicineData = [];\r\n    const testData = [];\r\n\r\n    let appointmentDetails = {\r\n        appointmentId: '',\r\n        diseaseDesc: '',\r\n        advise: '',\r\n        patientId: '',\r\n        patientName: '',\r\n        doctorId: '',\r\n        height: '',\r\n        weight: '',\r\n        Bp: '',\r\n        createdAt: '',\r\n        appointmentDate: '',\r\n        timeSlot: '',\r\n        status: '',\r\n        temperature: ''\r\n    };\r\n\r\n    const queryParams = queryString.parse(location.search);\r\n    const [prescriptionDetails, setPrescriptionDetails] = useGetPrescriptionByAppointmentId();\r\n    const [patientDetails, isLoading, setPatientSearchById] = usePatientById(queryParams.patientId);\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        setPrescriptionDetails(queryParams.appointmentId);\r\n        setPatientSearchById(queryParams.patientId);\r\n    }, []);\r\n\r\n    if (prescriptionDetails != null) {\r\n        console.log(prescriptionDetails);\r\n        if (prescriptionDetails.appointmentDto != null) {\r\n            const appointmentDto = prescriptionDetails.appointmentDto;\r\n            console.log('le bhgat', appointmentDto);\r\n            appointmentDetails = {\r\n                appointmentId: appointmentDto.appointmentId,\r\n                diseaseDesc: appointmentDto.diseaseDesc,\r\n                advise: appointmentDto.advise,\r\n                patientId: appointmentDto.patientId,\r\n                patientName: appointmentDto.patientName,\r\n                doctorId: appointmentDto.doctorId,\r\n                height: appointmentDto.height,\r\n                weight: appointmentDto.weight,\r\n                Bp: appointmentDto.Bp,\r\n                createdAt: appointmentDto.createdAt,\r\n                appointmentDate: appointmentDto.appointmentDate,\r\n                timeSlot: appointmentDto.timeSlot,\r\n                status: appointmentDto.status,\r\n            }\r\n        }\r\n\r\n        if (prescriptionDetails.prescribedMedsDtoList != null) {\r\n            prescriptionDetails.prescribedMedsDtoList.forEach((medicine, index) => {\r\n                medicineData.push({\r\n                    key: medicine.medName + index,\r\n                    medicineName: medicine.medName,\r\n                    dosage: medicine.dosage,\r\n                    days: medicine.days,\r\n                    comment: medicine.comment\r\n\r\n                });\r\n            });\r\n        }\r\n        if (prescriptionDetails.prescribedTestingDtoList != null) {\r\n            prescriptionDetails.prescribedTestingDtoList.forEach((test, index) => {\r\n                testData.push({\r\n                    key: test + index,\r\n                    testName: test.testDesc,\r\n                    dateOfBooking: test.dateOfBooking,\r\n                    dateOfResult: test.dateOfResult,\r\n                    reportDesc: test.reportDesc,\r\n                    testDesc: test.comment,\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" style={{ float: \"right\" }} shape=\"round\" icon={<PrinterOutlined />} size=\"default\" onClick={handlePrint}>\r\n                Print\r\n        </Button>\r\n            <div style={{ display: 'none' }}>\r\n                <PrintPrescription ref={componentRef} patientVitals={appointmentDetails} appointmentId={appointmentDetails.appointmentId} patientId={queryParams.patientId} medicineList={medicineData} testList={testData} patientDetails={patientDetails} />\r\n            </div>\r\n            <h4>Patient Info</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Name\">{patientDetails.patientName} </Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"AppointmentId\">{appointmentDetails.appointmentId}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{patientDetails.visitType}</Descriptions.Item>\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Patient Vitals</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Height\">{appointmentDetails.height}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Weight\">{appointmentDetails.weight}</Descriptions.Item>\r\n                <Descriptions.Item label=\"BP\">{appointmentDetails.Bp}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Temperature\">{appointmentDetails.temperature}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Disease description\">{appointmentDetails.diseaseDesc}</Descriptions.Item>\r\n\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Prescribed Medicines</h4>\r\n            <Table columns={medicinecolumns} dataSource={medicineData} size=\"middle\" />\r\n            <hr />\r\n            <h4>Prescribed Tests</h4>\r\n            <Table columns={testcolumns} dataSource={testData} size=\"middle\" />\r\n            <hr />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Appointment Summary\">{appointmentDetails.advise}</Descriptions.Item>\r\n            </Descriptions>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default ViewPrescription;","export const registration = { label: \"Registration\", link: \"/registration\" }\r\nexport const patientSearch = { label: \"Search Patients\", link: \"/patientSearch\" }\r\nexport const doctorAppointment = { label: \"Doctor Appointment\", link: \"/doctorAppointment\" }\r\nexport const addDoctor = { label: \"Add Doctors\", link: \"/addDoctor\" }\r\nexport const addMedicine = { label: \"Add Medicines\", link: \"/addMedicine\" }\r\nexport const addTest = { label: \"Add Test\", link: \"/addTest\" }\r\nexport const serviceCatalogue = { label: \"Service Catalogue\", link: \"/inProgress\" }\r\nexport const addNewMedicine = { label: \"Add New Medicine\", link: \"/addNewMedicine\" }\r\nexport const manageMedicines = { label: \"Manage Medicines\", link: \"/manageMedicines\" }\r\nexport const purchaseOrderList = { label: \"Purchase Order List\", link: \"/purchaseOrderList\" }\r\nexport const newPurchaseOrder = { label: \"New Purchase Order\", link: \"/newPurchaseOrder\" }\r\nexport const manageSuppliers = { label: \"Manage Suppliers\", link: \"/manageSuppliers\" }\r\nexport const billing = { label: \"Billing\", link: \"/billing\" };\r\nexport const billSearch = { label: \"Bill Search\", link: \"/billSearch\" };\r\nexport const appointment = { label: \"Appointment\", link: \"/appointment\" };\r\nexport const certificates = { label: \"Certificates\", link: \"/certificates\" };\r\nexport const packageManagement = { label: \"Package Management\", link: \"/package\" };\r\nexport const canteen = { label: \"Canteen\", link: \"/canteen\" };\r\nexport const pharmacy = { label: \"Pharmacy\", link: \"/pharmacy\" };\r\nexport const reimbursements = { label: \"Reimbursements\", link: \"/inProgress\" };\r\nexport const insurance = { label: \"Insurance\", link: \"/inProgress\" };\r\nexport const certificateCreation = { label: \"Certificate creation\", link: \"/inProgress\" };\r\nexport const referrals = { label: \"Referrals\", link: \"/inProgress\" };\r\n\r\nexport const doctorRoutes = [doctorAppointment];\r\nexport const pharmacyRoutes = [addNewMedicine, manageMedicines, purchaseOrderList, newPurchaseOrder, manageSuppliers, billing, billSearch];\r\nexport const receptionRoutes = [registration, patientSearch, appointment, billing, billSearch];\r\nexport const upcomingRoutes = [certificates, packageManagement, canteen, pharmacy, reimbursements, insurance, certificateCreation, referrals];\r\nexport const adminRoutes = [addMedicine, addTest, addDoctor, serviceCatalogue]; \r\n","import { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from \"../utils/roles\";\r\nimport { adminRoutes, doctorRoutes, pharmacyRoutes, receptionRoutes, upcomingRoutes } from \"./allRoutesData\";\r\n\r\nconst map = new Map();\r\n\r\nmap.set(ADMIN, adminRoutes);\r\nmap.set(DOCTOR, doctorRoutes);\r\nmap.set(PHARMACY, pharmacyRoutes);\r\nmap.set(RECEPTION, receptionRoutes);\r\nmap.set(UPCOMING, upcomingRoutes);\r\n\r\nexport var getRoutes = function (roleList) {\r\n    const routes = {};\r\n    roleList.forEach(role => {\r\n        routes[role] = map.get(role);\r\n    });\r\n    return routes;\r\n}","import React, { useRef } from 'react';\r\nimport '../components/mainBillView.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class MainBillView extends React.Component {\r\n    render() {\r\n        const billItemList = this.props.billItemList;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = billItemList.map(item => {\r\n            let itemList = [];\r\n            if (item['billDetailList']) {\r\n                itemList = item['billDetailList'].map(billItem => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{(billItem.purchaseType == \"pharmacy-return\" ? billItem.itemName + '(' + billItem.purchaseType + ')' : billItem.itemName)}</td>\r\n                            <td>{billItem.quantity}</td>\r\n                            <td>{billItem.mrp}</td>\r\n                            <td>{billItem.gstPercentage}</td>\r\n                            <td>{billItem.concessionPercentage}</td>\r\n                            <td>{billItem.cost}</td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            }\r\n            return (\r\n                <div style={{ width: '100%' }}>\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Bill Id:</span> {item.billId} &nbsp;&nbsp;\r\n                    <span>Bill Date:</span> {new Date(item.createdAt).toDateString()} &nbsp;&nbsp;\r\n                    <span>Payment Mode:</span> {item.paymentMode}\r\n                    </div>\r\n                    <br />\r\n                    <table class=\"itemTable\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(%)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemList}\r\n                        </tbody>\r\n                    </table>\r\n                    <br />\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Total Amount :</span> {item.totalCost} &nbsp;&nbsp;\r\n                        <span>Total Discount :</span>  {item.totalDiscount} &nbsp;&nbsp;\r\n                        <span>Total GST :</span>  {item.totalGST}\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    {itemArray}\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import { Space, Table, Button, Row, Col, Tag, notification } from 'antd';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport moment from 'moment';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport BillSearchComp from '../billing/components/billSearch';\r\nimport { getBillDetails } from '../billing/services';\r\nimport { MainBillView } from './components/mainBillView';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { getBillListByDateRange } from '../../state/billing/queries';\r\nimport { SERVER_ERROR } from '../../utils/constantMessages';\r\n\r\nconst BillSearch = ({ history }) => {\r\n    const columns = [\r\n        {\r\n            title: 'Bill Id',\r\n            dataIndex: 'billId',\r\n            key: 'billId',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Patient Id',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId'\r\n        },\r\n        {\r\n            title: 'Bill Date',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n        },\r\n        {\r\n            title: 'Bill Total',\r\n            dataIndex: 'totalCost',\r\n            key: 'totalCost',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'paymentStatus',\r\n            key: 'paymentStatus',\r\n            filters: [\r\n                {\r\n                    text: 'dues',\r\n                    value: 'dues',\r\n                },\r\n                {\r\n                    text: 'paid',\r\n                    value: 'paid',\r\n                }\r\n            ],\r\n            onFilter: (value, record) => record.paymentStatus == value,\r\n            render: text => (text == 'paid' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/billing', search: '?context=edit' + '&billId=' + record.billId });\r\n                    }}>View/Edit</a>\r\n                    {/* <a onClick={() => {\r\n                        printSingleBill(record);\r\n                    }}>Print</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [data, setData] = useState([]);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [searchCriteria, setSearchFilter] = useState({});\r\n    const [] = useState({});\r\n    let mainBillViewButton = \"\";\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        // \r\n    }, []);\r\n\r\n    if (searchCriteria.searchFilter == \"patientId\") {\r\n        console.log(searchCriteria);\r\n        mainBillViewButton = <Button type=\"primary\" onClick={viewMainBill}>View Main Bill</Button>;\r\n    }\r\n\r\n    function viewMainBill() {\r\n        handlePrint();\r\n    }\r\n    function changePatientdetails(patientId) {\r\n        getPatientById(patientId).then(patientDetails => {\r\n            setPatientDetails(patientDetails);\r\n        }).catch(() => {\r\n\r\n        });\r\n    }\r\n\r\n    function onBillSearch(searchValue, searchFilter) {\r\n        if (searchFilter != \"dateRange\") {\r\n            getBillDetails(searchValue, searchFilter).then(response => {\r\n                if (response) {\r\n                    setSearchFilter({\r\n                        searchFilter: searchFilter,\r\n                        searchValue: searchValue\r\n                    });\r\n                    if (searchFilter == \"patientId\") {\r\n                        changePatientdetails(searchValue);\r\n                    }\r\n                    if (response) {\r\n                        const temp = response.map((data, index) => {\r\n                            return {\r\n                                ...data, createdAt: new Date(data.createdAt).toDateString(), key: index\r\n                            }\r\n                        });\r\n                        setData([...temp]);\r\n                    }\r\n\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter} ${searchValue}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: `Error while searching ${searchFilter} ${searchValue}`,\r\n                    duration: 3\r\n                });\r\n            });\r\n        } else {\r\n            getBillListByDateRange(searchValue[1], searchValue[0], 'PHARMACY').then(data => {\r\n                console.log(data);\r\n                if (data) {\r\n                    const temp = data.map((item, index) => {\r\n                        return {\r\n                            ...item, createdAt: new Date(item.createdAt).toDateString(), key: index\r\n                        }\r\n                    });\r\n                    setData([...temp]);\r\n                } else {\r\n                    notification[\"error\"]({\r\n                        message: 'Error',\r\n                        description: `No records found for ${searchFilter}`,\r\n                        duration: 3\r\n                    });\r\n                }\r\n            }).catch(() => {\r\n                notification[\"error\"]({\r\n                    message: 'Error',\r\n                    description: SERVER_ERROR,\r\n                    duration: 3\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{ display: 'none' }}>\r\n                <MainBillView ref={componentRef} billItemList={data} patientDetails={patientDetails} patientId={searchCriteria.searchValue} />\r\n                {/* <BillPrint ref={componentRef} itemList={billPrintData} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} /> */}\r\n            </div>\r\n            <Row gutter={24}>\r\n                <Col span={10}>\r\n                    <BillSearchComp onSearch={onBillSearch} />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button type=\"primary\" onClick={() => { history.push({ pathname: '/home/billing' }) }}>Create New bill</Button>\r\n                </Col>\r\n                <Col span={4}>\r\n                    {mainBillViewButton}\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BillSearch;","import { Space, Table, Input, Select, Typography, notification, Tag } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getAllDoctors } from '../../../state/patientSearch/queries';\r\nimport { getPharmacyMedicineListByName } from '../../../state/pharmacy/queries';\r\nimport { SERVER_ERROR } from '../../../utils/constantMessages';\r\nimport { departments } from '../../../utils/departmentList';\r\nconst { Option } = Select;\r\n\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         name: 'Paraceta',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217',\r\n//         stock: 100\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n// ];\r\n\r\nconst ViewDoctors = ({ location, history }) => {\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'doctorName',\r\n            key: 'doctorName',\r\n        },\r\n        {\r\n            title: 'Department',\r\n            dataIndex: 'department',\r\n            key: 'department',\r\n            filters: departments.map(data => {\r\n                return {\r\n                    'text': data,\r\n                    'value': data,\r\n                }\r\n            }),\r\n            onFilter: (value, record) => record.department == value,\r\n        },\r\n        {\r\n            title: 'Fees',\r\n            dataIndex: 'consulationCharge',\r\n            key: 'consulationCharge',\r\n        },\r\n        {\r\n            title: 'Speciality',\r\n            dataIndex: 'speciality',\r\n            key: 'speciality',\r\n        },\r\n        // {\r\n        //     title: 'Available',\r\n        //     dataIndex: 'availability',\r\n        //     key: 'availability',\r\n        //     render: text => (text == 'AVAILABLE' ? <Tag color='green' key={text}>{text.toUpperCase()}</Tag> : <Tag color='red' key={text}>{text.toUpperCase()}</Tag>)\r\n        // },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addDoctor', search: '?mode=edit' + '&doctorId=' + record.doctorId });\r\n                    }}>Edit</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [doctorList, setDoctorList] = useState([]);\r\n    const [filterValue, setfilterValue] = useState(\"doctorName\");\r\n    useEffect(() => {\r\n        getDoctorList();\r\n    }, []);\r\n\r\n    data = doctorList;\r\n    function onDoctorSearch(value) {\r\n        // getPharmacyMedicineListByName(value).then(data => {\r\n        //     if (data) {\r\n        //         setMedicineData([...data]);\r\n        //     }\r\n        // }).catch(() => {\r\n        //     notification[\"error\"]({\r\n        //         message: 'Error',\r\n        //         description: `Error while searching`,\r\n        //         duration: 3\r\n        //     });\r\n        // });\r\n    }\r\n\r\n    // function deleteMedicineRecord(medicineId) {\r\n    //     deleteMedicine(medicineId).then(data => {\r\n    //         getAllMedicines();\r\n    //         notification[\"success\"]({\r\n    //             message: 'Success',\r\n    //             description: 'Medicine deleted successfully',\r\n    //             duration: 3\r\n    //         });\r\n    //     }).catch(err => {\r\n    //         notification[\"error\"]({\r\n    //             message: 'Error',\r\n    //             description: SERVER_ERROR,\r\n    //             duration: 3\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    function getDoctorList() {\r\n        getAllDoctors().then(data => { setDoctorList(data); }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: SERVER_ERROR,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"doctorName\">Doctor Name</Option>\r\n                    <Option value=\"departmentName\">Department Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onDoctorSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewDoctors;","import { MedicineBoxOutlined, MenuFoldOutlined, MenuUnfoldOutlined, UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons';\r\nimport { Layout, Menu } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport AddDoctor from '../admin/addDoctor';\r\nimport Appointment from '../appointment';\r\nimport Billing from '../billing';\r\nimport Canteen from '../canteen';\r\nimport CanteenStock from '../canteen/canteenStock';\r\nimport DoctorAppointment from '../doctorAppointment';\r\nimport '../home/home.css';\r\nimport AddMedicine from '../medicine/addMedicine';\r\nimport AddTest from '../medicine/addTest';\r\nimport PackageManagement from '../package';\r\nimport PatientSearch from '../patientSearch';\r\nimport Pharmacy from '../pharmacy';\r\nimport Prescription from '../prescription';\r\nimport Registration from '../registration';\r\nimport HomeScreen from './homescreen';\r\nimport AddNewMedicine from '../pharmacy/addNewMedicine';\r\nimport ManageMedicines from '../pharmacy/manageMedicine';\r\nimport PurchaseOrder from '../pharmacy/purchaseOrderList';\r\nimport NewPurchaseOrder from '../pharmacy/newPurchaseOrder';\r\nimport IndentPreparation from '../pharmacy/indentPreparations';\r\nimport ManageSupplier from '../pharmacy/manageSupplier';\r\nimport IndentList from '../pharmacy/indentPreparations/indentList';\r\nimport Certificates from '../certificates';\r\nimport Package from '../package';\r\nimport NewPackage from '../package/newPackage';\r\nimport InProgress from '../inProgress';\r\nimport ViewPrescription from '../prescription/viewPrescription';\r\nimport { useStateValue } from '../../state';\r\nimport { getRoutes } from '../../routes/routeResolver';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\nimport BillSearch from '../billSearch';\r\nimport ViewDoctors from '../admin/viewDoctors';\r\n\r\nconst { Header, Sider, Content, Footer } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Home = ({ location, history, match }) => {\r\n  const path = match.path;\r\n  let realRoutes = [];\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [itemSelected, setItemSelected] = useState(\"\");\r\n  const [routes, setRoutes] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    // setRoutes(getRoutes([RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING]));\r\n    setRoutes(getRoutes([...auth.roles]));\r\n  }, []);\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n    setItemSelected(\"\");\r\n  };\r\n\r\n  const handleClick = e => {\r\n    setItemSelected(e.key);\r\n  };\r\n\r\n  for (const [roleName, routeList] of Object.entries(routes)) {\r\n    const childroutes = routeList.map(route => {\r\n      return generateRouteObject(route);\r\n    });\r\n    if (auth.roles.length == 1) {\r\n      realRoutes = childroutes;\r\n    } else {\r\n      realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n    }\r\n    // realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n  }\r\n  function generateRouteObject(routeObject) {\r\n    return <Menu.Item key={routeObject.label}><Link to={`${path}${routeObject.link}`}>{routeObject.label}</Link></Menu.Item>\r\n  }\r\n  function subRoutesByRole(routes, roleName) {\r\n    return <SubMenu key={roleName} icon={<UserOutlined />} title={roleName}>{routes}</SubMenu>\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Sider trigger={null} collapsible collapsed={collapsed}>\r\n        <div className=\"logo\" />\r\n        <Menu onSelect={handleClick} theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          {realRoutes}\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n            className: 'trigger',\r\n            onClick: toggle,\r\n          })}\r\n          {itemSelected}\r\n        </Header>\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            margin: '24px 16px',\r\n            padding: 24,\r\n            minHeight: 280,\r\n            overflow: 'auto',\r\n            height: '100vh',\r\n          }}\r\n        >\r\n          <Route exact path=\"/home\" component={HomeScreen} />\r\n          <Route path={`${path}/billing`} component={Billing} />\r\n          <Route path={`${path}/billSearch`} component={BillSearch} />\r\n          <Route path={`${path}/registration`} component={Registration} />\r\n          <Route path={`${path}/patientSearch`} component={PatientSearch} />\r\n          <Route path={`${path}/addDoctor`} component={AddDoctor} />\r\n          <Route path={`${path}/appointment`} component={Appointment} />\r\n          <Route path={`${path}/doctorAppointment`} component={DoctorAppointment} />\r\n          <Route path={`${path}/prescription`} component={Prescription} />\r\n          <Route path={`${path}/addMedicine`} component={AddMedicine} />\r\n          <Route path={`${path}/addTest`} component={AddTest} />\r\n          <Route path={`${path}/packages`} component={PackageManagement} />\r\n          <Route path={`${path}/canteen`} component={Canteen} />\r\n          <Route path={`${path}/canteenStock`} component={CanteenStock} />\r\n          <Route path={`${path}/pharmacy`} component={Pharmacy} />\r\n          <Route path={`${path}/addNewMedicine`} component={AddNewMedicine} />\r\n          <Route path={`${path}/manageMedicines`} component={ManageMedicines} />\r\n          <Route path={`${path}/purchaseOrderList`} component={PurchaseOrder} />\r\n          <Route path={`${path}/newPurchaseOrder`} component={NewPurchaseOrder} />\r\n          <Route path={`${path}/indentPreparation`} component={IndentPreparation} />\r\n          <Route path={`${path}/indentList`} component={IndentList} />\r\n          <Route path={`${path}/certificates`} component={Certificates} />\r\n          <Route path={`${path}/package`} component={Package} />\r\n          <Route path={`${path}/newPackage`} component={NewPackage} />\r\n          <Route path={`${path}/manageSuppliers`} component={ManageSupplier} />\r\n          <Route path={`${path}/inProgress`} component={InProgress} />\r\n          <Route path={`${path}/viewPrescription`} component={ViewPrescription} />\r\n          <Route path={`${path}/viewDoctors`} component={ViewDoctors} />\r\n          \r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>BayMax ©2021</Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { StateProvider } from '../state';\r\nimport { INITIAL_STATE as AUTH_INITIAL_STATE } from '../state/auth/reducers';\r\nimport { INITIAL_STATE as PRODUCT_INITIAL_STATE } from '../state/product/reducers';\r\nimport reducers from '../state/reducers';\r\nimport BaseStyles from './base-styles';\r\nimport PrivateRoute from './private-route';\r\nimport Content from '../components/content';\r\nimport Header from '../components/header';\r\nimport Login from '../views/login';\r\nimport Home from '../views/home';\r\n\r\nconst Root = props => {\r\n  const initialState = {\r\n    auth: AUTH_INITIAL_STATE,\r\n    product: PRODUCT_INITIAL_STATE,\r\n  };\r\n  return (\r\n    <StateProvider initialState={initialState} reducer={reducers}>\r\n      <BaseStyles />\r\n      <Router>\r\n        <>\r\n          <Header />\r\n          <Content>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Login} />\r\n              {/* <PrivateRoute path=\"/home\" component={Home} /> */}\r\n              <Route path=\"/home\" component={Home} />\r\n            </Switch>\r\n          </Content>\r\n        </>\r\n      </Router>\r\n    </StateProvider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Root from './routes';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nrender(<Root />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.e8f986ac.jpg\";"],"sourceRoot":""}