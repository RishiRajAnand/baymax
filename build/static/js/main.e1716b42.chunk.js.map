{"version":3,"sources":["assets/images/corousal1.jpg","assets/images/corousal2.jpg","assets/images/corousal3.jpg","assets/images/corousal4.jpg","state/index.js","state/auth/actions.js","state/auth/reducers.js","utils/roles.js","state/product/reducers.js","state/product/actions.js","state/reducers.js","routes/base-styles.js","components/content.js","components/theme.js","components/button.js","components/header.js","state/auth/hooks/useLogin.js","views/login/containers/container.js","components/form/formGroup.js","components/form/input.js","components/form/error.js","views/login/containers/form.js","components/spinner.js","views/login/index.js","utils/departmentList.js","utils/services.js","state/registration/queries.js","state/registration/hooks/useDoctorRegistration.js","views/admin/addDoctor/index.js","state/appointment/queries.js","state/appointment/hooks/useBookAppointment.js","state/patientSearch/queries.js","state/patientSearch/hooks/useGetAllDoctorByDepartment.js","state/patientSearch/hooks/useGetAllDoctors.js","state/patientSearch/hooks/usePatientSearchbyId.js","views/patientDetails/index.js","utils/timeSlot.js","utils/constants.js","views/appointment/components/appointmentCardPrint.js","views/appointment/index.js","state/pharmacy/queries.js","state/pharmacy/hooks/useGetAllPharmacyMedicines.js","state/addMedicine/queries.js","state/addMedicine/hooks/useSearchTest.js","views/billing/components/addItemModal.js","views/billing/components/billPrint.js","views/billing/components/billSearch.js","views/billing/components/finalCharges.js","state/billing/queries.js","state/billing/hooks/useGenerateBill.js","views/billing/services.js","views/billing/index.js","views/canteen/index.js","views/canteen/canteenStock/index.js","state/patientSearch/hooks/usePatientSearch.js","state/appointment/hooks/useGetAppointmentsByDoctorId.js","state/appointment/hooks/useGetAppointmentByPatientId.js","views/doctorAppointment/index.js","state/addMedicine/hooks/useAddMedicine.js","state/addMedicine/hooks/useSearchMedicine.js","views/medicine/addMedicine/index.js","state/addMedicine/hooks/useAddTest.js","views/medicine/addTest/index.js","views/package/index.js","state/patientSearch/hooks/usePatientSearchByName.js","views/patientSearch/index.js","views/pharmacy/index.js","state/prescription/queries.js","state/prescription/hooks/useSavePrescription.js","views/prescription/index.js","views/registration/index.js","views/home/homescreen/index.js","state/pharmacy/hooks/useGetMedicinedetail.js","views/pharmacy/addNewMedicine/index.js","views/pharmacy/addNewMedicine/utils.js","views/pharmacy/manageMedicine/index.js","state/pharmacy/hooks/UseGetAllPurchaseOrders.js","state/pharmacy/hooks/useDeletePurchaseOrder.js","views/pharmacy/purchaseOrderList/index.js","state/pharmacy/hooks/useGetAllSupplier.js","state/pharmacy/hooks/useSavePurchaseOrder.js","state/pharmacy/hooks/useGetPurchaseOrderDetails.js","views/pharmacy/newPurchaseOrder/index.js","views/pharmacy/indentPreparations/index.js","state/pharmacy/hooks/useAddSupplier.js","views/pharmacy/manageSupplier/index.js","views/pharmacy/indentPreparations/indentList/index.js","views/certificates/index.js","views/package/newPackage/index.js","views/inProgress/index.js","state/prescription/hooks/useGetPrescriptionByAppointmentId.js","views/prescription/printPrescription/index.js","views/prescription/viewPrescription/index.js","routes/allRoutesData.js","routes/routeResolver.js","views/billSearch/components/mainBillView.js","views/billSearch/index.js","views/home/index.js","routes/index.js","registerServiceWorker.js","index.js","assets/images/logo.jpg"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","LOGIN","LOGOUT","INITIAL_STATE","logged","username","roles","state","action","type","payload","list","auth","product","authReducer","productReducer","BaseStyles","createGlobalStyle","reset","Content","styled","div","colors","primary","secondary","default","gradient","bg","forms","labelColor","light","errorColor","danger","theme","Object","freeze","viewports","smartphone","tablet","desktop","Button","button","props","keys","find","p","upper","large","Nav","fixed","Right","nav","Title","h1","Header","dispatch","handleLogout","a","Link","to","onClick","useProducts","useState","isLoading","setIsLoading","values","actions","password","Container","formGroup","Input","input","ErrorText","span","LoginForm","style","width","marginBottom","src","logo","initialValues","handleChange","handleBlur","handleSubmit","errors","genericError","name","id","placeholder","onChange","onBlur","error","background","color","BackDrop","Spinner","Loading","show","allowedRoles","Login","location","history","from","pathname","useLogin","setLogin","useEffect","push","onSubmit","console","log","roleName","checkAllowedUsers","notification","message","description","duration","departments","api","url","token","registration","body","axios","post","then","res","data","catch","err","doctorsRegistration","useDoctorRegistration","status","setStatus","response","Option","Select","layout","labelCol","wrapperCol","validateMessages","required","types","email","number","range","department","Item","map","key","speciality","qualification","AddDoctor","setRequest","onFinish","formData","form","user","experience","highestQualification","consulationCharge","designation","label","rules","min","max","offset","htmlType","bookAppointment","getAppointmentByDoctorId","doctorId","get","getAppointmentByPatientId","patientId","useBookAppointment","getPatientByName","patientName","getPatientById","useGetAllDoctorByDepartment","patients","setPatients","deptname","useGetAllDoctors","usePatientById","PatientDetails","prop","usePatientSearchbyId","patient","bordered","visitType","age","contactNum","text","timeSlot","date","startTime","endTime","interval","startDate","setHours","endDate","start","getTime","end","timeSlots","Date","hospitalDetails","address","contact","AppointmentCardPrint","appointmentDetails","this","marginTop","display","flexDirection","justifyContent","alignItems","margin","marginLeft","fontSize","fontWeight","height","padding","float","doctorName","dateAndTime","React","Component","Search","disabledDate","current","moment","endOf","Appointment","doctorsList","Map","queryParams","queryString","parse","search","selectedDepartment","setSelectedDepartment","selectedDate","setSelectedDate","componentRef","useRef","selectedDoctor","setSelectedDoctor","doctors","patientDetails","setPatientSearchById","doctorBydepartment","callDoctorByDepartment","setBookAppointment","handlePrint","useReactToPrint","content","length","doctor","set","MainButton","appointmentCard","size","concat","toDateString","title","extra","href","val","allowClear","enterButton","onSearch","className","fullscreen","onSelect","showSearch","defaultValue","optionFilterProp","filterOption","option","toLowerCase","indexOf","ref","savePharmacyMedicine","saveSupplier","savePurchaseOrder","deletePurchaseOrder","delete","getPharmacyMedicineDetail","medicineId","useGetPharmacyMedicines","medicines","setMedicineList","addMedicine","addTest","useTestSearch","AddItem","medicineMap","testMap","options","selected","setSelected","setMedicineSearch","tests","setTestSearch","test","testName","forEach","medicine","medicineName","obj","itemId","quantity","itemType","amount","medicinedetail","salePrice","testdetail","price","onItemAdded","dropdownClassName","dropdownMatchSelectWidth","BillPrint","itemList","billId","finalCharges","todaysDate","toLocaleTimeString","itemArray","item","gst","discount","total","border","cellpadding","cellspacing","colspan","totalAmount","totalDiscount","totalGST","BillSearchComp","filterValue","setfilterValue","Group","compact","FinalCharges","gutter","saveGenerateBill","useSaveGenerateBill","responseObj","setResponseObj","getBillDetails","searchValue","searchBy","searchURL","EditableContext","EditableRow","index","Form","useForm","component","EditableCell","editable","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","focus","toggleEdit","setFieldsValue","save","validateFields","childNode","onPressEnter","paddingRight","Billing","components","row","cell","columns","sorter","compare","b","multiple","render","onConfirm","returnedItems","context","setReturnedItems","dataSource","filter","calculateTotalCharges","setData","handleDelete","newData","findIndex","getFinalCharges","discountedAmount","splice","col","onCell","defaultbillDetails","createdAt","printBillButton","generateBillButton","billType","paymentStatus","paymentMode","totalCost","billDetailList","billItem","itemName","billMapId","cost","concessionPercentage","gstPercentage","mrp","concessionType","purchaseType","printButton","newPatientForm","setPaymentMode","setPatientDetails","newPatientSwitch","setNewPatientSwitch","generateBillStatus","isModalVisible","setIsModalVisible","billDetails","setBillDetails","setFinalCharges","patientInfo","patientSearch","dataList","Number","parseInt","tempDataList","tempData","charges","visible","footer","onOk","onCancel","itemFormValue","Math","random","checked","pagination","filters","rowClassName","onDiscountChange","discountValue","e","target","renderTitle","rel","renderItem","count","UserOutlined","Canteen","icon","PlusOutlined","OrderedListOutlined","autoComplete","List","fields","add","remove","field","align","fieldKey","MinusCircleOutlined","block","shape","DownloadOutlined","defaultSortOrder","cat","onFilter","category","sortDirections","CanteenStock","forceUpdate","setName","items","setItems","onNameChange","event","addItem","dropdownRender","menu","flexWrap","flex","cursor","shouldUpdate","disabled","isFieldsTouched","getFieldsError","usePatientSearch","useGetAppointmentByDoctorId","useGetAppointmentByPatientId","PickerWithType","picker","DoctorAppointment","tags","tag","toUpperCase","appointmentId","setType","patientAppointments","setAppointmentByPatientId","setFilter","appointments","setAppointmentByDoctorId","appointment","time","appointmentDate","useAddMedicine","useMedicineSearch","AddMedicine","strength","medicineType","prefix","useAddTest","AddTest","useSearchTest","packageName","packageEndDate","Package","textAlign","usePatientByName","PatientSearch","setVisible","showPatient","setShowPatient","setPatientSearchbyId","patientDetailsByName","setPatientSearchbyName","phone","street","searches","columnsModal","dataModal","appointmentid","appointmentdate","centered","expandable","expandedRowRender","rowExpandable","Pharmacy","savePrescription","getPrescriptionByAppointmentId","useSavePrescription","Prescription","optionsTests","submitted","setSubmitted","medicineForm","vitalsForm","adviceForm","setSavePrescription","getFieldsValue","medicineList","users","testList","patientVitals","appointmentDto","weight","Bp","bp","temprature","temparature","advise","advice","prescribedMedsDtoList","prescribedTestingDtoList","medName","days","numberOfDays","dosage","comment","comments","dateOfBooking","handleSearch","handleTestSearch","has","formActions","PrinterOutlined","inputValue","TextArea","PhonePrefixSelector","noStyle","Registration","alternatecontact","country","visit","recieptId","errr","addonBefore","HomeScreen","autoplay","class","backgroundImage","corousal1","corousal2","corousal3","corousal4","useGetPharmacyMedicineDetail","medicineUnits","medicineDistributionUnit","AddNewMedicine","medicineDetail","setRequest1","mode","genericName","boxSize","expDate","expiryDate","medicineShelf","details","unit","triggerValue","parseFloat","image","supplierPrice","suppliersPrice","tax","supplierName","availability","stockQuantity","clearForm","rows","listType","UploadOutlined","Text","Typography","ManageMedicines","useGetAllPharmacyMedicines","purchasePrice","sellingPrice","stock","UseGetAllPurchaseOrder","useDeletePurchaseOrder","resolveTag","PurchaseOrder","orderDate","deliveryDate","supplier","purchaseOrderId","storeName","rol","productDetails","setDeletePurchaseOrder","purchaseOrders","setGetAllPurchaseOrder","order","invoiceNumber","store","useGetAllSuppliers","useSavePurchaseOrder","useGetPurchaseOrderDetails","NewPurchaseOrder","supplierOptions","purchaseDetailsForm","productListForm","suppliers","setSupplierSearch","setSavePurchaseOrder","orderDetail","setGetPurchaseOrderDetails","productList","productId","productName","purchaseCost","batchNumber","purchaseDetails","onSearchProduct","minWidth","IndentPreparation","useAddSupplier","ManageSupplier","phoneNumber","editSupplier","supplierId","IndentList","Certificates","setValue","NewPackage","InProgress","useGetPrescriptionByAppointmentId","PrintPrescription","medicineTable","testTable","dateOfResult","reportDesc","testDesc","temperature","diseaseDesc","medicinecolumns","testcolumns","ViewPrescription","medicineData","testData","prescriptionDetails","setPrescriptionDetails","billing","link","billSearch","doctorRoutes","pharmacyRoutes","receptionRoutes","upcomingRoutes","adminRoutes","MainBillView","billItemList","BillSearch","searchCriteria","setSearchFilter","mainBillViewButton","componentRefSingleBillPrint","searchFilter","Layout","Sider","Footer","SubMenu","Menu","Home","path","match","realRoutes","collapsed","setCollapsed","itemSelected","setItemSelected","routes","setRoutes","roleList","role","getRoutes","entries","childroutes","route","routeObject","subRoutesByRole","trigger","collapsible","defaultSelectedKeys","createElement","MenuUnfoldOutlined","MenuFoldOutlined","minHeight","overflow","Route","exact","PackageManagement","Root","AUTH_INITIAL_STATE","PRODUCT_INITIAL_STATE","reducers","Switch","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","document","getElementById","URL","process","origin","addEventListener","fetch","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e1716b42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/corousal1.93dd94f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal2.79453c34.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal3.f5b70fd5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/corousal4.7e7b53cf.jpg\";","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export const LOGIN = 'auth/LOGIN';\r\nexport const LOGOUT = 'auth/CLEAR_USER';\r\n\r\nexport const login = (payload) => ({\r\n  type: LOGIN,\r\n  payload\r\n});\r\n\r\nexport const logout = () => ({\r\n  type: LOGOUT,\r\n});\r\n","import { allRoles } from '../../utils/roles';\r\nimport { LOGIN, LOGOUT } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  logged: false,\r\n  username: \"\",\r\n  roles: allRoles\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return {\r\n        logged: true,\r\n        username: action.payload,\r\n        roles: [action.payload],\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...INITIAL_STATE,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const DOCTOR = \"doctor\";\r\nexport const PHARMACY = \"pharmacy\";\r\nexport const ADMIN = \"admin\";\r\nexport const RECEPTION = \"reception\";\r\nexport const UPCOMING = \"upcoming\";\r\n\r\nexport const allRoles = [RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING];","import { LIST_PRODUCTS } from './actions';\r\n\r\nexport const INITIAL_STATE = {\r\n  list: null,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case LIST_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const LIST_PRODUCTS = 'product/LIST_PRODUCTS';\r\n\r\nexport const listProducts = payload => ({\r\n  type: LIST_PRODUCTS,\r\n  payload,\r\n});\r\n","import authReducer from './auth/reducers';\r\nimport productReducer from './product/reducers';\r\n\r\nexport default ({ auth, product }, action) => ({\r\n  auth: authReducer(auth, action),\r\n  product: productReducer(product, action),\r\n});\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst BaseStyles = createGlobalStyle`\r\n    ${reset}\r\n    body { margin: 0 };\r\n    html { font-family: 'Montserrat', sans-serif; }\r\n    * { box-sizing: border-box; };\r\n`;\r\n\r\nexport default BaseStyles;\r\n","import styled from 'styled-components';\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Content;\r\n","const colors = {\r\n  primary: '#7159c1',\r\n  secondary: '#9b49c1',\r\n  default: '#fff',\r\n  gradient:\r\n    'linear-gradient(112deg, rgba(113,89,193,1) 0%, rgba(155,73,193,1) 100%);',\r\n  bg: 'linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%);',\r\n};\r\n\r\nconst viewports = {\r\n  smartphone: '360px',\r\n  tablet: '720px',\r\n  desktop: '1280px',\r\n};\r\n\r\nconst forms = {\r\n  labelColor: colors.light,\r\n  errorColor: colors.danger,\r\n};\r\n\r\nconst theme = Object.freeze({\r\n  colors,\r\n  forms,\r\n  viewports,\r\n});\r\n\r\nexport default theme;\r\n","import styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst Button = styled.button`\r\n  transition: all 0.3s ease;\r\n  background: ${props =>\r\n    theme.colors[Object.keys(props).find(p => theme.colors[p])] ||\r\n    theme.colors.primary};\r\n  text-transform: ${props => (props.upper ? 'uppercase' : 'none')};\r\n  font-weight: 300;\r\n  color: ${theme.colors.default};\r\n  padding: 9px 13px;\r\n  margin: 1px;\r\n  border: none;\r\n  border-radius: 2px;\r\n  cursor: pointer;\r\n  width: ${props => (props.large ? '100%' : 'auto')};\r\n  &:hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { useStateValue } from '../state';\r\nimport { logout } from '../state/auth/actions';\r\n\r\nimport Button from './button';\r\n\r\nconst Nav = styled.div`\r\n  height: 50px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  background: #001529;\r\n  position: ${props => (props.fixed ? 'fixed' : 'relative')};\r\n`;\r\n\r\nconst Right = styled.nav`\r\n  flex: 1;\r\n  text-align: right;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n  color: white;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Header = props => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n\r\n  const handleLogout = async () => {\r\n    await dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <Nav>\r\n      <Title><Link to={`/home`}>BAYMAX</Link></Title>\r\n      <Right>\r\n          <Link to={`/`}><Button gradient onClick={() => handleLogout()}>\r\n            Logout\r\n          </Button>\r\n          </Link>\r\n      </Right>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\nimport { useStateValue } from '../../index';\r\nimport { login } from '../actions';\r\n\r\nconst useProducts = () => {\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const formData = async ({ values, actions }) => {\r\n    setIsLoading(true);\r\n\r\n    setIsLoading(false);\r\n    if (values.username !== '' && values.password !== '') {\r\n      dispatch(login(values.username));\r\n    }\r\n  };\r\n\r\n  return [auth, formData, isLoading];\r\n};\r\n\r\nexport default useProducts;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: calc(100vh - 50px);\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\n\r\nconst formGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default formGroup;\r\n","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n  margin: 10px 5px;\r\n  border-radius: 3px;\r\n  border: 1px solid #e6e6e6;\r\n  padding: 7px;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Input;\r\n","import styled from 'styled-components';\r\nimport theme from '../theme';\r\n\r\nconst ErrorText = styled.span`\r\n  text-align: center;\r\n  color: ${theme.forms.errorColor};\r\n`;\r\n\r\nexport default ErrorText;\r\n","/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react';\r\nimport { Formik } from 'formik';\r\nimport Button from '../../../components/button';\r\nimport FormGroup from '../../../components/form/formGroup';\r\nimport Input from '../../../components/form/input';\r\nimport ErrorText from '../../../components/form/error';\r\nimport logo from '../../../assets/images/logo.jpg';\r\n\r\nconst LoginForm = props => (\r\n  <>\r\n    <img style={{ width: \"300px\", marginBottom: '20px' }} src={logo} />\r\n    <Formik initialValues={{ username: '', password: '' }} {...props}>\r\n      {({ handleChange, handleBlur, values, handleSubmit, errors }) => (\r\n        <FormGroup>\r\n          {errors.genericError && <ErrorText>{errors.genericError}</ErrorText>}\r\n          <Input\r\n            name=\"username\"\r\n            id=\"username\"\r\n            placeholder=\"Username\"\r\n            onChange={handleChange('username')}\r\n            onBlur={handleBlur('username')}\r\n            error={errors.username}\r\n            value={values.username}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            onChange={handleChange('password')}\r\n            onBlur={handleBlur('password')}\r\n            error={errors.password}\r\n            value={values.password}\r\n          />\r\n          <Button primary large onClick={handleSubmit} style={{ background: 'skyblue', color: 'white' }} type=\"submit\">\r\n            Login\r\n        </Button>\r\n        </FormGroup>\r\n      )}\r\n    </Formik>\r\n  </>\r\n);\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport theme from './theme';\r\n\r\nconst BackDrop = styled.div`\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.67);\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid ${theme.colors.primary};\r\n  border-radius: 50%;\r\n  width: 120px;\r\n  height: 120px;\r\n  animation: spin 2s linear infinite;\r\n  margin: 40vh auto;\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loading = props => {\r\n  return (\r\n    props.show && (\r\n      <BackDrop>\r\n        <Spinner />\r\n      </BackDrop>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport useLogin from '../../state/auth/hooks/useLogin';\r\n\r\nimport Container from './containers/container';\r\nimport Form from './containers/form';\r\nimport Spinner from '../../components/spinner';\r\nimport { notification } from 'antd';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\n\r\nconst allowedRoles = [DOCTOR, PHARMACY, RECEPTION, UPCOMING, ADMIN]\r\nconst Login = ({ location, history }) => {\r\n  const { from } = location.state || { from: { pathname: '/home' } };\r\n  const [auth, setLogin, isLoading] = useLogin();\r\n\r\n  useEffect(() => {\r\n    if (auth.logged) {\r\n      history.push(from);\r\n    }\r\n  }, [auth, from, history]);\r\n\r\n  function checkAllowedUsers(values) {\r\n    for (const roleName of allowedRoles) {\r\n      if (roleName == values.username && roleName == values.password) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  return (\r\n    <Container>\r\n      <Spinner show={isLoading} />\r\n      <Form onSubmit={(values, actions) => {\r\n        console.log(\"values\", values);\r\n        console.log(\"actions\", actions);\r\n        if (checkAllowedUsers(values)) {\r\n          setLogin({ values, actions });\r\n        } else {\r\n          notification[\"error\"]({\r\n            message: 'Invalid username or password!',\r\n            description:\r\n              'Please check the username and password and try again.',\r\n            duration: 5,\r\n          });\r\n        }\r\n\r\n      }} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export const departments = [\"Accident and emergency (A&E)\",\r\n    \"Admissions\",\r\n    \"Anesthetics\",\r\n    \"Breast Screening\",\r\n    \"Burn Center\",\r\n    \"Cardiology\",\r\n    \"Central Sterile Services Department (CSSD)\",\r\n    \"Chaplaincy\",\r\n    \"Coronary Care Unit (CCU)\",\r\n    \"Critical Care\",\r\n    \"Diagnostic Imaging\",\r\n    \"Discharge Lounge\",\r\n    \"Elderly services\",\r\n    \"Finance Department\",\r\n    \"Gastroenterology\",\r\n    \"General Services\",\r\n    \"General Surgery\",\r\n    \"Gynecology\",\r\n    \"Haematology\",\r\n    \"Health & Safety\",\r\n    \"Intensive Care Unit (ICU)\",\r\n    \"Human Resources\",\r\n    \"Infection Control\",\r\n    \"Information Management\",\r\n    \"Maternity\",\r\n    \"Medical Records\",\r\n    \"Microbiology\",\r\n    \"Neonatal\",\r\n    \"Nephrology\",\r\n    \"Neurology\",\r\n    \"Nutrition and Dietetics\",\r\n    \"Obstetrics/Gynecology\",\r\n    \"Occupational Therapy\",\r\n    \"Oncology\",\r\n    \"Ophthalmology\",\r\n    \"Orthopaedics\",\r\n    \"Otolaryngology (Ear, Nose, and Throat)\",\r\n    \"Pain Management\",\r\n    \"Patient Accounts\",\r\n    \"Patient Services\",\r\n    \"Pharmacy\",\r\n    \"Physiotherapy\",\r\n    \"Purchasing & Supplies\",\r\n    \"Radiology\",\r\n    \"Radiotherapy\",\r\n    \"Renal\",\r\n    \"Rheumatology\",\r\n    \"Sexual Health\",\r\n    \"Social Work\",\r\n    \"Urology\"];\r\n\r\nexport const doctorsSpeciality = [\"Allergist\",\r\n    \"Anaesthesiologist\",\r\n    \"Andrologist\",\r\n    \"Cardiologist\",\r\n    \"Cardiac Electrophysiologist\",\r\n    \"Dermatologist\",\r\n    \"Emergency Room (ER) Doctors\",\r\n    \"Endocrinologist\",\r\n    \"Epidemiologist\",\r\n    \"Family Medicine Physician\",\r\n    \"Gastroenterologist\",\r\n    \"Geriatrician\",\r\n    \"Hyperbaric Physician\",\r\n    \"Hematologist\",\r\n    \"Hepatologist\",\r\n    \"Immunologist\",\r\n    \"Infectious Disease Specialist\",\r\n    \"Intensivist\",\r\n    \"Internal Medicine Specialist\",\r\n    \"Maxillofacial Surgeon / Oral Surgeon\",\r\n    \"Medical Examiner\",\r\n    \"Medical Geneticist\",\r\n    \"Neonatologist\",\r\n    \"Nephrologist\",\r\n    \"Neurologist\",\r\n    \"Neurosurgeon\",\r\n    \"Nuclear Medicine Specialist\",\r\n    \"Obstetrician/Gynecologist (OB/GYN)\",\r\n    \"Occupational Medicine Specialist\",\r\n    \"Oncologist\",\r\n    \"Ophthalmologist\",\r\n    \"Orthopedic Surgeon / Orthopedist\",\r\n    \"Otolaryngologist (also ENT Specialist)\",\r\n    \"Parasitologist\",\r\n    \"Pathologist\",\r\n    \"Perinatologist\",\r\n    \"Periodontist\",\r\n    \"Pediatrician\",\r\n    \"Physiatrist\",\r\n    \"Plastic Surgeon\",\r\n    \"Psychiatrist\",\r\n    \"Pulmonologist\",\r\n    \"Radiologist\",\r\n    \"Rheumatologist\",\r\n    \"Sleep Doctor / Sleep Disorders Specialist\",\r\n    \"Spinal Cord Injury Specialist\",\r\n    \"Sports Medicine Specialist\",\r\n    \"Surgeon\",\r\n    \"Thoracic Surgeon\",\r\n    \"Urologist\",\r\n    \"Vascular Surgeon\",\r\n    \"Veterinarian\",\r\n    \"Palliative Care Specialist\",\r\n    \"Acupuncturist\",\r\n    \"Audiologist\",\r\n    \"Ayurvedic Practioner\",\r\n    \"Chiropractor\",\r\n    \"Diagnostician\",\r\n    \"Homeopathic Doctor\",\r\n    \"Microbiologist\",\r\n    \"Naturopathic Doctor\",\r\n    \"Pharmacist\",\r\n    \"Physiotherapist\",\r\n    \"Podiatrist / Chiropodist\",\r\n    \"Registered Massage Therapist\"];\r\n\r\nexport const qualifications = [\"MS\", \"MD\", \"MBBS\"];\r\n","const api = {\r\n  // url: 'http://ec2-18-221-50-135.us-east-2.compute.amazonaws.com:8080',\r\n  url: 'http://localhost:8080',\r\n  token: '',\r\n};\r\n\r\nexport default api;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const registration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/patient/registration`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const doctorsRegistration = (body) => {\r\n  return axios\r\n    .post(`${api.url}/doctorService/createNewDoctorsRecord`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n","import { useState } from 'react';\r\nimport { doctorsRegistration } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useDoctorRegistration = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await doctorsRegistration(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useDoctorRegistration;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport '../addDoctor/addDoctor.css';\r\nimport { departments, doctorsSpeciality, qualifications } from '../../../utils/departmentList';\r\nimport useDoctorRegistration from '../../../state/registration/hooks/useDoctorRegistration';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\nconst speciality = doctorsSpeciality.map(speciality => <Option key={speciality}>{speciality}</Option>);\r\nconst qualification = qualifications.map(qualification => <Option key={qualification}>{qualification}</Option>);\r\n\r\n\r\nfunction handleChange(value) {\r\n    console.log(`Selected: ${value}`);\r\n}\r\n\r\nconst AddDoctor = () => {\r\n    const [status, isLoading, setRequest] = useDoctorRegistration();\r\n\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The Doctor has been registered successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [status]);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n        setRequest(body);\r\n    };\r\n\r\n\r\n    return (\r\n        <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n            <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Department\" name={['user', 'department']}>\r\n                <Select>\r\n                    {department}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'experience']} label=\"Experience\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item label=\"Specialization\" name={['user', 'speciality']}>\r\n                <Select>\r\n                    {speciality}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item label=\"Highest Qualification\" name={['user', 'highestQualification']}>\r\n                <Select>\r\n                    {qualification}\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'designation']} label=\"Designation\">\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'consulationCharge']} label=\"Consultation Charges\" rules={[{ type: 'number', min: 0, max: 10000 }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default AddDoctor;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const bookAppointment = (body) => {\r\n  return axios\r\n    .post(`${api.url}/HMServiceController/createNewAppointment`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByDoctorId = (doctorId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentList?numberOfDays=30&startIndex=0&pazeSize=30&doctorId=` + doctorId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAppointmentByPatientId = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/HMServiceController/getAppointmentListByPatientId?numberOfDays=30&startIndex=0&pazeSize=30&patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};","import { useState } from 'react';\r\nimport { bookAppointment } from '../queries';\r\n\r\nconst useBookAppointment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await bookAppointment(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useBookAppointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getAllPatients = () => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientByName = (patientName) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientByName?patientName=` + patientName)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getPatientById = (patientId) => {\r\n  return axios\r\n    .get(`${api.url}/patient/patientById?patientId=` + patientId)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n\r\nexport const getAllDoctors = () => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\nexport const getAllDoctorsByDepartment = (name) => {\r\n  return axios\r\n    .get(`${api.url}/doctorService/getDoctorsListByDepartment?departmentName=` + name)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err.response;\r\n    });\r\n};\r\n\r\n","import { useState } from 'react';\r\nimport { getAllDoctorsByDepartment } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctorByDepartment = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (deptname) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctorsByDepartment(deptname);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctorByDepartment;\r\n","import { useState } from 'react';\r\nimport { getAllDoctors } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetAllDoctors = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllDoctors();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAllDoctors;\r\n","import { useState } from 'react';\r\nimport { getPatientById } from '../queries';\r\n\r\nconst usePatientById = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState({});\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientById(patientId);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientById;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Divider, Descriptions, Badge } from 'antd';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\n\r\nconst PatientDetails = (prop) => {\r\n    const [patient, isLoading, setRequest] = usePatientSearchbyId();\r\n\r\n    useEffect(() => {\r\n        if(prop.patientId != null) {\r\n            setRequest(prop.patientId);\r\n        }\r\n    }, [prop.patientId]);\r\n\r\n    return (\r\n        <>\r\n            <Divider>Patient Details</Divider>\r\n            <Descriptions bordered>\r\n                <Descriptions.Item label=\"Name\">{patient.patientName}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{patient.visitType}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{patient.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Contact\">{patient.contactNum}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"success\" text=\"Active\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n        </>);\r\n};\r\n\r\nexport default PatientDetails;\r\n","const timeSlot = (date, startTime, endTime, interval) => {\r\n    // date.setHours(startTime);\r\n    let startDate = date;\r\n    startDate.setHours(startTime);\r\n    // date.setHours(endTime);\r\n    let endDate = date;\r\n    endDate.setHours(endTime);\r\n    console.log(startDate);\r\n    console.log(endDate);\r\n    let start = startDate.getTime();\r\n    let end = endDate.getTime();\r\n    var timeSlots = [];\r\n\r\n    while (start < end) {\r\n        timeSlots.push([new Date(start), new Date(start += interval * 60000)]);\r\n    }\r\n    return timeSlots;\r\n}\r\n\r\nexport default timeSlot;","const hospitalDetails = {\r\n    name: 'Medi World Hospital',\r\n    address: 'East Ramakrishna Nagar, Near ICICI Bank, New Bypass Road, Patna-800027',\r\n    contact: '8002727800',\r\n};\r\n\r\nexport default hospitalDetails;","import React, { useRef } from 'react';\r\nimport { Descriptions, Divider } from 'antd';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class AppointmentCardPrint extends React.Component {\r\n    render() {\r\n        const appointmentDetails = this.props.appointmentDetails;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <div style={{ marginTop: '50px' }}>\r\n                       <h3 style={{fontWeight: 'bold', fontSize: '30px'}}>Appointment Card</h3>\r\n                    </div>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                    <div style={{ fontSize: '25px' ,  float: 'left'}}>\r\n                        <p><b>Patient Name:</b> {appointmentDetails.patientName}</p>\r\n                        <p><b>Doctor Name:</b> {appointmentDetails.doctorName}</p>\r\n                        <p><b>Date and Time:</b> {appointmentDetails.dateAndTime}</p>\r\n                        <p><b>Department: </b>{appointmentDetails.department}</p>\r\n                    </div>  \r\n                    </div>\r\n\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { Button, Calendar, Card, Col, Divider, notification, Row, Select, Input, Form } from 'antd';\r\nimport moment from 'moment';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useBookAppointment from '../../state/appointment/hooks/useBookAppointment';\r\nimport useGetAllDoctorByDepartment from '../../state/patientSearch/hooks/useGetAllDoctorByDepartment';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport { departments } from '../../utils/departmentList';\r\nimport '../appointment/appointment.css';\r\nimport PatientDetails from '../patientDetails';\r\nimport timeSlot from '../../utils/timeSlot';\r\nimport { AppointmentCardPrint } from './components/appointmentCardPrint';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\n\r\nfunction disabledDate(current) {\r\n    // Can not select days before today and today\r\n    return current && current < moment().endOf('day');\r\n}\r\n\r\nconst department = departments.map(department => <Option key={department}>{department}</Option>);\r\n\r\nconst Appointment = ({ location, history }) => {\r\n    let doctorsList = [];\r\n    let timeSlots = [];\r\n    let appointmentDetails = {\r\n        patientName: '',\r\n        doctorName: '',\r\n        dateAndTime: '',\r\n        department: ''\r\n    };\r\n    // let selectedDoctor = \"\";\r\n    const map = new Map();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"all\");\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const componentRef = useRef();\r\n    const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [patientDetails, isLoading2, setPatientSearchById] = usePatientSearchbyId();\r\n    const [doctorBydepartment, isLoadings, callDoctorByDepartment] = useGetAllDoctorByDepartment();\r\n    const [status, isLoading1, setBookAppointment] = useBookAppointment();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        if (selectedDepartment === \"all\") {\r\n            setRequest();\r\n            if (queryParams.patientId != null) {\r\n                setPatientSearchById(queryParams.patientId);\r\n            } else {\r\n                setPatientSearchById(patientDetails.patientId);\r\n            }\r\n\r\n\r\n        } else {\r\n            callDoctorByDepartment(selectedDepartment);\r\n        }\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Appointment successfully booked for patient with id ' + queryParams.patientId + 'and Doctor ' + selectedDoctor,\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [selectedDepartment, status]);\r\n\r\n    if (selectedDepartment !== \"all\") {\r\n        if (doctorBydepartment.length > 0) {\r\n            doctorsList = doctorBydepartment.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>;\r\n            });\r\n        }\r\n    } else {\r\n        if (doctors.length > 0) {\r\n            doctorsList = doctors.map(doctor => {\r\n                map.set(doctor.doctorId, doctor);\r\n                return <Option key={doctor.doctorId} >{doctor.doctorName}</Option>\r\n            });\r\n        }\r\n    }\r\n    function handleChange(value) {\r\n        setSelectedDepartment(value);\r\n    }\r\n    function onDateSelect(value) {\r\n        setSelectedDate(new Date(value));\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        // selectedDoctor = value;\r\n        setSelectedDoctor(value);\r\n    }\r\n\r\n    function bookAppointment() {\r\n        const body = {\r\n            \"diseaseDesc\": \"test desc\",\r\n            \"advise\": \"test\",\r\n            \"patientId\": patientDetails.patientId,\r\n            \"patientName\": patientDetails.patientName,\r\n            \"doctorId\": selectedDoctor,\r\n            \"appointmentDate\": selectedDate.getTime(),\r\n            \"height\": 6,\r\n            \"weight\": 80,\r\n            \"Bp\": \"120/80\"\r\n        };\r\n        if (patientDetails.patientId != null) {\r\n            setBookAppointment(body);\r\n        } else {\r\n            notification[\"error\"]({\r\n                message: 'Failed',\r\n                description: 'Please Enter a valid patient Id!',\r\n                duration: 3\r\n            });\r\n        }\r\n\r\n    }\r\n    let MainButton = \"\";\r\n    let appointmentCard = \"\";\r\n    if (!status) {\r\n        MainButton = <Button type=\"primary\" size=\"large\" htmlType=\"submit\">Book Appointment</Button>;\r\n    } else {\r\n        console.log(\"dsadsad\" + selectedDoctor);\r\n        MainButton = <Button type=\"primary\" size=\"large\" onClick={() => {\r\n            console.log(patientDetails.patientId,);\r\n            history.push({ pathname: '/home/billing', search: '?patientId='.concat(patientDetails.patientId) + '&doctorName=' + map.get(selectedDoctor).doctorName + '&charges=' + map.get(selectedDoctor).consulationCharge + '&context=consulation' })\r\n        }}>Go To Billing</Button>;\r\n        appointmentDetails = {\r\n            patientName: patientDetails.patientName,\r\n            doctorName: map.get(selectedDoctor).doctorName,\r\n            dateAndTime: selectedDate.toDateString(),\r\n            department: selectedDepartment\r\n        };\r\n        appointmentCard = (<Card title=\"Appointment Details\" extra={<a href=\"#\" onClick={handlePrint}>Print</a>} style={{ width: 300 }}>\r\n            <p>Appointment booked for :</p>\r\n            <p>{patientDetails.patientName}</p>\r\n            <p>on {selectedDate.toDateString()}</p>\r\n            <p>At {selectedDepartment}</p>\r\n            <p>With Dr. {map.get(selectedDoctor).doctorName}</p>\r\n        </Card>);\r\n    }\r\n\r\n    timeSlots = timeSlot(new Date(), 2, 4, 15).map(val => <Option key={val} >val</Option>);\r\n    const onPatientSearch = value => {\r\n        setPatientSearchById(value);\r\n    };\r\n    return (\r\n        <>\r\n            <Search\r\n                placeholder=\"Search Patient By Id\"\r\n                allowClear\r\n                enterButton=\"Search\"\r\n                size=\"large\"\r\n                style={{ width: '40%' }}\r\n                onSearch={onPatientSearch}\r\n            />\r\n            <br />\r\n            <PatientDetails patientId={patientDetails.patientId} />\r\n            <br></br>\r\n            <Divider>Appointment Booking</Divider>\r\n            <Form name=\"nest-messages\" onFinish={bookAppointment}>\r\n                <Row>\r\n                    <Col span={8}>\r\n                        <div className=\"site-calendar-demo-card\">\r\n                            <Calendar fullscreen={false} onSelect={onDateSelect} disabledDate={disabledDate} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Form.Item name={['user', 'departmentName']}>\r\n                            <Select\r\n                                showSearch\r\n                                defaultValue=\"all\"\r\n                                onChange={handleChange}\r\n                                placeholder=\"Select Department\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                <Option value=\"all\">All</Option>\r\n                                {department}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'doctorName']} rules={[{ required: true }]}>\r\n                            <Select\r\n                                onChange={handleChangeOfDoctor}\r\n                                showSearch\r\n                                placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {doctorsList}\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <br /><br /><br />\r\n                        <Form.Item name={['user', 'timeSlot']}>\r\n                            <Select placeholder=\"Select Time Slot\" style={{ width: 300 }}>\r\n                                {timeSlots}\r\n                                {/* <Option value=\"jack\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack1\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack2\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack3\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack4\">11:30 - 11:45</Option>\r\n                                <Option value=\"jack5\">11:30 - 11:45</Option> */}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div style={{ display: 'none' }}>\r\n                            <AppointmentCardPrint ref={componentRef} appointmentDetails={appointmentDetails} />\r\n                        </div>\r\n                        {appointmentCard}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={12} offset={10}>\r\n                        {MainButton}\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>);\r\n};\r\n\r\nexport default Appointment;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePharmacyMedicine = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePharmacyMedicine`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const saveSupplier = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveSupplier`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const savePurchaseOrder = (body) => {\r\n    return axios\r\n        .post(`${api.url}/pharmacyController/saveOrUpdatePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const deletePurchaseOrder = (body) => {\r\n    return axios\r\n        .delete(`${api.url}/pharmacyController/deletePurchaseOrder`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderDetails = (purchaseOrderId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderDetails?purchaseOrderId=` + purchaseOrderId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPurchaseOrderList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getPurchaseOrderList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getSuppliersList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getSupplierList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineList = () => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineList`)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPharmacyMedicineDetail = (medicineId) => {\r\n    return axios\r\n        .get(`${api.url}/pharmacyController/getMedicineDetails?medicineId=` + medicineId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { getPharmacyMedicineList } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useGetPharmacyMedicines = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPharmacyMedicineList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicines;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const addMedicine = (body) => {\r\n  return axios\r\n    .post(`${api.url}/medicine/medicine`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};\r\n\r\nexport const getAllMedicines = () => {\r\n  return axios\r\n    .get(`${api.url}/medicine/medicineList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAllTests = () => {\r\n  return axios\r\n    .get(`${api.url}/test/testList`)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err\r\n    });\r\n};\r\n\r\nexport const addTest = (body) => {\r\n  return axios\r\n    .post(`${api.url}/test/test`, body)\r\n    .then(res => res.data)\r\n    .catch(err => {\r\n      return err;\r\n    }); \r\n};","import { useState } from 'react';\r\nimport { getAllMedicines, getAllTests } from '../queries';\r\n\r\nconst useTestSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllTests();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useTestSearch;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col, AutoComplete } from 'antd';\r\nimport useGetPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useTestSearch from '../../../state/addMedicine/hooks/useSearchTest';\r\nconst { Option } = Select;\r\n\r\nconst AddItem = (props) => {\r\n    const medicineMap = new Map();\r\n    const testMap = new Map();\r\n    let options = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n    const [selected, setSelected] = useState(\"medicine\");\r\n    const [medicines, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    const [tests, isLoading1, setTestSearch] = useTestSearch();\r\n    // const [options, isLoading, setMedicineSearch] = useGetPharmacyMedicines();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n    }, []);\r\n\r\n    if (selected == \"test\") {\r\n        options = [...tests.map(test => {\r\n            testMap.set(test.testName, test);\r\n            return { value: test.testName, label: test.testName };\r\n        })];\r\n    } else if (selected == \"medicine\") {\r\n        if (medicines.length > 0) {\r\n\r\n            medicines.forEach(medicine => {\r\n                medicineMap.set(medicine.medicineName, medicine);\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    } else if (selected == \"consultation\") {\r\n        if (medicines.length > 0) {\r\n            medicines.forEach(medicine => {\r\n                options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            });\r\n        }\r\n    }\r\n\r\n    function onFinish(value) {\r\n        let amount = 0;\r\n        const obj = {\r\n            itemId: null,\r\n            name: value.user.name,\r\n            quantity: value.user.quantity,\r\n            itemType: selected,\r\n            amount: amount\r\n        }\r\n        if (selected == \"medicine\") {\r\n            const medicinedetail = medicineMap.get(value.user.name);\r\n            obj[\"amount\"] = medicinedetail.salePrice;\r\n            obj[\"itemId\"] = medicinedetail.medicineId;\r\n\r\n        } else if (selected == \"test\") {\r\n            const testdetail = testMap.get(value.user.name);\r\n            obj[\"amount\"] = testdetail.price;\r\n            obj[\"itemId\"] = null;\r\n        }\r\n\r\n        props.onItemAdded(obj);\r\n    }\r\n    function onItemTypeSelect(value) {\r\n        setSelected(value);\r\n        if (value == \"test\") {\r\n            setTestSearch();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form {...layout} name=\"nest-messages\" onFinish={onFinish} >\r\n            <Form.Item name={['user', 'name']} label=\"Item name\" rules={[{ required: true }]}>\r\n                <AutoComplete\r\n                    dropdownClassName=\"certain-category-search-dropdown\"\r\n                    dropdownMatchSelectWidth={500}\r\n                    style={{ width: '100%' }}\r\n                    options={options}\r\n                >\r\n                    <Input.Search size=\"default\" placeholder=\"Item name\" />\r\n                </AutoComplete>\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'quantity']} label=\"Quantity\" rules={[{ type: 'number' }]}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item name={['user', 'itemType']} label=\"Item type\" >\r\n                <Select onSelect={onItemTypeSelect} defaultValue={selected} placeholder=\"Item type\">\r\n                    <Option value=\"medicine\">Medicine</Option>\r\n                    <Option value=\"test\">Test</Option>\r\n                    <Option value=\"consulation\">Consulation</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Add Item\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>);\r\n};\r\nexport default AddItem;","import React, { useRef } from 'react';\r\nimport '../components/billingPrint.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class BillPrint extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const billId = this.props.billId;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const finalCharges = this.props.finalCharges;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = itemList.map(item => {\r\n            return (\r\n                <tr>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.quantity}</td>\r\n                    <td>{item.amount}</td>\r\n                    <td>{item.gst}</td>\r\n                    <td>{item.discount}</td>\r\n                    <td>{item.total}</td>\r\n                </tr>)\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                                <td>BillId</td>\r\n                                <td>{billId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(CGST + SGST)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemArray}\r\n                            <tr>\r\n                                <td colspan=\"4\"></td>\r\n                                <td>Total</td>\r\n                                <td>{finalCharges.totalAmount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colspan=\"4\"></td>\r\n                                <td>Discount(%)</td>\r\n                                <td>{finalCharges.totalDiscount}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colspan=\"4\"></td>\r\n                                <td>Tax</td>\r\n                                <td>{finalCharges.totalGST}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Input, Select } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst BillSearchComp = (props) => {\r\n    const defaultSearch = \"patientId\";\r\n    const [filterValue, setfilterValue] = useState(defaultSearch);\r\n\r\n    function onSearch(value) {\r\n        props.onSearch(value, filterValue);\r\n    }\r\n    return (\r\n                <Input.Group compact>\r\n                    <Select defaultValue={defaultSearch} onSelect={setfilterValue}>\r\n                        <Option value=\"patientId\">Patient Id</Option>\r\n                        <Option value=\"billId\">Bill Id</Option>\r\n                        <Option value=\"receiptId\">Receipt Id</Option>\r\n                    </Select>\r\n                    <Input.Search onSearch={onSearch} style={{ width: '70%' }} placeholder=\"Search Bill by\" />\r\n                </Input.Group>);\r\n};\r\nexport default BillSearchComp;\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Button, InputNumber, Radio, Divider, Descriptions, Select, Badge, Table, Row, Col } from 'antd';\r\nconst { Option } = Select;\r\n\r\nconst FinalCharges = (props) => {\r\n  function onDiscountChange(value) {\r\n    props.onDiscountChange(value);\r\n  }\r\n  return (\r\n    <Form name=\"final_charges\">\r\n      <Row gutter={24}>\r\n        <Col span={8} key={1}>\r\n          <Form.Item label=\"Total Amount\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalAmount}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={2}>\r\n          <Form.Item label=\"Total discount(%)\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalDiscount}</span>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} key={3}>\r\n          <Form.Item label=\"Total GST\">\r\n            <span className=\"ant-form-text\">{props.finalCharges.totalGST}</span>\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>);\r\n};\r\nexport default FinalCharges;","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nconst rootURI = `${api.url}/HMServiceController/fetchBillDtails`;\r\nexport const searchBillDetails = (id, filterType) => {\r\n    let url = '';\r\n    if (filterType === 'patientId') {\r\n        url = `${rootURI}?patientId=` + id + '&billId=';\r\n    } else if (filterType === 'billId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    } else if (filterType === 'receiptId') {\r\n        url = `${rootURI}?billId=` + id + '&patientId=';\r\n    }\r\n    return axios\r\n        .get(url)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err.response;\r\n        });\r\n};\r\n\r\nexport const saveGenerateBill = (body) => {\r\n    return axios\r\n        .post(`${api.url}/HMServiceController/generateBill`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n","import { useState } from 'react';\r\nimport { saveGenerateBill } from '../queries';\r\n\r\nconst useSaveGenerateBill = () => {\r\n  const [responseObj, setResponseObj] = useState({});\r\n\r\n  const request = async (body) => {\r\n    const response = await saveGenerateBill(body);\r\n    if (response) {\r\n      if (response.response == \"success\") {\r\n        setResponseObj(response);\r\n      }\r\n    } else {\r\n      setResponseObj(null);\r\n    }\r\n  };\r\n\r\n  return [responseObj, request];\r\n};\r\n\r\nexport default useSaveGenerateBill;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const getBillDetails = (searchValue, searchBy) => {\r\n\r\n    let searchURL = \"\";\r\n\r\n    if (searchBy == \"patientId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?billId=&patientId=` + searchValue;\r\n    } else if (searchBy == \"billId\") {\r\n        searchURL = `${api.url}/HMServiceController/fetchBillDtails?patientId=&billId=` + searchValue;\r\n    }\r\n    return axios\r\n        .get(searchURL)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { Button, Col, Descriptions, Divider, Form, InputNumber, Switch, Input, notification, Radio, Row, Select, Table, Popconfirm, Modal } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useRef, useState, useEffect, useContext } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport PatientDetails from '../patientDetails';\r\nimport AddItem from './components/addItemModal';\r\nimport { BillPrint } from './components/billPrint';\r\nimport BillSearch from './components/billSearch';\r\nimport FinalCharges from './components/finalCharges';\r\nimport usePatientSearchbyId from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport useSaveGenerateBill from '../../state/billing/hooks/useGenerateBill';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport { getBillDetails } from './services';\r\n\r\nconst EditableContext = React.createContext();\r\nconst { Search } = Input;\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef();\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n        <div\r\n          className=\"editable-cell-value-wrap\"\r\n          style={{\r\n            paddingRight: 24,\r\n          }}\r\n          onClick={toggleEdit}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\nconst Billing = ({ location, history }) => {\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n  const queryParams = queryString.parse(location.search);\r\n  const components = {\r\n    body: {\r\n      row: EditableRow,\r\n      cell: EditableCell,\r\n    },\r\n  };\r\n  let columns = [\r\n    {\r\n      title: 'Item Name',\r\n      dataIndex: 'name',\r\n    },\r\n    {\r\n      title: 'Quantity',\r\n      dataIndex: 'quantity',\r\n      editable: \"true\",\r\n      width: '10%',\r\n    },\r\n    {\r\n      title: 'Amount',\r\n      dataIndex: 'amount',\r\n      sorter: {\r\n        compare: (a, b) => a.amount - b.amount,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'GST(CGST+SGST)',\r\n      dataIndex: 'gst',\r\n      editable: \"true\",\r\n      sorter: {\r\n        compare: (a, b) => a.gst - b.gst,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: 'Discount(%)',\r\n      dataIndex: 'discount',\r\n      editable: \"true\",\r\n      width: '10%',\r\n      sorter: {\r\n        compare: (a, b) => a.discount - b.discount,\r\n        multiple: 2,\r\n      },\r\n    },\r\n    {\r\n      title: 'Total',\r\n      dataIndex: 'total',\r\n      sorter: {\r\n        compare: (a, b) => a.total - b.total,\r\n        multiple: 1,\r\n      },\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) =>\r\n        <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n          <a> {record.type == \"pharmacy-purchase\" && queryParams.context == \"edit\" ? \"Return\" : \"Delete\"} </a>\r\n        </Popconfirm>\r\n    }\r\n  ];\r\n  columns = columns.map((col) => {\r\n    if (col.editable == \"false\") {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        editable: col.editable,\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        handleSave: handleSave,\r\n      }),\r\n    };\r\n  });\r\n  function handleSave(row) {\r\n    const newData = [...data];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    const finalCharges = getFinalCharges([row]);\r\n    row.total = finalCharges.discountedAmount + finalCharges.totalGST;\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    setData(newData);\r\n    calculateTotalCharges(newData);\r\n  };\r\n\r\n  let showSearch = \"\";\r\n  const defaultbillDetails = {\r\n    billId: '',\r\n    createdAt: (new Date()).toDateString() + ' ' + (new Date()).toLocaleTimeString()\r\n  };\r\n\r\n  const defaultFinalCharges = {\r\n    totalAmount: 0,\r\n    totalDiscount: 0,\r\n    totalGST: 0\r\n  };\r\n\r\n  const printBillButton = <Col className=\"gutter-row\" span={3}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={handlePrint}>Print</Button>\r\n  </Col>;\r\n  let generateBillButton = <Col className=\"gutter-row\" span={3}>\r\n    <Button style={{ width: '90%' }} type=\"primary\" onClick={generateBill}>Generate {queryParams.context == \"edit\" ? \"new \" : \"\"}bill</Button>\r\n  </Col>;\r\n  let printButton = \"\";\r\n  const [newPatientForm] = Form.useForm();\r\n  const [state, setState] = useState(\"initial\");\r\n  const [paymentMode, setPaymentMode] = useState(\"Cash\");\r\n  // const [billResponse, isLoading, setBillSearch] = useBillSearch();\r\n  const [patientDetails, setPatientDetails] = useState({});\r\n  const [newPatientSwitch, setNewPatientSwitch] = useState(false);\r\n  const [generateBillStatus, setGenerateBillStatus] = useSaveGenerateBill();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);;\r\n  const [billDetails, setBillDetails] = useState(defaultbillDetails);\r\n  const [finalCharges, setFinalCharges] = useState(defaultFinalCharges);\r\n  const [data, setData] = useState([]);\r\n  const [returnedItems, setReturnedItems] = useState([]);\r\n\r\n  let patientInfo = <div>\r\n    <Search placeholder=\"Search by Patient Id\" allowClear onSearch={patientSearch} style={{ width: '30%' }} />\r\n    <PatientDetails patientId={patientDetails.patientId} />\r\n  </div>;\r\n  // let billSearchComp = <BillSearch onSearch={onBillSearch} />;\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // calculateTotalCharges(mockData);\r\n    // setData(mockData);\r\n    if (queryParams.context == 'registration' && state == \"initial\") {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Registration',\r\n          quantity: 1,\r\n          type: 'registration',\r\n          amount: 50,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: 50,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'consulation' && state == \"initial\") {\r\n      const tempData = [\r\n        {\r\n          key: '1',\r\n          name: 'Consultation ' + '(' + (queryParams.doctorName) + ')',\r\n          quantity: 1,\r\n          type: 'consultation',\r\n          amount: queryParams.charges,\r\n          gst: 0,\r\n          discount: 0,\r\n          total: Number(queryParams.charges) + 0,\r\n        }];\r\n      setData(tempData);\r\n      calculateTotalCharges(tempData);\r\n      patientSearch(queryParams.patientId);\r\n    } else if (queryParams.context == 'edit') {\r\n      onBillSearch(queryParams.billId, \"billId\");\r\n    }\r\n\r\n\r\n    if (generateBillStatus.response == \"success\") {\r\n      notification[\"success\"]({\r\n        message: 'SUCCESS',\r\n        description: 'Bill Generated Successfully with id ' + generateBillStatus.billId,\r\n        duration: 3\r\n      });\r\n      setBillDetails({\r\n        billId: generateBillStatus.billId,\r\n        createdAt: (new Date()).toDateString()\r\n      });\r\n    }\r\n  }, [generateBillStatus]);\r\n  if (generateBillStatus.response == \"success\") {\r\n    generateBillButton = \"\";\r\n    printButton = printBillButton;\r\n  }\r\n\r\n  if (queryParams.context == \"edit\") {\r\n    printButton = printBillButton;\r\n  }\r\n  if (newPatientSwitch) {\r\n    patientInfo = <div>\r\n      <Divider>Patient Details</Divider>\r\n      <Form layout=\"inline\" form={newPatientForm}>\r\n        <Form.Item name=\"patientName\" label=\"Name\">\r\n          <Input placeholder=\"name\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"age\" label=\"Age\">\r\n          <InputNumber placeholder=\"age\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"contact\" label=\"Contact\">\r\n          <Input placeholder=\"phone number\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"referal doctor\" label=\"Referal doctor\">\r\n          <Input placeholder=\"doctor name\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>;\r\n  }\r\n  function getFinalCharges(dataList) {\r\n    const finalCharges = {\r\n      totalAmount: 0,\r\n      totalGST: 0,\r\n      totalDiscount: 0,\r\n      discountedAmount: 0\r\n    }\r\n\r\n    dataList.forEach(data => {\r\n      const amount = Number.parseInt(data.amount) * Number.parseInt(data.quantity);\r\n      const discountedAmount = Number.parseInt(amount) - ((Number.parseInt(data.discount) / 100) * Number.parseInt(amount));\r\n      finalCharges.totalAmount += Number.parseInt(amount);\r\n      finalCharges.totalDiscount += Number.parseInt(data.discount);\r\n      finalCharges.discountedAmount += discountedAmount;\r\n      finalCharges.totalGST += Number.parseInt(data.gst);\r\n    });\r\n    return finalCharges;\r\n  }\r\n  function onChange(pagination, filters, sorter, extra) {\r\n    console.log('params', pagination, filters, sorter, extra);\r\n  }\r\n\r\n  function onBillSearch(searchValue, searchFilter) {\r\n    getBillDetails(searchValue, searchFilter).then(data => {\r\n      if (data && data[0]) {\r\n        const billDetails = data[0];\r\n        setBillDetails({\r\n          billId: billDetails.billId,\r\n          createdAt: (new Date(billDetails.createdAt)).toDateString()\r\n        });\r\n        if (billDetails[\"patientId\"]) {\r\n          patientSearch(billDetails.patientId);\r\n        }\r\n        if (billDetails[\"billDetailList\"]) {\r\n\r\n          const tempData = billDetails[\"billDetailList\"].map((item, index) => {\r\n            return {\r\n              key: item.itemName + index,\r\n              id: item.id,\r\n              itemId: item.itemId,\r\n              name: item.itemName,\r\n              type: item.purchaseType,\r\n              billMapId: item.billMapId,\r\n              quantity: item.quantity,\r\n              amount: item.mrp,\r\n              gst: 0,\r\n              discount: item.concessionPercentage,\r\n              total: Number(item.mrp) - ((Number(item.concessionPercentage) / 100) * Number(item.mrp)),\r\n            }\r\n          });\r\n\r\n          setData(tempData);\r\n          calculateTotalCharges(tempData);\r\n        }\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  function patientSearch(patientId) {\r\n    getPatientById(patientId).then(patientDetails => {\r\n      setPatientDetails(patientDetails);\r\n    }).catch(err => {\r\n      notification[\"error\"]({\r\n        message: 'Error',\r\n        description: 'Error while searching patient with Id' + patientId,\r\n        duration: 3\r\n      });\r\n    });\r\n  }\r\n  function onItemAdded(itemFormValue) {\r\n    console.log(itemFormValue);\r\n    const newData = {\r\n      key: Math.random(),\r\n      name: itemFormValue.name,\r\n      itemId: itemFormValue.itemId,\r\n      quantity: itemFormValue.quantity,\r\n      amount: itemFormValue.amount,\r\n      type: itemFormValue.itemType,\r\n      gst: 0,\r\n      discount: 0,\r\n      total: itemFormValue.quantity * itemFormValue.amount,\r\n    }\r\n    const tempDataList = [...data, newData];\r\n\r\n    setData(tempDataList);\r\n    calculateTotalCharges(tempDataList);\r\n    setIsModalVisible(false);\r\n  }\r\n  function handleDelete(key) {\r\n    let returnedItems = [];\r\n    if (queryParams.context == \"edit\") {\r\n      data.forEach((item) => {\r\n        if (item.key == key && item.type == \"pharmacy-purchase\") {\r\n          returnedItems.push(item);\r\n        }\r\n      });\r\n      setReturnedItems(returnedItems);\r\n    }\r\n    const dataSource = data.filter((item) => item.key !== key);\r\n    calculateTotalCharges(dataSource);\r\n    setData(dataSource);\r\n  };\r\n\r\n  function calculateTotalCharges(tempDataList) {\r\n    const finalCharges = getFinalCharges(tempDataList);\r\n    console.log(finalCharges);\r\n    setFinalCharges({\r\n      totalAmount: finalCharges.discountedAmount + finalCharges.totalGST,\r\n      totalDiscount: (finalCharges.totalAmount - finalCharges.discountedAmount) / finalCharges.totalAmount * 100,\r\n      totalGST: finalCharges.totalGST\r\n    });\r\n  }\r\n\r\n  function onDiscountChange(discountValue) {\r\n    console.log(\"Discount changed\", discountValue);\r\n  }\r\n\r\n  function paymentMethod(e) {\r\n    setPaymentMode(e.target.value);\r\n  }\r\n\r\n  function generateBill() {\r\n    const body = {\r\n      billId: null,\r\n      billType: \"\",\r\n      createdAt: new Date(),\r\n      paymentStatus: \"paid\",\r\n      paymentMode: paymentMode,\r\n      patientId: patientDetails.patientId,\r\n      totalCost: finalCharges.totalAmount,\r\n      totalDiscount: finalCharges.totalDiscount,\r\n      totalGST: finalCharges.totalGST,\r\n      billDetailList: []\r\n    };\r\n    data.forEach(item => {\r\n      const billItem = {\r\n        id: null,\r\n        itemName: item.name,\r\n        itemId: item.itemId,\r\n        billMapId: null,\r\n        cost: item.total,\r\n        concessionPercentage: item.discount,\r\n        gstPercentage: item.gst,\r\n        mrp: item.amount,\r\n        concessionType: \"discount\",\r\n        quantity: item.quantity,\r\n        purchaseType: (item.type == \"medicine\" ? \"pharmacy-purchase\" : item.type)\r\n      };\r\n      body.billDetailList.push(billItem);\r\n    });\r\n    returnedItems.forEach(item => {\r\n      const billItem = {\r\n        id: null,\r\n        itemName: item.name,\r\n        itemId: item.itemId,\r\n        billMapId: null,\r\n        cost: item.total,\r\n        concessionPercentage: item.discount,\r\n        gstPercentage: item.gst,\r\n        mrp: item.amount,\r\n        concessionType: \"discount\",\r\n        quantity: item.quantity,\r\n        purchaseType: (item.type == \"pharmacy-purchase\" ? \"pharmacy-return\" : item.type)\r\n      };\r\n      body.billDetailList.push(billItem);\r\n    });\r\n    console.log(\"body\", body);\r\n    // setGenerateBillStatus(body);\r\n    // setState(\"billGenerated\");\r\n    // if (newPatientSwitch) {\r\n    //   const newPatientFormValues = newPatientForm.getFieldsValue();\r\n    //   setPatientDetails({\r\n    //     patientName: newPatientFormValues.patientName,\r\n    //     patientId: \"N/A\",\r\n    //     age: newPatientFormValues.age,\r\n    //   });\r\n    // }\r\n  }\r\n  function onNewPatientSwitchChange(checked) {\r\n    setNewPatientSwitch(checked);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal title=\"Add Item\" visible={isModalVisible} footer={null} onOk={handleOk} onCancel={handleCancel}>\r\n        <AddItem onItemAdded={onItemAdded} />\r\n      </Modal>\r\n      New Patient <Switch onChange={onNewPatientSwitchChange} /> <br /> <br />\r\n      {patientInfo}\r\n      <div style={{ display: 'none' }}>\r\n        <BillPrint ref={componentRef} itemList={data} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} />\r\n      </div>\r\n      <Divider>Bill Details</Divider>\r\n      <Descriptions>\r\n        <Descriptions.Item label=\"Bill Id\">{billDetails.billId}</Descriptions.Item>\r\n        {/* <Descriptions.Item label=\"Receipt Id\">{queryParams.receiptId}</Descriptions.Item> */}\r\n        <Descriptions.Item label=\"Date and time\">{billDetails.createdAt}</Descriptions.Item>\r\n      </Descriptions>\r\n      <Button\r\n        onClick={showModal}\r\n        type=\"primary\"\r\n        style={{\r\n          marginBottom: 16,\r\n          display: (queryParams.context == \"edit\" ? \"none\" : \"\")\r\n        }}\r\n      >\r\n        Add Item\r\n        </Button>\r\n      <Table columns={columns} components={components} dataSource={data} onChange={onChange} rowClassName={() => 'editable-row'} />\r\n\r\n      <FinalCharges finalCharges={finalCharges} onDiscountChange={onDiscountChange} />\r\n      <Divider>Payment</Divider>\r\n      <Radio.Group onChange={paymentMethod} value={paymentMode}>\r\n        <Radio value=\"Cash\">Cash</Radio>\r\n        <Radio value=\"Card\">Card</Radio>\r\n        <Radio value=\"UPI\">UPI</Radio>\r\n        <Radio value=\"Paytm\">Paytm</Radio>\r\n      </Radio.Group>\r\n      <br /><br /><br />\r\n      <Row gutter={24}>\r\n        {generateBillButton}\r\n        {/* <Col className=\"gutter-row\" span={3}>\r\n          <Button type=\"primary\">Cancel</Button>\r\n        </Col> */}\r\n        {printButton}\r\n\r\n        <Col className=\"gutter-row\" span={3}>\r\n          <Button style={{ width: '90%' }} type=\"primary\" onClick={() => history.push({ pathname: '/home/appointment', search: '?patientId='.concat(queryParams.patientId) })}>Go To Appointment</Button>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Billing;","import React, { useEffect } from 'react';\r\nimport BillSearch from '../billing/components/billSearch';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, AutoComplete, Badge, Descriptions, Row, Col, Button, Space } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UserOutlined, DownloadOutlined, OrderedListOutlined } from '@ant-design/icons';\r\nconst renderTitle = (title: string) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title: string, count: number) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\nconst options = [\r\n    {\r\n        label: renderTitle('Libraries'),\r\n        options: [renderItem('AntDesign', 10000), renderItem('AntDesign UI', 10600)],\r\n    },\r\n    {\r\n        label: renderTitle('Solutions'),\r\n        options: [renderItem('AntDesign UI FAQ', 60100), renderItem('AntDesign FAQ', 30010)],\r\n    },\r\n    {\r\n        label: renderTitle('Articles'),\r\n        options: [renderItem('AntDesign design language', 100000)],\r\n    },\r\n];\r\n\r\nconst Canteen = () => {\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <BillSearch />\r\n                </Col>\r\n                <Col span={6}>\r\n                    <Button type=\"dashed\" icon={<PlusOutlined />}>\r\n                        New\r\n                    </Button>\r\n                    <Button type=\"dashed\" style={{ marginLeft: '5px' }} icon={<OrderedListOutlined />}>\r\n                        <Link to=\"/home/canteenStock\">View Stock</Link>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Descriptions title=\"Patient Info\">\r\n                <Descriptions.Item label=\"Patient Name\">Rishiraj</Descriptions.Item>\r\n                <Descriptions.Item label=\"Phone\">919829128</Descriptions.Item>\r\n                <Descriptions.Item label=\"Department\">Ward 1</Descriptions.Item>\r\n                <Descriptions.Item label=\"Status\" span={3}>\r\n                    <Badge status=\"warning\" text=\"pending\" />\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <br /><br />\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'itemName']}\r\n                                            fieldKey={[field.fieldKey, 'itemName']}\r\n                                            rules={[{ required: true, message: 'Missing Item name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search placeholder=\"Search item\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <Input placeholder=\"Price\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'gst']}\r\n                                            fieldKey={[field.fieldKey, 'gst']}\r\n                                        >\r\n                                            <Input placeholder=\"gst\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n            <Descriptions title=\"\">\r\n                <Descriptions.Item label=\"Total Amount\">100</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total GST\">15</Descriptions.Item>\r\n                <Descriptions.Item label=\"Total discount\">0</Descriptions.Item>\r\n            </Descriptions>\r\n            <br /><br />\r\n            <Form.Item>\r\n                <Row>\r\n                    <Col span={12} offset={11}>\r\n                        <Button type=\"primary\" shape=\"round\" icon={<DownloadOutlined />} size='large'>Print</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Pay Now</Button>\r\n                        <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large'>Add to Bill</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form.Item>\r\n        </>\r\n\r\n    );\r\n};\r\nexport default Canteen;\r\n","import { PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Divider, Form, Input, InputNumber, Select, Table } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { Option } = Select;\r\nconst defaultCategories = ['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian'];\r\nconst columns = [\r\n    {\r\n        title: 'Item Name',\r\n        dataIndex: 'itemName',\r\n        defaultSortOrder: 'descend',\r\n        sorter: (a, b) => a.itemName - b.itemName,\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price'\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        filters: defaultCategories.map(cat => {\r\n            return {\r\n                text: cat,\r\n                value: cat,\r\n            }\r\n        }),\r\n        onFilter: (value, record) => record.category.indexOf(value) === 0,\r\n        sorter: (a, b) => a.category.length - b.category.length,\r\n        sortDirections: ['descend'],\r\n    }\r\n];\r\n\r\nconst CanteenStock = () => {\r\n    let index = 0;\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    const [, forceUpdate] = useState();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Meals', 'Drinks', 'Snacks', 'Chinese', 'South Indian']);\r\n\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const onFinish = values => {\r\n        console.log('Finish:', values);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"itemName\"\r\n                    rules={[{ required: true, message: 'Please enter item name!' }]}\r\n                >\r\n                    <Input placeholder=\"Item Name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please enter a price!' }]}\r\n                >\r\n                    <InputNumber placeholder=\"Price\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"Category\"\r\n                >\r\n                    <Select\r\n                        style={{ width: 240 }}\r\n                        placeholder=\"Select category\"\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                <Divider style={{ margin: '4px 0' }} />\r\n                                <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                    <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                    <a\r\n                                        style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                        onClick={addItem}\r\n                                    >\r\n                                        <PlusOutlined /> Add item\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {items.map(item => (\r\n                            <Option key={item}>{item}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Item\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default CanteenStock;\r\n","import { useState } from 'react';\r\nimport { getAllPatients } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst usePatientSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllPatients();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientSearch;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByDoctorId } from '../queries';\r\n\r\nconst useGetAppointmentByDoctorId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (doctorId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByDoctorId(doctorId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByDoctorId;\r\n","import { useState } from 'react';\r\nimport { getAppointmentByPatientId } from '../queries';\r\n\r\nconst useGetAppointmentByPatientId = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientId) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAppointmentByPatientId(patientId);\r\n\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useGetAppointmentByPatientId;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, DatePicker, Button, TimePicker, Select, Space, Input } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport useGetAllDoctors from '../../state/patientSearch/hooks/useGetAllDoctors';\r\nimport useGetAppointmentByDoctorId from '../../state/appointment/hooks/useGetAppointmentsByDoctorId';\r\nimport useGetAppointmentByPatientId from '../../state/appointment/hooks/useGetAppointmentByPatientId';\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\nfunction PickerWithType({ type, onChange }) {\r\n    if (type === 'time') return <TimePicker onChange={onChange} />;\r\n    if (type === 'date') return <DatePicker onChange={onChange} />;\r\n    return <DatePicker picker={type} onChange={onChange} />;\r\n}\r\n\r\nfunction DoctorAppointment({ location, history }) {\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Patient Name',\r\n            dataIndex: 'patientName',\r\n            key: 'patientName',\r\n            render: text => <span>{text}</span>,\r\n        },\r\n        {\r\n            title: 'Time Slot',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color=\"green\" key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Registered',\r\n                    value: 'registered',\r\n                },\r\n                {\r\n                    text: 'Appointment done',\r\n                    value: 'done',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/prescription', search: '?patientId=' + record.patientId + '&patientName=' + record.patientName + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        Proceed\r\n                </Button>\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>\r\n                        View\r\n                </Button>\r\n                </Space>\r\n            ),\r\n        }\r\n    ];\r\n    let doctorsList = [];\r\n    const [type, setType] = useState('time');\r\n    const [patientAppointments, isLoading2, setAppointmentByPatientId] = useGetAppointmentByPatientId();\r\n    // const [selectedDoctor, setSelectedDoctor] = useState(\"initial\");\r\n    const [filter, setFilter] = useState(\"none\");\r\n    const [doctors, isLoading, setRequest] = useGetAllDoctors();\r\n    const [appointments, isLoading1, setAppointmentByDoctorId] = useGetAppointmentByDoctorId();\r\n    let data = [];\r\n    useEffect(() => {\r\n        setRequest();\r\n    }, []);\r\n\r\n    if (doctors.length > 0) {\r\n        doctorsList = doctors.map(doctor => <Option key={doctor.doctorId} >{doctor.doctorName}</Option>);\r\n    }\r\n    console.log(\"asadada\", appointments);\r\n    if (filter == \"doctor\" && appointments.length > 0) {\r\n        data = appointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['registered'])\r\n            };\r\n        });\r\n    }\r\n    if (filter == \"patient\" && patientAppointments.length > 0) {\r\n        data = patientAppointments.map(appointment => {\r\n            return {\r\n                key: appointment.appointmentId,\r\n                patientName: appointment.patientName,\r\n                appointmentId: appointment.appointmentId,\r\n                time: new Date(appointment.appointmentDate).toDateString(),\r\n                doctorId: appointment.doctorId,\r\n                patientId: appointment.patientId,\r\n                status: (appointment.status ? [appointment.status] : ['registered'])\r\n            };\r\n        });\r\n    }\r\n\r\n    function handleChangeOfDoctor(value) {\r\n        setAppointmentByDoctorId(value);\r\n        setFilter(\"doctor\");\r\n    }\r\n\r\n    const onPatientSearch = value => {\r\n        setAppointmentByPatientId(value);\r\n        setFilter(\"patient\");\r\n    };\r\n    return (\r\n        <>\r\n            <Space>\r\n                <Select\r\n                    onChange={handleChangeOfDoctor}\r\n                    showSearch\r\n                    placeholder=\"Select Doctor\" style={{ width: 300 }}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }>\r\n                    {doctorsList}\r\n                </Select>\r\n                <Select value={type} onChange={setType}>\r\n                    <Option value=\"time\">Time</Option>\r\n                    <Option value=\"date\">Date</Option>\r\n                    <Option value=\"week\">Week</Option>\r\n                    <Option value=\"month\">Month</Option>\r\n                    <Option value=\"quarter\">Quarter</Option>\r\n                    <Option value=\"year\">Year</Option>\r\n                </Select>\r\n                <PickerWithType type={type} onChange={value => console.log(value)} />\r\n                <Search\r\n                    placeholder=\"Search Patient By Id\"\r\n                    allowClear\r\n                    enterButton=\"Search\"\r\n                    size=\"medium\"\r\n                    style={{ width: '100%', marginLeft: '200px' }}\r\n                    onSearch={onPatientSearch}\r\n                />\r\n            </Space>\r\n            <br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DoctorAppointment;","import { useState } from 'react';\r\nimport { addMedicine } from '../queries';\r\n\r\nconst useAddMedicine = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addMedicine(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddMedicine;\r\n","import { useState } from 'react';\r\nimport { getAllMedicines } from '../queries';\r\n\r\nconst useMedicineSearch = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getAllMedicines();\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default useMedicineSearch;","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\n\r\nconst AddMedicine = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddMedicine();\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Medicine added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    console.log(\"medicines list\", medicines);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"medicineName\": form.name,\r\n            \"medicineType\": form.type,\r\n            \"strength\": form.strength,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Medicine Name',\r\n            dataIndex: 'medicineName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Strength',\r\n            dataIndex: 'strength'\r\n        },\r\n        {\r\n            title: 'Medicine Type',\r\n            dataIndex: 'medicineType',\r\n            filters: [\r\n                {\r\n                    text: 'Aspirin',\r\n                    value: 'aspirin',\r\n                },\r\n                {\r\n                    text: 'Painkillers',\r\n                    value: 'painkiller',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.medicineType.indexOf(value) === 0,\r\n            sorter: (a, b) => a.medicineType.length - b.medicineType.length,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                medicineName: medicine.medicineName,\r\n                price: medicine.price,\r\n                strength: medicine.strength,\r\n                medicineType: medicine.medicineType,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please medicine name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"type\"\r\n                    rules={[{ required: true, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Medicine type\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"strength\"\r\n                    rules={[{ required: true, message: 'Please input strength!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Strength\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Medicine\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddMedicine;","import { useState } from 'react';\r\nimport { addMedicine, addTest } from '../queries';\r\n\r\nconst useAddTest = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await addTest(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddTest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, InputNumber, Table, notification } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport useAddTest from '../../../state/addMedicine/hooks/useAddTest';\r\nimport Spinner from '../../../components/spinner';\r\nimport useSearchTest from '../../../state/addMedicine/hooks/useSearchTest';\r\n\r\nconst AddTest = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddTest();\r\n    const [medicines, isLoadings, setMedicineSearch] = useSearchTest();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Test added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (medicines.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = form => {\r\n        const body = {\r\n            \"testName\": form.name,\r\n            \"price\": form.price,\r\n        };\r\n        setRequest(body);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Test Name',\r\n            dataIndex: 'testName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.testName - b.testName,\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price'\r\n        }\r\n    ];\r\n    if (medicines.length > 0) {\r\n        medicines.forEach((medicine, index) => {\r\n            data.push({\r\n                key: index,\r\n                testName: medicine.testName,\r\n                price: medicine.price\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please select test name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Test name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    rules={[{ required: true, message: 'Please input price!' }]}\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Test\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddTest;","import { Button, Col, Form, Row, Space, Table, Tag } from 'antd';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nconst columns = [\r\n    {\r\n        title: 'Package Name',\r\n        dataIndex: 'packageName',\r\n        key: 'packageName',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Package End Date',\r\n        dataIndex: 'packageEndDate',\r\n        key: 'packageEndDate',\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '2',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n    {\r\n        key: '3',\r\n        packageName: 'value',\r\n        packageEndDate: 'value',\r\n        price: 'value',\r\n        status: ['Active']\r\n    },\r\n];\r\n\r\nconst Package = () => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            <Link to=\"/home/newPackage\">Create New</Link>\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Package;\r\n","import { useState } from 'react';\r\nimport { getPatientByName } from '../queries';\r\n\r\nconst usePatientByName = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  const request = async (patientName) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPatientByName(patientName);\r\n    if (response) {\r\n        setPatients(response);\r\n    } else {\r\n      // const err = [];\r\n      setPatients([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [patients, isLoading, request];\r\n};\r\n\r\nexport default usePatientByName;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Input, Space, Button, Modal, Descriptions, Select } from 'antd';\r\nimport usePatientSearch from '../../state/patientSearch/hooks/usePatientSearch';\r\nimport Spinner from '../../components/spinner';\r\nimport usePatientById from '../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../patientDetails';\r\nimport usePatientByName from '../../state/patientSearch/hooks/usePatientSearchByName';\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nconst PatientSearch = () => {\r\n    const [filterValue, setfilterValue] = useState(\"patientName\");\r\n    const [visible, setVisible] = useState(false);\r\n    const [name, setName] = useState([]);\r\n    const [showPatient, setShowPatient] = useState(\"all\");\r\n    const [patients, isLoading, setRequest] = usePatientSearch();\r\n    const [patientDetails, isLoading1, setPatientSearchbyId] = usePatientById();\r\n    const [patientDetailsByName, isLoading2, setPatientSearchbyName] = usePatientByName();\r\n    let data = [];\r\n\r\n    useEffect(() => {\r\n        if (showPatient === \"all\") {\r\n            setRequest();\r\n        }\r\n    }, [showPatient]);\r\n\r\n    function onPatientSearch(searchValue) {\r\n        console.log(searchValue);\r\n\r\n        if (searchValue == '') {\r\n            setRequest();\r\n            setShowPatient(\"all\");\r\n        } else if (filterValue == \"patientId\") {\r\n            setPatientSearchbyId(searchValue);\r\n            setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"patientName\") {\r\n            setPatientSearchbyName(searchValue);\r\n            setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    if (showPatient == \"patientId\" && patientDetails != null) {\r\n        const row = [{\r\n            key: patientDetails.patientId,\r\n            name: patientDetails.patientName,\r\n            age: patientDetails.age,\r\n            phone: patientDetails.contactNum,\r\n            address: patientDetails.street,\r\n            status: ['registered']\r\n        }];\r\n        data = row;\r\n    }\r\n\r\n    if (showPatient == \"patientName\" && patientDetailsByName != null) {\r\n        data = patientDetailsByName.map((patient, index) => {\r\n            return {\r\n                key: patient.patientId,\r\n                name: patient.patientName,\r\n                age: patient.age,\r\n                phone: patient.contactNum,\r\n                address: patient.street,\r\n                status: ['registered'],\r\n            };\r\n        });\r\n    }\r\n    if (showPatient === \"all\" && patients.length > 0) {\r\n        data = patients.map((patient, index) => {\r\n            return {\r\n                key: patient.patientId,\r\n                name: patient.patientName,\r\n                age: patient.age,\r\n                phone: patient.contactNum,\r\n                address: patient.street,\r\n                status: ['registered'],\r\n            };\r\n        });\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: text => <span>{text}</span>,\r\n            sorter: (a, b) => a.name.length - b.name.length,\r\n            sortDirections: ['descend', 'ascend'],\r\n        },\r\n        {\r\n            title: 'Age',\r\n            dataIndex: 'age',\r\n            key: 'age',\r\n        },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        let color = tag.length > 5 ? 'geekblue' : 'green';\r\n                        if (tag === 'loser') {\r\n                            color = 'volcano';\r\n                        }\r\n                        return (\r\n                            <Tag color={color} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Registered',\r\n                    value: 'registered',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'discharged',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" onClick={() => {\r\n                        console.log(\"abhi nhiiiiiiiiiiii\");\r\n                        setVisible(true);\r\n                        setName(searches => [record]);\r\n                    }}>\r\n                        View records\r\n                    </Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n\r\n    const columnsModal = [\r\n        { title: 'Appointment ID', dataIndex: 'appointmentid', key: 'appointmentid' },\r\n        { title: 'Appointment Date', dataIndex: 'appointmentdate', key: 'appointmentid' },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: '',\r\n            key: 'x',\r\n            render: () => <span>View</span>,\r\n        },\r\n    ];\r\n\r\n    const dataModal = [\r\n        {\r\n            key: 1,\r\n            appointmentid: '3723823d',\r\n            appointmentdate: \"15 Aug 2020\",\r\n            description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n        },\r\n        {\r\n            key: 2,\r\n            appointmentid: '3723823d',\r\n            appointmentdate: \"23 Aug 2020\",\r\n            description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n        },\r\n        {\r\n            key: 3,\r\n            appointmentid: '3723823d',\r\n            appointmentdate: \"30 Aug 2020\",\r\n            description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n        },\r\n        {\r\n            key: 4,\r\n            appointmentid: '3723823d',\r\n            appointmentdate: \"14 Sep 2020\",\r\n            description: \"The Patient was diagnosed with Viral fever and was discharged after carrying out the tests.\"\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"patientName\">Patient Name</Option>\r\n                    <Option value=\"patientId\">Patient Id</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onPatientSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n            <Modal\r\n                title=\"Patient Details\"\r\n                centered\r\n                visible={visible}\r\n                onOk={() => setVisible(false)}\r\n                onCancel={() => setVisible(false)}\r\n                width={1000}\r\n            >\r\n                {name.map((record, index) =>\r\n                    <>\r\n                        <Descriptions key={index}>\r\n                            <Descriptions.Item label=\"Name\">{record.name}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"Phone\">{record.phone}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"Age\">{record.age}</Descriptions.Item>\r\n                            <Descriptions.Item label=\"Address\">\r\n                                {record.address}\r\n                            </Descriptions.Item>\r\n                        </Descriptions>\r\n                        <Table\r\n                            columns={columnsModal}\r\n                            expandable={{\r\n                                expandedRowRender: record => <p style={{ margin: 0 }}>{record.description}</p>,\r\n                                rowExpandable: record => record.appointmentdate !== '14 Aug',\r\n                            }}\r\n                            dataSource={dataModal}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PatientSearch;","import React, { useEffect } from 'react';\r\n\r\nconst Pharmacy = () => {\r\n    return (\r\n        <>\r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pharmacy;\r\n","import axios from 'axios';\r\nimport api from '../../utils/services';\r\n\r\nexport const savePrescription = (body) => {\r\n    return axios\r\n        .post(`${api.url}/doctorService/savePrescription`, body)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};\r\n\r\nexport const getPrescriptionByAppointmentId = (appointmentId) => {\r\n    return axios\r\n        .get(`${api.url}/doctorService/getPrescriptionDetails?appointmentId=` + appointmentId)\r\n        .then(res => res.data)\r\n        .catch(err => {\r\n            return err;\r\n        });\r\n};","import { useState } from 'react';\r\nimport { savePrescription } from '../queries';\r\n// import { listProducts } from '../actions';\r\n\r\nconst useSavePrescription = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState({});\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n\r\n    const response = await savePrescription(body);\r\n\r\n    setStatus(response);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useSavePrescription;\r\n","import { PrinterOutlined, MinusCircleOutlined, PlusOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space } from 'antd';\r\nimport queryString from 'query-string';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useMedicineSearch from '../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useSearchTest from '../../state/addMedicine/hooks/useSearchTest';\r\nimport useSavePrescription from '../../state/prescription/hooks/useSavePrescription';\r\nimport PatientDetails from '../patientDetails';\r\nimport '../prescription/prescription.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst renderTitle = (title) => {\r\n    return (\r\n        <span>\r\n            {title}\r\n            <a\r\n                style={{ float: 'right' }}\r\n                href=\"https://www.google.com/search?q=antd\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                more\r\n        </a>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst renderItem = (title, count) => {\r\n    return {\r\n        value: title,\r\n        label: (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                {title}\r\n                <span>\r\n                    <UserOutlined /> {count}\r\n                </span>\r\n            </div>\r\n        ),\r\n    };\r\n};\r\n\r\n\r\n\r\nconst Prescription = ({ location, history }) => {\r\n    let options = [];\r\n    const optionsTests = [];\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [medicineForm] = Form.useForm();\r\n    const [vitalsForm] = Form.useForm();\r\n    const [adviceForm] = Form.useForm();\r\n\r\n    const [medicines, isLoadings, setMedicineSearch] = useMedicineSearch();\r\n    const [response, isLoading1, setSavePrescription] = useSavePrescription();\r\n    const [tests, isLoading, setTestSearch] = useSearchTest();\r\n    // const [tests, isLoading, setTestSearch] = usePre();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (response.status == \"SUCCESS\") {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient prescription has been generated successfully',\r\n                duration: 3\r\n            });\r\n        } else if (response.status == 500) {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error saving the prescription, please check with admin',\r\n                duration: 3\r\n            });\r\n        }\r\n    }, [response]);\r\n    const onFinish = values => {\r\n        console.log('Received values of form:', values);\r\n        console.log('Dawaiyaan', form.getFieldsValue());\r\n        console.log('tests:', medicineForm.getFieldsValue());\r\n        console.log('vitals:', vitalsForm.getFieldsValue());\r\n        const medicineList = medicineForm.getFieldsValue().users;\r\n        const testList = form.getFieldsValue().users;\r\n        const patientVitals = vitalsForm.getFieldsValue();\r\n        const body = {\r\n            appointmentDto: {\r\n                appointmentId: queryParams.appointmentId,\r\n                patientId: queryParams.patientId,\r\n                patientName: queryParams.patientName,\r\n                doctorId: queryParams.doctorId,\r\n                height: patientVitals.height,\r\n                weight: patientVitals.weight,\r\n                Bp: patientVitals.bp,\r\n                temprature: patientVitals.temparature,\r\n                advise: adviceForm.getFieldsValue().advice,\r\n                status: \"done\"\r\n            },\r\n            prescribedMedsDtoList: null,\r\n            prescribedTestingDtoList: null\r\n        };\r\n\r\n        if (medicineList != null && medicineList.length > 0) {\r\n            body.prescribedMedsDtoList = medicineList.map(medicine => {\r\n                return { medName: medicine.medicineName, days: medicine.numberOfDays, dosage: medicine.dosage, comment: medicine.comments };\r\n            });\r\n        }\r\n\r\n        if (testList != null && testList.length > 0) {\r\n            body.prescribedTestingDtoList = testList.map(test => {\r\n                return {\r\n                    testName: test.testName,\r\n                    dateOfBooking: test.date,\r\n                    comment: test.comments\r\n                };\r\n            });\r\n        }\r\n        setSavePrescription(body);\r\n        setSubmitted(true);\r\n    };\r\n    const handleSearch = (value) => {\r\n        setMedicineSearch();\r\n    };\r\n\r\n    const handleTestSearch = (value) => {\r\n        setTestSearch();\r\n    };\r\n\r\n    if (tests.length > 0) {\r\n        tests.forEach(test => {\r\n            optionsTests.push({ value: test.testName });\r\n        });\r\n    }\r\n\r\n    if (medicines.length > 0) {\r\n        var map = new Map();\r\n\r\n        medicines.forEach(medicine => {\r\n            if (map.has(medicine.medicineType)) {\r\n                map.set(medicine.medicineType, [...map.get(medicine.medicineType), medicine.medicineName]);\r\n            } else {\r\n                map.set(medicine.medicineType, [medicine.medicineName])\r\n            }\r\n        });\r\n        console.log(map);\r\n        for (let [key, value] of map) {\r\n            console.log(key + \" = \" + value);\r\n            options.push({\r\n                label: renderTitle(key),\r\n                options: value.map(val => renderItem(val, 100)),\r\n            });\r\n        }\r\n    }\r\n    let formActions = <Button size=\"large\" type=\"primary\">Submit</Button>;\r\n    if (submitted && response.status != 500) {\r\n        formActions = (<><Button type=\"primary\" shape=\"round\" onClick={() => {\r\n            history.push({ pathname: '/home/viewPrescription', search: '?patientId=' + queryParams.patientId + '&doctorId=' + queryParams.doctorId + '&appointmentId=' + queryParams.appointmentId });\r\n        }} icon={<PrinterOutlined />} size='large'>Print</Button>\r\n            <Button style={{ marginLeft: '10px' }} type=\"primary\" shape=\"round\" size='large' onClick={value => history.push({ pathname: '/home/doctorAppointment' })}>Go to My Appoinments</Button></>);\r\n    }\r\n    return (\r\n        <>\r\n            <PatientDetails patientId={queryParams.patientId} />\r\n            <br></br>\r\n            <Divider>Patient Vitals</Divider>\r\n\r\n            <Form\r\n                form={vitalsForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"BP\" name=\"bp\">\r\n                            <InputNumber name=\"bp\" style={{ width: '90%' }} placeholder=\"Blood pressure\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Temparature\" name=\"temparature\">\r\n                            <InputNumber name=\"temparature\" style={{ width: '90%' }} placeholder=\"Temp In degrees Celsius\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Height\" name=\"height\">\r\n                            <InputNumber name=\"height\" style={{ width: '90%' }} placeholder=\"Height in feet\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item label=\"Weight\" name=\"weight\">\r\n                            <Input name=\"weight\" style={{ width: '90%' }} placeholder=\"Weight in (kgs)\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </Form>\r\n            <Divider>Prescribe Medicines</Divider>\r\n            {/* <PrescribeMedicine /> */}\r\n\r\n            <Form name=\"dynamic_form_nest_item\" form={medicineForm} onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map((field, index) => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'medicineName']}\r\n                                            fieldKey={[field.fieldKey, 'medicineName']}\r\n                                            rules={[{ required: true, message: 'Missing Medicine name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleSearch}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Medicine\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'dosage']}\r\n                                            fieldKey={[field.fieldKey, 'dosage']}\r\n                                            rules={[{ required: true, message: 'Missing Dosage' }]}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Dosage per day (M-A-N)\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">1-0-0</Option>\r\n                                                <Option value=\"1-1-0\">1-1-0</Option>\r\n                                                <Option value=\"1-1-1\">1-1-1</Option>\r\n                                                <Option value=\"0-0-1\">0-0-1</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'numberOfDays']}\r\n                                            fieldKey={[field.fieldKey, 'numberOfDays']}\r\n                                            rules={[{ required: true, message: 'Missing Number of days' }]}\r\n                                        >\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Medicines\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n                {/* <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item> */}\r\n            </Form>\r\n\r\n            <br></br>\r\n            <Divider>Prescribe Tests</Divider>\r\n            <Form name=\"dynamic_form_nest_item2\" form={form} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'testName']}\r\n                                            fieldKey={[field.fieldKey, 'testName']}\r\n                                            rules={[{ required: true, message: 'Missing test name' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={handleTestSearch}\r\n                                                style={{ width: 200 }}\r\n                                                options={optionsTests}\r\n                                                placeholder=\"Type test name\"\r\n                                                filterOption={(inputValue, option) =>\r\n                                                    option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                                                }\r\n                                            />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'date']}\r\n                                            fieldKey={[field.fieldKey, 'date']}\r\n                                            rules={[{ required: false }]}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'comments']}\r\n                                            fieldKey={[field.fieldKey, 'comments']}\r\n                                        >\r\n                                            <Input placeholder=\"Comments\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Tests\r\n                                   </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n\r\n            </Form>\r\n\r\n            <Form\r\n                form={adviceForm}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={20}>\r\n                        <Form.Item name='advice' label=\"Summary\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <Row>\r\n                <Col span={12} onClick={onFinish} offset={11}>\r\n                    {formActions}\r\n                </Col>\r\n            </Row>\r\n        </>);\r\n};\r\n\r\nexport default Prescription;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, Select, notification } from 'antd';\r\nimport useRegistration from '../../state/registration/hooks/useRegistration';\r\nimport Spinner from '../../components/spinner';\r\nimport { registration } from '../../state/registration/queries';\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst PhonePrefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select defaultValue=\"91\" style={{ width: 70 }}>\r\n            <Option value=\"91\">+91</Option>\r\n            <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\n\r\nconst Registration = ({ location, history }) => {\r\n    const onFinish = formData => {\r\n\r\n        const form = formData.user;\r\n        const body = {\r\n            \"patientName\": form.name,\r\n            \"age\": form.age,\r\n            \"contactNum\": form.phone,\r\n            \"altContactNum\": form.alternatecontact,\r\n            \"street\": form.address,\r\n            \"state\": form.state,\r\n            \"country\": form.country,\r\n            \"visitType\": form.visit\r\n        };\r\n        registration(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'The patient has been registered successfully',\r\n                duration: 3\r\n            });\r\n            history.push({ pathname: '/home/billing', search: '?patientId=' + data.patientId + '&receiptId=' + data.recieptId + '&context=registration' });\r\n        }).catch(errr => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: 'There was some error in registration',\r\n                duration: 3\r\n            });\r\n\r\n        });\r\n        // setRequest(body);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={['user', 'name']} label=\"Name\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'gender']} label=\"Gender\" rules={[{ required: true }]}>\r\n                    <Select\r\n                        placeholder=\"Select Gender\"\r\n                        allowClear>\r\n                        <Option value=\"male\">male</Option>\r\n                        <Option value=\"female\">female</Option>\r\n                        <Option value=\"other\">other</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'email']} label=\"Email\" rules={[{ type: 'email' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'age']} label=\"Age\" rules={[{ type: 'number', min: 0, max: 99 }]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'phone']} label=\"Phone Number\" rules={[{ required: true, message: 'Please input your phone number!' }]}>\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'alternatecontact']} label=\"Alternate Contact Number\">\r\n                    <Input addonBefore={PhonePrefixSelector} style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'address']} label=\"Address\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'state']} label=\"State\">\r\n                    <Select\r\n                        defaultValue=\"bihar\"\r\n                        placeholder=\"Select State\"\r\n                        allowClear>\r\n                        <Option value=\"bihar\">Bihar</Option>\r\n                        <Option value=\"up\">UP</Option>\r\n                        <Option value=\"Karnataka\">Karnataka</Option>\r\n                        <Option value=\"Jharkhand\">Jharkhand</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'country']} label=\"Country\">\r\n                    <Select\r\n                        defaultValue=\"india\"\r\n                        placeholder=\"Select Country\"\r\n                        allowClear>\r\n                        <Option value=\"india\">India</Option>\r\n                        <Option value=\"us\">US</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={['user', 'visit']} label=\"Visit Type\" >\r\n                    <Select placeholder=\"Select Visit type\">\r\n                        <Option value=\"general\">General</Option>\r\n                        <Option value=\"emergency\">Emergency</Option>\r\n                        <Option value=\"referral\">Referral</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" size='large' htmlType=\"submit\">\r\n                        Submit\r\n        </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, { useEffect } from 'react';\r\nimport { Carousel } from 'antd';\r\nimport corousal1 from '../../../assets/images/corousal1.jpg';\r\nimport corousal2 from '../../../assets/images/corousal2.jpg';\r\nimport corousal3 from '../../../assets/images/corousal3.jpg';\r\nimport corousal4 from '../../../assets/images/corousal4.jpg';\r\nimport '../homescreen/homescreen.css';\r\nconst contentStyle = {\r\n    height: '700px',\r\n    color: '#fff',\r\n    lineHeight: '500px',\r\n    textAlign: 'center',\r\n    background: '#364d79',\r\n    fontSize: \"32px\"\r\n};\r\n\r\n\r\n\r\nconst HomeScreen = () => {\r\n    return (\r\n        <Carousel autoplay>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal1})` }}>\r\n                    Welcome to Baymax Healthcare\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal2})` }}>\r\n                    Manage everything from central place\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal3})` }}>\r\n                    Secure and reliable\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div class=\"backgroundImageDiv\" style={{ backgroundImage: `url(${corousal4})` }}>\r\n                    Access records from anywhere\r\n                </div>\r\n            </div>\r\n        </Carousel>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import { useState } from 'react';\r\nimport { getPharmacyMedicineDetail } from '../queries';\r\n\r\nconst useGetPharmacyMedicineDetail = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPharmacyMedicineDetail(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPharmacyMedicineDetail;","import React, { useState, useEffect } from 'react';\r\nimport { PlusOutlined, OrderedListOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport { medicineDistributionUnits } from './utils';\r\nimport queryString from 'query-string';\r\nimport useSavePharmacyMedicine from '../../../state/pharmacy/hooks/useSavePharmacyMedicine';\r\nimport useGetPharmacyMedicineDetail from '../../../state/pharmacy/hooks/useGetMedicinedetail';\r\nimport { setNestedObjectValues } from 'formik';\r\nimport { savePharmacyMedicine } from '../../../state/pharmacy/queries';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst medicineUnits = medicineDistributionUnits.map(medicineDistributionUnit => <Option key={medicineDistributionUnit}>{medicineDistributionUnit}</Option>);\r\nconst AddNewMedicine = ({ location, history }) => {\r\n    let index = 0;\r\n    const [form] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['Aspirin', 'Tablets', 'Syrup']);\r\n    const [medicineDetail, setRequest1] = useGetPharmacyMedicineDetail();\r\n    const queryParams = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            setRequest1(queryParams.medicineId);\r\n        }\r\n    }, []);\r\n\r\n    if (medicineDetail != null && queryParams.mode == \"edit\") {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: medicineDetail.medicineId,\r\n                medicineName: medicineDetail.medicineName,\r\n                genericName: medicineDetail.genericName,\r\n                boxSize: Number.parseInt(medicineDetail.boxSize),\r\n                expDate: medicineDetail.expiryDate,\r\n                medicineShelf: medicineDetail.medicineShelf,\r\n                details: medicineDetail.details,\r\n                category: medicineDetail.category,\r\n                unit: medicineDetail.unit,\r\n                triggerValue: Number.parseFloat(medicineDetail.triggerValue),\r\n                image: medicineDetail.image,\r\n                salePrice: Number.parseFloat(medicineDetail.salePrice),\r\n                supplierPrice: medicineDetail.suppliersPrice,\r\n                tax: medicineDetail.tax,\r\n                supplierName: medicineDetail.supplierName,\r\n                availability: medicineDetail.availability,\r\n                stockQuantity: medicineDetail.stockQuantity,\r\n            }\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        console.log(form);\r\n        const body = {\r\n            medicineName: form.medicineName,\r\n            genericName: form.genericName,\r\n            boxSize: form.boxSize,\r\n            details: form.details,\r\n            category: form.category,\r\n            unit: form.unit,\r\n            triggerValue: form.triggerValue,\r\n            image: form.image,\r\n            salePrice: form.salePrice,\r\n            availability: form.availability,\r\n            stockQuantity: form.stockQuantity\r\n        };\r\n\r\n        if (queryParams.mode == \"edit\" && queryParams.medicineId != null) {\r\n            body[\"medicineId\"] = queryParams.medicineId;\r\n        }\r\n\r\n        savePharmacyMedicine(body).then(data => {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: `Medicine ${form.medicineName} ${queryParams.mode == 'edit' ? 'edited' : 'added'} successfully`,\r\n                duration: 3\r\n            });\r\n            clearForm();\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'ERROR',\r\n                description: `Error while saving Medicine`,\r\n                duration: 3\r\n            });\r\n        });\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n    function clearForm() {\r\n        form.setFieldsValue({\r\n            user: {\r\n                medicineId: null,\r\n                medicineName: \"\",\r\n                genericName: \"\",\r\n                boxSize: 0,\r\n                details: \"\",\r\n                category: \"\",\r\n                unit: \"\",\r\n                triggerValue: 0,\r\n                image: null,\r\n                salePrice: 0,\r\n                availability: \"In stock\",\r\n                stockQuantity: 0\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageSuppliers' });\r\n            }} type=\"dashed\" icon={<PlusOutlined />}>Add Supplier</Button>\r\n            <Button type=\"dashed\" onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button>\r\n            <br /><br /><br />\r\n            <Form form={form} {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'availability']} label=\"Availability\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"In stock\">In Stock</Option>\r\n                                <Option value=\"Out of stock\">Out Of Stock</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'stockQuantity']} label=\"Stock Quantity\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineName']} label=\"Medicine Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'genericName']} label=\"Generic Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'boxSize']} label=\"Box Size\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'expiryDate']} label=\"Expiry Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'medicineShelf']} label=\"Medicine Shelf\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'details']} label=\"Details\">\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'category']} label=\"Category\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select category\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'unit']} label=\"Unit\">\r\n                            <Select\r\n                                showSearch\r\n                                placeholder=\"Select Distribution Unit\" style={{ width: '100%' }}\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }>\r\n                                {medicineUnits}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'image']} label=\"Image\">\r\n                            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\r\n                                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'triggerValue']} label=\"Reorder value\" rules={[{ type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salePrice']} label=\"Sale price per unit\" rules={[{ required: true }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save and Add another\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default AddNewMedicine;\r\n","export const medicineDistributionUnits = [\"ampoule\",\r\n    \"bag\",\r\n    \"bottle\",\r\n    \"box\",\r\n    \"bundle\",\r\n    \"capsule\",\r\n    \"case\",\r\n    \"container\",\r\n    \"cream\",\r\n    \"each\",\r\n    \"gel\",\r\n    \"nebule\",\r\n    \"ointment\",\r\n    \"pack\",\r\n    \"pair\",\r\n    \"pallet\",\r\n    \"patch\",\r\n    \"pcs\",\r\n    \"pill\",\r\n    \"plastic\",\r\n    \"polyamp\",\r\n    \"roll\",\r\n    \"spray\",\r\n    \"suppository\",\r\n    \"suspension\",\r\n    \"set\",\r\n    \"syrup\",\r\n    \"tablet\",\r\n    \"tray\",\r\n    \"tube\",\r\n    \"vial\"];","import { Space, Table, Input, Select, Typography } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nconst { Text } = Typography;\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         name: 'Paraceta',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217',\r\n//         stock: 100\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         name: '',\r\n//         category: '',\r\n//         purchasePrice: '',\r\n//         sellingPrice: '',\r\n//         genericName: '',\r\n//         expiryDate: '',\r\n//         medicineId: '217'\r\n\r\n//     },\r\n// ];\r\n\r\nconst ManageMedicines = ({ location, history }) => {\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: (text, record) => (\r\n                <Text type={record.stockQuantity - record.triggerValue > 0 ? 'success' : 'danger'}>{text}</Text>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Category',\r\n            dataIndex: 'category',\r\n            key: 'category',\r\n            filters: [\r\n                {\r\n                    text: 'Tablet',\r\n                    value: 'Tablet',\r\n                },\r\n                {\r\n                    text: 'Syrup',\r\n                    value: 'Syrup',\r\n                }\r\n            ],\r\n            onFilter: (value, record) => record.category == value,\r\n            sorter: (a, b) => a.category - b.category,\r\n            sortDirections: ['descend'],\r\n        },\r\n        {\r\n            title: 'Purchase Price',\r\n            dataIndex: 'purchasePrice',\r\n            key: 'purchasePrice',\r\n        },\r\n        {\r\n            title: 'Selling Price',\r\n            dataIndex: 'sellingPrice',\r\n            key: 'sellingPrice',\r\n        },\r\n        {\r\n            title: 'Generic name',\r\n            dataIndex: 'genericName',\r\n            key: 'genericName',\r\n        },\r\n        {\r\n            title: 'Expiry date',\r\n            dataIndex: 'expiryDate',\r\n            key: 'expiryDate',\r\n        },\r\n        {\r\n            title: 'Stock',\r\n            dataIndex: 'stock',\r\n            key: 'stock',\r\n        },\r\n        {\r\n            title: 'Stock Quantity',\r\n            dataIndex: 'stockQuantity',\r\n            key: 'stockQuantity',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=prefetch' + '&medicineName=' + record.name });\r\n                    }}>Place Order</a>\r\n                    {/* <a>Stock</a> */}\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/addNewMedicine', search: '?mode=edit' + '&medicineId=' + record.medicineId });\r\n                    }}>Edit</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [filterValue, setfilterValue] = useState(\"medicineName\");\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n    }, []);\r\n\r\n    if (medicines.length > 0) {\r\n        const tempData = [];\r\n        medicines.forEach((medicine, index) => {\r\n            tempData.push({\r\n                key: index,\r\n                name: medicine.medicineName,\r\n                medicineId: medicine.medicineId,\r\n                category: medicine.category,\r\n                purchasePrice: medicine.supplierPrice,\r\n                triggerValue: medicine.triggerValue,\r\n                sellingPrice: medicine.salePrice,\r\n                genericName: medicine.genericName,\r\n                expiryDate: medicine.expDate,\r\n                stock: medicine.availability,\r\n                stockQuantity: medicine.stockQuantity\r\n            });\r\n        });\r\n        data = [...tempData];\r\n    }\r\n\r\n    function onMedicineSearch() {\r\n        // if (searchValue == '') {\r\n        //     setRequest();\r\n        //     setShowPatient(\"all\");\r\n        // } else if (filterValue == \"medicineName\") {\r\n        //     setPatientSearchbyId(searchValue);\r\n        //     setShowPatient(\"patientId\");\r\n        // } else if (filterValue == \"genericName\") {\r\n        //     setPatientSearchbyName(searchValue);\r\n        //     setShowPatient(\"patientName\");\r\n        // }\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"medicineName\">Medicine Name</Option>\r\n                    <Option value=\"genericName\">Generic Name</Option>\r\n                </Select>\r\n                <Input.Search onSearch={onMedicineSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageMedicines;","import { useState } from 'react';\r\nimport { getPurchaseOrderList } from '../queries';\r\n\r\nconst UseGetAllPurchaseOrder = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getPurchaseOrderList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default UseGetAllPurchaseOrder;","import { useState } from 'react';\r\nimport { deletePurchaseOrder } from '../queries';\r\n\r\nconst useDeletePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    const response = await deletePurchaseOrder(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n    } else {\r\n      setStatus(false);\r\n    }\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useDeletePurchaseOrder;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space, notification, Input, Select } from 'antd';\r\nimport UseGetAllPurchaseOrder from '../../../state/pharmacy/hooks/UseGetAllPurchaseOrders';\r\nimport useDeletePurchaseOrder from '../../../state/pharmacy/hooks/useDeletePurchaseOrder';\r\nimport { getRenderPropValue } from 'antd/lib/_util/getRenderPropValue';\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n// const data = [\r\n//     {\r\n//         key: '1',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n//     },\r\n//     {\r\n//         key: '2',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n//     {\r\n//         key: '3',\r\n//         orderDate: '',\r\n//         deliveryDate: '',\r\n//         supplier: '',\r\n//         store: '',\r\n//         totalAmount: '',\r\n//         status: ['paid']\r\n\r\n//     },\r\n// ];\r\n\r\nfunction resolveTag(tag) {\r\n    if (tag == \"cancelled\") {\r\n        return \"red\";\r\n    } else if (tag == \"orderPlaced\") {\r\n        return \"orange\";\r\n    } else {\r\n        return \"green\";\r\n    }\r\n\r\n}\r\nconst PurchaseOrder = ({ location, history }) => {\r\n\r\n    let data = [];\r\n    const columns = [\r\n        {\r\n            title: 'Invoice No.',\r\n            dataIndex: 'invoiceNumber',\r\n            key: 'invoiceNumber',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Order Date',\r\n            dataIndex: 'orderDate',\r\n            key: 'orderDate',\r\n            render: text => <a>{text}</a>,\r\n            sorter: (a, b) => a.orderDate - b.orderDate,\r\n        },\r\n        {\r\n            title: 'Delivery Date',\r\n            dataIndex: 'deliveryDate',\r\n            key: 'deliveryDate',\r\n            sorter: (a, b) => a.deliveryDate - b.deliveryDate,\r\n        },\r\n        {\r\n            title: 'Supplier',\r\n            dataIndex: 'supplier',\r\n            key: 'supplier',\r\n            filters: [\r\n                {\r\n                    text: 'ACME',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'GSK',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Medimex',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.supplier == value,\r\n        },\r\n        {\r\n            title: 'Store',\r\n            dataIndex: 'store',\r\n            key: 'store',\r\n        },\r\n        {\r\n            title: 'Total Amount',\r\n            dataIndex: 'totalAmount',\r\n            key: 'totalAmount',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            dataIndex: 'status',\r\n            render: tags => (\r\n                <>\r\n                    {tags.map(tag => {\r\n                        return (\r\n                            <Tag color={resolveTag(tag)} key={tag}>\r\n                                {tag.toUpperCase()}\r\n                            </Tag>\r\n                        );\r\n                    })}\r\n                </>\r\n            ),\r\n            filters: [\r\n                {\r\n                    text: 'Cancelled',\r\n                    value: 'cancelled',\r\n                },\r\n                {\r\n                    text: 'Discharged',\r\n                    value: 'delivered',\r\n                }, {\r\n                    text: 'Order Placed',\r\n                    value: 'orderPlaced',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.status == value,\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?mode=edit' + '&purchaseOrderId=' + record.purchaseOrderId });\r\n                    }}>View</a>\r\n                    <a onClick={() => deletePurchaseOrder(record)}>Cancel</a>\r\n                    {/* <a onClick={() => {\r\n                        history.push({ pathname: '/home/newPurchaseOrder', search: '?patientId=' + record.patientId + '&doctorId=' + record.doctorId + '&appointmentId=' + record.appointmentId });\r\n                    }}>edit</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [filterValue, setfilterValue] = useState(\"invoiceNumber\");\r\n    const [purchaseOrders, isLoading, setGetAllPurchaseOrder] = UseGetAllPurchaseOrder();\r\n    const [status, setDeletePurchaseOrder] = useDeletePurchaseOrder();\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n        }\r\n        setGetAllPurchaseOrder();\r\n    }, []);\r\n\r\n    function deletePurchaseOrder(record) {\r\n        const body = {\r\n            purchaseOrderId: record.purchaseOrderId,\r\n            supplierName: null,\r\n            orderDate: null,\r\n            storeName: null,\r\n            // totalAmount: null,\r\n            deliveryDate: null,\r\n            rol: null,\r\n            productDetails: null,\r\n        };\r\n        setDeletePurchaseOrder(body);\r\n    }\r\n    if (purchaseOrders.length > 0) {\r\n        data = purchaseOrders.map((order, index) => {\r\n            return {\r\n                key: index,\r\n                invoiceNumber: order.invoiceNumber,\r\n                purchaseOrderId: order.purchaseOrderId,\r\n                orderDate: (new Date(order.orderDate)).toDateString(),\r\n                deliveryDate: (new Date(order.deliveryDate)).toDateString(),\r\n                supplier: order.supplierName,\r\n                store: order.storeName,\r\n                totalAmount: order.totalAmount,\r\n                status: (order.status != null ? [order.status] : ['Order Placed'])\r\n            };\r\n        });\r\n    }\r\n    function onOrderSearch(searchValue) {\r\n\r\n        if (searchValue == '') {\r\n            // setRequest();\r\n            // // setShowPatient(\"all\");\r\n        } else if (filterValue == \"invoiceNumber\") {\r\n            // setPatientSearchbyId(searchValue);\r\n            // setShowPatient(\"patientId\");\r\n        } else if (filterValue == \"supplierName\") {\r\n            // setPatientSearchbyName(searchValue);\r\n            // setShowPatient(\"patientName\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Input.Group compact>\r\n                <Select defaultValue={filterValue} onSelect={setfilterValue}>\r\n                    <Option value=\"invoiceNumber\">Invoice Number</Option>\r\n                    <Option value=\"supplierName\">Supplier</Option>\r\n                    {/* <Option value=\"SupplierName\">Supplier Name</Option> */}\r\n                </Select>\r\n                <Input.Search onSearch={onOrderSearch} style={{ width: '70%' }} placeholder=\"Search by\" />\r\n            </Input.Group>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getSuppliersList } from '../queries';\r\n\r\nconst useGetAllSuppliers = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [medicines, setMedicineList] = useState([]);\r\n\r\n  const request = async () => {\r\n    setIsLoading(true);\r\n\r\n    const response = await getSuppliersList();\r\n    if (response) {\r\n        setMedicineList(response);\r\n    } else {\r\n      // const err = [];\r\n      setMedicineList([]);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [medicines, isLoading, request];\r\n};\r\n\r\nexport default useGetAllSuppliers;","import { useState } from 'react';\r\nimport { savePurchaseOrder } from '../queries';\r\n\r\nconst useSavePurchaseOrder = () => {\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const request = async (body) => {\r\n    const response = await savePurchaseOrder(body);\r\n\r\n    setStatus(response);\r\n  };\r\n\r\n  return [status, request];\r\n};\r\n\r\nexport default useSavePurchaseOrder;\r\n","import { useState } from 'react';\r\nimport { getPurchaseOrderDetails } from '../queries';\r\n\r\nconst useGetPurchaseOrderDetails = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (medicineId) => {\r\n        const response = await getPurchaseOrderDetails(medicineId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPurchaseOrderDetails;","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, notification, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport moment from 'moment';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\nimport useGetAllPharmacyMedicines from '../../../state/pharmacy/hooks/useGetAllPharmacyMedicines';\r\nimport useSavePurchaseOrder from '../../../state/pharmacy/hooks/useSavePurchaseOrder';\r\nimport useGetPurchaseOrderDetails from '../../../state/pharmacy/hooks/useGetPurchaseOrderDetails';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPurchaseOrder = ({ location, history }) => {\r\n    const medicineMap = new Map();\r\n    let options = [];\r\n    const supplierOptions = [\r\n        // { value: 'light', label: 'Light' },\r\n        // { value: 'bamboo', label: 'Bamboo' },\r\n    ];\r\n    let index = 0;\r\n    const [purchaseDetailsForm] = Form.useForm();\r\n    const [productListForm] = Form.useForm();\r\n    const [name, setName] = useState(\"\");\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n    const [suppliers, isLoadings, setSupplierSearch] = useGetAllSuppliers();\r\n    const queryParams = queryString.parse(location.search);\r\n    const [medicines, isLoading, setMedicineSearch] = useGetAllPharmacyMedicines();\r\n    const [status, setSavePurchaseOrder] = useSavePurchaseOrder();\r\n    const [orderDetail, setGetPurchaseOrderDetails] = useGetPurchaseOrderDetails();\r\n    // const [purchaseOrderList, isLoading1, setPurchaseOrderListFetch] = UseGetAllPurchaseOrder();\r\n    useEffect(() => {\r\n        setMedicineSearch();\r\n        setSupplierSearch();\r\n        if (status && submitted) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Purchase order created successfully',\r\n                duration: 3\r\n            });\r\n            setSubmitted(false);\r\n        }\r\n        if (queryParams.mode == \"edit\" && queryParams.purchaseOrderId != null && submitted == false && status == false) {\r\n            setGetPurchaseOrderDetails(queryParams.purchaseOrderId);\r\n        }\r\n    }, [status, submitted]);\r\n\r\n\r\n    if (orderDetail != null) {\r\n        console.log(orderDetail);\r\n        purchaseDetailsForm.setFieldsValue({\r\n            user: {\r\n                supplierName: orderDetail.supplierName,\r\n                orderDate: moment(new Date(orderDetail.orderDate), 'YYYY-MM-DD'),\r\n                storeName: orderDetail.storeName,\r\n                status: orderDetail.status,\r\n                invoiceNumber: orderDetail.invoiceNumber,\r\n                deliveryDate: moment(new Date(orderDetail.deliveryDate), 'YYYY-MM-DD'),\r\n                rol: orderDetail.rol\r\n            }\r\n        });\r\n        productListForm.setFieldsValue({\r\n            user: {\r\n                totalAmount: orderDetail.totalAmount,\r\n                totalGST: orderDetail.totalGST,\r\n                totalDiscount: orderDetail.totalDiscount,\r\n            }\r\n        });\r\n        if (orderDetail.productDetails != null) {\r\n            const productList = [];\r\n            orderDetail.productDetails.forEach(product => {\r\n                productList.push({\r\n                    productId: product.productId,\r\n                    productName: product.productName,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    batchNumber: product.batchNumber,\r\n                    expiryDate: moment(new Date(product.expiryDate), 'YYYY-MM-DD'),\r\n                    discount: product.discount,\r\n                    tax: product.tax,\r\n                });\r\n            });\r\n            productListForm.setFieldsValue({\r\n                users: [...productList]\r\n            });\r\n        }\r\n\r\n    }\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach(supplier => {\r\n            supplierOptions.push({ value: supplier.supplierName, label: supplier.supplierName });\r\n        });\r\n    }\r\n    if (medicines.length > 0) {\r\n        medicines.forEach(medicine => {\r\n            options.push({ value: medicine.medicineName, label: medicine.medicineName });\r\n            medicineMap.set(medicine.medicineName, medicine);\r\n        });\r\n    }\r\n    if (queryParams.mode == \"prefetch\") {\r\n\r\n        productListForm.setFieldsValue({\r\n            users: [{\r\n                productId: null,\r\n                productName: queryParams.medicineName,\r\n                quantity: 1,\r\n                unit: \"\",\r\n                purchaseCost: \"\",\r\n                batchNumber: \"\",\r\n                expDate: \"\",\r\n                discount: \"\",\r\n                tax: \"\"\r\n            }]\r\n        });\r\n    }\r\n    const onFinish = formData => {\r\n        const purchaseDetails = purchaseDetailsForm.getFieldsValue().user;\r\n        const productList = productListForm.getFieldsValue().users;\r\n        const finalCharges = productListForm.getFieldsValue().user;\r\n        const body = {\r\n            purchaseOrderId: queryParams.purchaseOrderId,\r\n            supplierName: purchaseDetails.supplierName,\r\n            orderDate: purchaseDetails.orderDate,\r\n            storeName: purchaseDetails.storeName,\r\n            invoiceNumber: purchaseDetails.invoiceNumber,\r\n            totalAmount: finalCharges.totalAmount,\r\n            totalGST: finalCharges.totalGST,\r\n            totalDiscount: finalCharges.totalDiscount,\r\n            deliveryDate: purchaseDetails.deliveryDate,\r\n            rol: purchaseDetails.rol,\r\n            status: purchaseDetails.status,\r\n            productDetails: [],\r\n        };\r\n        if (productList != null && productList.length > 0) {\r\n            productList.forEach(product => {\r\n                const medicine = medicineMap.get(product.productName);\r\n                body.productDetails.push({\r\n                    productId: product.productId,\r\n                    purchaseOrderId: queryParams.purchaseOrderId,\r\n                    medicineId: medicine.medicineId,\r\n                    productName: product.productName,\r\n                    batchNumber: product.batchNumber,\r\n                    quantity: product.quantity,\r\n                    unit: product.unit,\r\n                    purchaseCost: product.purchaseCost,\r\n                    discount: product.discount,\r\n                    tax: product.tax\r\n                });\r\n            });\r\n        }\r\n        setSubmitted(true);\r\n        setSavePurchaseOrder(body);\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n        // setMedicineSearch();\r\n    }\r\n\r\n    const onSearchSupplier = (value) => {\r\n        // setSupplierSearch();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/purchaseOrderList' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button onClick={() => {\r\n                history.push({ pathname: '/home/manageMedicines' });\r\n            }} type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button>\r\n            <br /><br /><br />\r\n            <Form form={purchaseDetailsForm}  {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'rol']} label=\"ROL\">\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\">\r\n                            <Select\r\n                                placeholder=\"Status\"\r\n                                allowClear>\r\n                                <Option value=\"orderPlaced\">Order Placed</Option>\r\n                                <Option value=\"delivered\">Delivered</Option>\r\n                                <Option value=\"cancelled\">Cancelled</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'supplierName']} label=\"Suppliers Name\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                onSearch={onSearchSupplier}\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                                options={supplierOptions}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Supplier name\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'deliveryDate']} label=\"Delivery Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'invoiceNumber']} label=\"Invoice Number\">\r\n                            <Input style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'orderDate']} label=\"Order Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'storeName']} label=\"Store Name\">\r\n                            <Select\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"Select Store\"\r\n                                dropdownRender={menu => (\r\n                                    <div>\r\n                                        {menu}\r\n                                        <Divider style={{ margin: '4px 0' }} />\r\n                                        <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\r\n                                            <Input style={{ flex: 'auto' }} value={name} onChange={onNameChange} />\r\n                                            <a\r\n                                                style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\r\n                                                onClick={addItem}\r\n                                            >\r\n                                                <PlusOutlined /> Add item\r\n                                    </a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {items.map(item => (\r\n                                    <Option key={item}>{item}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    {/* <Col span={12}>\r\n                        <Form.Item name={['user', 'salesStartDate']} label=\"Sales Start Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'salesEndDate']} label=\"Sales End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col> */}\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form form={productListForm} name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'batchNumber']}\r\n                                            fieldKey={[field.fieldKey, 'batchNumber']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 150 }} placeholder=\"Batch No.\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'unit']}\r\n                                            fieldKey={[field.fieldKey, 'unit']}\r\n                                        >\r\n                                            <Select\r\n                                                placeholder=\"Unit\"\r\n                                                allowClear>\r\n                                                <Option value=\"1-0-0\">bottle</Option>\r\n                                                <Option value=\"1-1-0\">box</Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'purchaseCost']}\r\n                                            fieldKey={[field.fieldKey, 'purchaseCost']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 150 }} placeholder=\"Purchase Cost\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'expiryDate']}\r\n                                            fieldKey={[field.fieldKey, 'expiryDate']}\r\n                                        >\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'discount']}\r\n                                            fieldKey={[field.fieldKey, 'discount']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"discount\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'tax']}\r\n                                            fieldKey={[field.fieldKey, 'tax']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 125 }} placeholder=\"tax\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalGST']} label=\"Total GST\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalDiscount']} label=\"Total Discount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPurchaseOrder;\r\n","import { MinusCircleOutlined, OrderedListOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Divider, Form, Input, InputNumber, Row, Select, Space, Switch } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst IndentPreparation = () => {\r\n    let options = [];\r\n    let index = 0;\r\n    const [name, setName] = useState(\"\");\r\n    const [items, setItems] = useState(['ABC pharma', 'Medimex store']);\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n        const body = {\r\n            \"empId\": \"test123\",\r\n            \"doctorName\": form.name,\r\n            \"department\": form.department,\r\n            \"experience\": form.experience,\r\n            \"speciality\": form.speciality,\r\n            \"highestQualification\": form.highestQualification,\r\n            \"consulationCharge\": form.consulationCharge,\r\n            \"designation\": form.designation\r\n        }\r\n    };\r\n    function onNameChange(event) {\r\n        // console.log(\"sas\", event.target.value);\r\n        setName(event.target.value);\r\n    };\r\n    function addItem() {\r\n        setName('');\r\n        setItems([...items, name || `New item ${index++}`]);\r\n    }\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Purchase list</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Medicine list</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientId']} label=\"Patient Search\" rules={[{ required: true }]}>\r\n                            <AutoComplete\r\n                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                dropdownMatchSelectWidth={500}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Input.Search size=\"default\" placeholder=\"Reg. No\" />\r\n                            </AutoComplete>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'indentDate']} label=\"Indent Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'patientName']} label=\"Patient Name\">\r\n                            <Input placeholder=\"Patient Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'consultantName']} label=\"Consultant Name\">\r\n                            <Input placeholder=\"Consultant Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'mobileNumber']} label=\"Mobile\">\r\n                            <Input placeholder=\"Mobile Number\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'comments']} label=\"Comments\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'address']} label=\"Address\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'uom']}\r\n                                            fieldKey={[field.fieldKey, 'uom']}\r\n                                        >\r\n                                            <Input style={{ minWidth: 125 }} placeholder=\"UOM\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'mrp']}\r\n                                            fieldKey={[field.fieldKey, 'mrp']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"MRP\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'stockQuantity']}\r\n                                            fieldKey={[field.fieldKey, 'stockQuantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 175 }} placeholder=\"Stock Quantity\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Product\r\n                </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row gutter={24}>\r\n                    <Col span={6}>\r\n                        <Form.Item name={['user', 'totalAmount']} label=\"Total Amount\">\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item htmlType=\"submit\">\r\n                            <Button type=\"primary\">\r\n                                Bill\r\n                            </Button>\r\n                            <Button type=\"primary\" style={{ marginLeft: '15px' }} >\r\n                                Add New\r\n                            </Button>\r\n                            <Button style={{ marginLeft: '15px' }} type=\"primary\">\r\n                                Print\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default IndentPreparation;","import { useState } from 'react';\r\nimport { saveSupplier } from '../queries';\r\n\r\nconst useAddSupplier = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const request = async (body) => {\r\n    setIsLoading(true);\r\n    const response = await saveSupplier(body);\r\n\r\n    if (response) {\r\n      if (response.status === \"SUCCESS\") {\r\n        setStatus(true);\r\n      }\r\n      // dispatch(listProducts(response));\r\n    } else {\r\n      // const err = [];\r\n      setStatus(false);\r\n      // dispatch(listProducts(err));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return [status, isLoading, request];\r\n};\r\n\r\nexport default useAddSupplier;\r\n","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, InputNumber, notification, Table, Space } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport Spinner from '../../../components/spinner';\r\nimport useAddMedicine from '../../../state/addMedicine/hooks/useAddMedicine';\r\nimport useMedicineSearch from '../../../state/addMedicine/hooks/useSearchMedicine';\r\nimport useAddSupplier from '../../../state/pharmacy/hooks/useAddSupplier';\r\nimport useGetAllSuppliers from '../../../state/pharmacy/hooks/useGetAllSupplier';\r\n\r\nconst ManageSupplier = () => {\r\n    const data = [];\r\n    const [form] = Form.useForm();\r\n    // const [, forceUpdate] = useState();\r\n    const [status, isLoading, setRequest] = useAddSupplier();\r\n    const [suppliers, isLoadings, setMedicineSearch] = useGetAllSuppliers();\r\n    // To disable submit button at the beginning.\r\n    useEffect(() => {\r\n        if (status) {\r\n            notification[\"success\"]({\r\n                message: 'SUCCESS',\r\n                description: 'Supplier added successfully',\r\n                duration: 3\r\n            });\r\n            setMedicineSearch();\r\n        }\r\n        if (suppliers.length === 0) {\r\n            setMedicineSearch();\r\n        }\r\n        // forceUpdate({});\r\n    }, [status]);\r\n    const onFinish = formData => {\r\n        const body = {\r\n            \"supplierName\": formData.name,\r\n            \"email\": formData.email,\r\n            \"phoneNumber\": formData.phone,\r\n            \"address\": formData.address,\r\n        };\r\n        setRequest(body);\r\n        form.setFieldsValue({\r\n            \"name\": \"\",\r\n            \"email\": \"\",\r\n            \"phone\": \"\",\r\n            \"address\": \"\",\r\n        });\r\n        \r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'supplierName',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.medicineName - b.medicineName,\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email'\r\n        },\r\n        {\r\n            title: 'Phone number',\r\n            dataIndex: 'phoneNumber'\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address'\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={()=> editSupplier(record)}>Edit</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    function editSupplier(record) {\r\n        form.setFieldsValue({\r\n            \"name\": record.supplierName,\r\n            \"email\": record.email,\r\n            \"phone\": record.phoneNumber,\r\n            \"address\": record.address,\r\n        });\r\n    }\r\n\r\n    if (suppliers.length > 0) {\r\n        suppliers.forEach((supplier, index) => {\r\n            data.push({\r\n                key: index,\r\n                supplierId: supplier.supplierId,\r\n                supplierName: supplier.supplierName,\r\n                email: supplier.email,\r\n                phoneNumber: supplier.phoneNumber,\r\n                address: supplier.address,\r\n            });\r\n        });\r\n    }\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    return (\r\n        <>\r\n            <Spinner show={isLoading} />\r\n            <Form form={form} name=\"horizontal_login\" layout=\"inline\" onFinish={onFinish}>\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Supplier name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    rules={[{ required: false, message: 'Please input a type!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    rules={[{ required: false, message: 'Please input contact!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Contact\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"address\"\r\n                    rules={[{ required: false, message: 'Please add supplier name!' }]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Address\" />\r\n                </Form.Item>\r\n                <Form.Item shouldUpdate={true}>\r\n                    {() => (\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={\r\n                                !form.isFieldsTouched(true) ||\r\n                                form.getFieldsError().filter(({ errors }) => errors.length).length\r\n                            }\r\n                        >\r\n                            Add Supplier\r\n                        </Button>\r\n                    )}\r\n                </Form.Item>\r\n            </Form>\r\n            <br /><br /><br />\r\n            <Table columns={columns} dataSource={data} onChange={onChange} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ManageSupplier;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Table, Tag, Space } from 'antd';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Patient Reg No',\r\n        dataIndex: 'regNo',\r\n        key: 'regNo',\r\n        render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n        title: 'Patient Name',\r\n        dataIndex: 'patientName',\r\n        key: 'patientName',\r\n    },\r\n    {\r\n        title: 'Indent Date and Time',\r\n        dataIndex: 'indentDate',\r\n        key: 'indentDate',\r\n    },\r\n    {\r\n        title: 'Submitted By',\r\n        dataIndex: 'submittedBy',\r\n        key: 'submittedBy',\r\n    },\r\n    {\r\n        title: 'Status',\r\n        key: 'status',\r\n        dataIndex: 'status',\r\n        render: tags => (\r\n            <>\r\n                {tags.map(tag => {\r\n                    return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                            {tag.toUpperCase()}\r\n                        </Tag>\r\n                    );\r\n                })}\r\n            </>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <Space size=\"middle\">\r\n                <a>view</a>\r\n                <a>edit</a>\r\n            </Space>\r\n        ),\r\n    },\r\n];\r\n\r\nconst data = [\r\n    {\r\n        key: '1',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n    },\r\n    {\r\n        key: '2',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n    {\r\n        key: '3',\r\n        orderDate: '',\r\n        deliveryDate: '',\r\n        supplier: '',\r\n        store: '',\r\n        totalAmount: '',\r\n        status: ['paid']\r\n\r\n    },\r\n];\r\n\r\nconst IndentList = () => {\r\n    return (\r\n        <>\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IndentList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Row, Col, Divider, InputNumber, Button, Upload, Select, notification, DatePicker } from 'antd';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\nconst Certificates = () => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'name']} label=\"Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'guardianName']} label=\"Guardian Name\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'relation']} label=\"Relation\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'dateAndTime']} label=\"Date and time\">\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n            <ReactQuill theme=\"snow\" value={value} onChange={setValue} />\r\n\r\n            <Row style={{ textAlign: 'right', marginTop: 30 }}>\r\n                <Col span={24} style={{ textAlign: 'right' }}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Generate\r\n                            </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Certificates;\r\n","import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { AutoComplete, Button, Col, DatePicker, Form, Input, Switch, InputNumber, Row, Select, Space } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 9 },\r\n};\r\n// eslint-disable-next-line\r\nconst validateMessages = {\r\n    // eslint-disable-next-line\r\n    required: '${label} is required!',\r\n    types: {\r\n        // eslint-disable-next-line\r\n        email: '${label} is not validate email!',\r\n        // eslint-disable-next-line\r\n        number: '${label} is not a validate number!',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nconst NewPackage = () => {\r\n    let options = [];\r\n    const onFinish = formData => {\r\n        const form = formData.user;\r\n    };\r\n\r\n    const onSearchProduct = (value) => {\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"dashed\" icon={<PlusOutlined />}>All Packages</Button>\r\n            {/* <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Manage Medicine</Button>\r\n            <Button type=\"dashed\" style={{ marginLeft: '15px' }} icon={<OrderedListOutlined />}>Import Medicine</Button> */}\r\n            <br /><br /><br />\r\n            <Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Row gutter={24}>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageName']} label=\"Package Name\" rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packageEndDate']} label=\"Package End Date\">\r\n                            <DatePicker style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'packagePrice']} label=\"Package Price\" rules={[{ required: true, type: 'number', min: 0, max: 5000 }]}>\r\n                            <InputNumber style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item name={['user', 'status']} label=\"Status\" >\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\r\n            <Form name=\"dynamic_form_nest_item\" onFinish={onFinish} autoComplete=\"off\">\r\n                <Form.List name=\"users\">\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map(field => (\r\n                                    <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'productName']}\r\n                                            fieldKey={[field.fieldKey, 'productName']}\r\n                                            rules={[{ required: true, message: 'Missing Product Name!' }]}\r\n                                        >\r\n                                            <AutoComplete\r\n                                                onSearch={onSearchProduct}\r\n                                                dropdownClassName=\"certain-category-search-dropdown\"\r\n                                                dropdownMatchSelectWidth={500}\r\n                                                style={{ width: 250 }}\r\n                                                options={options}\r\n                                            >\r\n                                                <Input.Search size=\"default\" placeholder=\"Product name\" />\r\n                                            </AutoComplete>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'quantity']}\r\n                                            fieldKey={[field.fieldKey, 'quantity']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"quantity\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            name={[field.name, 'price']}\r\n                                            fieldKey={[field.fieldKey, 'price']}\r\n                                        >\r\n                                            <InputNumber style={{ minWidth: 200 }} placeholder=\"price\" />\r\n                                        </Form.Item>\r\n                                        <MinusCircleOutlined\r\n                                            onClick={() => {\r\n                                                remove(field.name);\r\n                                            }}\r\n                                        />\r\n                                    </Space>\r\n                                ))}\r\n\r\n                                <Form.Item>\r\n                                    <Button\r\n                                        type=\"dashed\"\r\n                                        onClick={() => {\r\n                                            add();\r\n                                        }}\r\n                                        block\r\n                                    >\r\n                                        <PlusOutlined /> Add Items\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default NewPackage;\r\n","import React, { useEffect } from 'react';\r\n\r\nconst InProgress = () => {\r\n    return (\r\n        <>\r\n        <h1 style={{fontSize: '56px'}}>The Page is in Progress ...</h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InProgress;\r\n","import { useState } from 'react';\r\nimport { getPrescriptionByAppointmentId } from '../queries';\r\n\r\nconst useGetPrescriptionByAppointmentId = () => {\r\n    const [medicines, setMedicineList] = useState(null);\r\n\r\n    const request = async (appointmentId) => {\r\n        const response = await getPrescriptionByAppointmentId(appointmentId);\r\n        if (response) {\r\n            setMedicineList(response);\r\n        } else {\r\n            // const err = [];\r\n            setMedicineList(null);\r\n        }\r\n    };\r\n\r\n    return [medicines, request];\r\n};\r\n\r\nexport default useGetPrescriptionByAppointmentId;","import React, { useRef } from 'react';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\nimport './printPrescription.css';\r\nexport class PrintPrescription extends React.Component {\r\n    render() {\r\n        const itemList = this.props.itemList;\r\n        const appointmentId = this.props.appointmentId;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const patientVitals = this.props.patientVitals;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        let medicineTable = \"\";\r\n        let testTable = \"\";\r\n        if (this.props.medicineList != null && this.props.medicineList.length > 0) {\r\n            const medicineList = this.props.medicineList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.medicineName}</td>\r\n                        <td>{item.dosage}</td>\r\n                        <td>{item.days}</td>\r\n                        <td>{item.comment}</td>\r\n                    </tr>)\r\n            });\r\n            medicineTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed medicines</h3>\r\n                <table class=\"itemTable\" >\r\n                    <tr>\r\n                        <th>Medicine Name</th>\r\n                        <th>Dosage</th>\r\n                        <th>Days</th>\r\n                        <th>Comment</th>\r\n                    </tr>\r\n                    {medicineList}\r\n                </table>\r\n            </div>\r\n        }\r\n        if (this.props.testList != null && this.props.testList.length > 0) {\r\n            const testList = this.props.testList.map(item => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item.testName}</td>\r\n                        <td>{item.dateOfBooking}</td>\r\n                        <td>{item.dateOfResult}</td>\r\n                        <td>{item.reportDesc}</td>\r\n                        <td>{item.testDesc}</td>\r\n                    </tr>)\r\n            });\r\n            testTable = <div style={{ width: '100%' }}>\r\n                <h3 class=\"heading\" >Prescribed tests</h3>\r\n                <table class=\"itemTable\">\r\n                    <tr>\r\n                        <th>Test Name</th>\r\n                        <th>Test Date</th>\r\n                        <th>Report Date</th>\r\n                        <th>Doctor comment</th>\r\n                        <th>Report summary</th>\r\n                    </tr>\r\n                    {testList}\r\n                </table>\r\n            </div>\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Info</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>{patientDetails.patientName}</th>\r\n                            <td>Age</td>\r\n                            <td>{patientDetails.age}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>PatientId</td>\r\n                            <td>{patientId}</td>\r\n                            <td>AppointmentId</td>\r\n                            <td>{appointmentId}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Date</td>\r\n                            <td>{todaysDate}</td>\r\n                            <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <h3 class=\"heading\" >Patient Vitals</h3>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Height : {patientVitals.height}</th>\r\n                            <td>Weight : {patientVitals.weight}</td>\r\n                            <td>Bp : {patientVitals.Bp}</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Temperature : {patientVitals.temperature}</td>\r\n                            <td>Disease description : {patientVitals.diseaseDesc}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            {/* <td>Visit type</td>\r\n                            <td>{patientDetails.visitType}</td> */}\r\n                        </tr>\r\n                    </table>\r\n                    <br></br>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    {medicineTable}\r\n                    {testTable}\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tr>\r\n                            <th>Appointment summary : {patientVitals.advise}</th>\r\n                        </tr>\r\n                    </table>\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        {/* <div>Cashier Signature</div> */}\r\n                        <div style={{ float: 'right' }}>Doctor's Signature</div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Table, Descriptions, Button } from 'antd';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport useGetPrescriptionByAppointmentId from '../../../state/prescription/hooks/useGetPrescriptionByAppointmentId';\r\nimport queryString from 'query-string';\r\nimport usePatientById from '../../../state/patientSearch/hooks/usePatientSearchbyId';\r\nimport PatientDetails from '../../patientDetails';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport { PrintPrescription } from '../printPrescription';\r\nconst medicinecolumns = [\r\n    {\r\n        title: 'Medicine Name',\r\n        dataIndex: 'medicineName',\r\n    },\r\n    {\r\n        title: 'Dosage',\r\n        dataIndex: 'dosage',\r\n    },\r\n    {\r\n        title: 'Days',\r\n        dataIndex: 'days',\r\n    },\r\n    {\r\n        title: 'Comment',\r\n        dataIndex: 'comment',\r\n    },\r\n];\r\n\r\nconst testcolumns = [\r\n    {\r\n        title: 'Test Name',\r\n        dataIndex: 'testName',\r\n    },\r\n    {\r\n        title: 'Test Date',\r\n        dataIndex: 'dateOfBooking',\r\n    },\r\n    {\r\n        title: 'Report Date',\r\n        dataIndex: 'dateOfResult',\r\n    },\r\n    {\r\n        title: 'Doctor comment',\r\n        dataIndex: 'testDesc',\r\n\r\n    },\r\n    {\r\n        title: 'Report Summary',\r\n        dataIndex: 'reportDesc',\r\n\r\n    }\r\n];\r\n\r\n\r\nconst ViewPrescription = ({ location, history }) => {\r\n    const medicineData = [];\r\n    const testData = [];\r\n\r\n    let appointmentDetails = {\r\n        appointmentId: '',\r\n        diseaseDesc: '',\r\n        advise: '',\r\n        patientId: '',\r\n        patientName: '',\r\n        doctorId: '',\r\n        height: '',\r\n        weight: '',\r\n        Bp: '',\r\n        createdAt: '',\r\n        appointmentDate: '',\r\n        timeSlot: '',\r\n        status: '',\r\n        temperature: ''\r\n    };\r\n\r\n    const queryParams = queryString.parse(location.search);\r\n    const [prescriptionDetails, setPrescriptionDetails] = useGetPrescriptionByAppointmentId();\r\n    const [patientDetails, isLoading, setPatientSearchById] = usePatientById(queryParams.patientId);\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    useEffect(() => {\r\n        setPrescriptionDetails(queryParams.appointmentId);\r\n        setPatientSearchById(queryParams.patientId);\r\n    }, []);\r\n\r\n    if (prescriptionDetails != null) {\r\n        console.log(prescriptionDetails);\r\n        if (prescriptionDetails.appointmentDto != null) {\r\n            const appointmentDto = prescriptionDetails.appointmentDto;\r\n            console.log('le bhgat', appointmentDto);\r\n            appointmentDetails = {\r\n                appointmentId: appointmentDto.appointmentId,\r\n                diseaseDesc: appointmentDto.diseaseDesc,\r\n                advise: appointmentDto.advise,\r\n                patientId: appointmentDto.patientId,\r\n                patientName: appointmentDto.patientName,\r\n                doctorId: appointmentDto.doctorId,\r\n                height: appointmentDto.height,\r\n                weight: appointmentDto.weight,\r\n                Bp: appointmentDto.Bp,\r\n                createdAt: appointmentDto.createdAt,\r\n                appointmentDate: appointmentDto.appointmentDate,\r\n                timeSlot: appointmentDto.timeSlot,\r\n                status: appointmentDto.status,\r\n            }\r\n        }\r\n\r\n        if (prescriptionDetails.prescribedMedsDtoList != null) {\r\n            prescriptionDetails.prescribedMedsDtoList.forEach((medicine, index) => {\r\n                medicineData.push({\r\n                    key: medicine.medName + index,\r\n                    medicineName: medicine.medName,\r\n                    dosage: medicine.dosage,\r\n                    days: medicine.days,\r\n                    comment: medicine.comment\r\n\r\n                });\r\n            });\r\n        }\r\n        if (prescriptionDetails.prescribedTestingDtoList != null) {\r\n            prescriptionDetails.prescribedTestingDtoList.forEach((test, index) => {\r\n                testData.push({\r\n                    key: test + index,\r\n                    testName: test.testDesc,\r\n                    dateOfBooking: test.dateOfBooking,\r\n                    dateOfResult: test.dateOfResult,\r\n                    reportDesc: test.reportDesc,\r\n                    testDesc: test.comment,\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" style={{ float: \"right\" }} shape=\"round\" icon={<PrinterOutlined />} size=\"default\" onClick={handlePrint}>\r\n                Print\r\n        </Button>\r\n            <div style={{ display: 'none' }}>\r\n                <PrintPrescription ref={componentRef} patientVitals={appointmentDetails} appointmentId={appointmentDetails.appointmentId} patientId={queryParams.patientId} medicineList={medicineData} testList={testData} patientDetails={patientDetails} />\r\n            </div>\r\n            <h4>Patient Info</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Name\">{patientDetails.patientName} </Descriptions.Item>\r\n                <Descriptions.Item label=\"Age\">{patientDetails.age}</Descriptions.Item>\r\n                <Descriptions.Item label=\"AppointmentId\">{appointmentDetails.appointmentId}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Visit Type\">{patientDetails.visitType}</Descriptions.Item>\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Patient Vitals</h4>\r\n            <br />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Height\">{appointmentDetails.height}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Weight\">{appointmentDetails.weight}</Descriptions.Item>\r\n                <Descriptions.Item label=\"BP\">{appointmentDetails.Bp}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Temperature\">{appointmentDetails.temperature}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Disease description\">{appointmentDetails.diseaseDesc}</Descriptions.Item>\r\n\r\n            </Descriptions>\r\n            <br />\r\n            <hr />\r\n            <h4>Prescribed Medicines</h4>\r\n            <Table columns={medicinecolumns} dataSource={medicineData} size=\"middle\" />\r\n            <hr />\r\n            <h4>Prescribed Tests</h4>\r\n            <Table columns={testcolumns} dataSource={testData} size=\"middle\" />\r\n            <hr />\r\n            <Descriptions title=\"\" layout=\"Horizontal\">\r\n                <Descriptions.Item label=\"Appointment Summary\">{appointmentDetails.advise}</Descriptions.Item>\r\n            </Descriptions>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default ViewPrescription;","export const registration = { label: \"Registration\", link: \"/registration\" }\r\nexport const patientSearch = { label: \"Search Patients\", link: \"/patientSearch\" }\r\nexport const doctorAppointment = { label: \"Doctor Appointment\", link: \"/doctorAppointment\" }\r\nexport const addDoctor = { label: \"Add Doctors\", link: \"/addDoctor\" }\r\nexport const addMedicine = { label: \"Add Medicines\", link: \"/addMedicine\" }\r\nexport const addTest = { label: \"Add Test\", link: \"/addTest\" }\r\nexport const serviceCatalogue = { label: \"Service Catalogue\", link: \"/inProgress\" }\r\nexport const addNewMedicine = { label: \"Add New Medicine\", link: \"/addNewMedicine\" }\r\nexport const manageMedicines = { label: \"Manage Medicines\", link: \"/manageMedicines\" }\r\nexport const purchaseOrderList = { label: \"Purchase Order List\", link: \"/purchaseOrderList\" }\r\nexport const newPurchaseOrder = { label: \"New Purchase Order\", link: \"/newPurchaseOrder\" }\r\nexport const manageSuppliers = { label: \"Manage Suppliers\", link: \"/manageSuppliers\" }\r\nexport const billing = { label: \"Billing\", link: \"/billing\" };\r\nexport const billSearch = { label: \"Bill Search\", link: \"/billSearch\" };\r\nexport const appointment = { label: \"Appointment\", link: \"/appointment\" };\r\nexport const certificates = { label: \"Certificates\", link: \"/certificates\" };\r\nexport const packageManagement = { label: \"Package Management\", link: \"/package\" };\r\nexport const canteen = { label: \"Canteen\", link: \"/canteen\" };\r\nexport const pharmacy = { label: \"Pharmacy\", link: \"/pharmacy\" };\r\nexport const reimbursements = { label: \"Reimbursements\", link: \"/inProgress\" };\r\nexport const insurance = { label: \"Insurance\", link: \"/inProgress\" };\r\nexport const certificateCreation = { label: \"Certificate creation\", link: \"/inProgress\" };\r\nexport const referrals = { label: \"Referrals\", link: \"/inProgress\" };\r\n\r\nexport const doctorRoutes = [doctorAppointment];\r\nexport const pharmacyRoutes = [addNewMedicine, manageMedicines, purchaseOrderList, newPurchaseOrder, manageSuppliers, billing, billSearch];\r\nexport const receptionRoutes = [registration, patientSearch, appointment, billing, billSearch];\r\nexport const upcomingRoutes = [certificates, packageManagement, canteen, pharmacy, reimbursements, insurance, certificateCreation, referrals];\r\nexport const adminRoutes = [addMedicine, addTest, addDoctor, serviceCatalogue]; \r\n","import { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from \"../utils/roles\";\r\nimport { adminRoutes, doctorRoutes, pharmacyRoutes, receptionRoutes, upcomingRoutes } from \"./allRoutesData\";\r\n\r\nconst map = new Map();\r\n\r\nmap.set(ADMIN, adminRoutes);\r\nmap.set(DOCTOR, doctorRoutes);\r\nmap.set(PHARMACY, pharmacyRoutes);\r\nmap.set(RECEPTION, receptionRoutes);\r\nmap.set(UPCOMING, upcomingRoutes);\r\n\r\nexport var getRoutes = function (roleList) {\r\n    const routes = {};\r\n    roleList.forEach(role => {\r\n        routes[role] = map.get(role);\r\n    });\r\n    return routes;\r\n}","import React, { useRef } from 'react';\r\nimport '../components/mainBillView.css';\r\nimport logo from '../../../assets/images/logo.jpg';\r\nimport hospitalDetails from '../../../utils/constants';\r\n\r\nexport class MainBillView extends React.Component {\r\n    render() {\r\n        const billItemList = this.props.billItemList;\r\n        const patientId = this.props.patientId;\r\n        const patientDetails = this.props.patientDetails;\r\n        const todaysDate = (new Date()).toDateString() + + ' ' + (new Date()).toLocaleTimeString();\r\n        const itemArray = billItemList.map(item => {\r\n            let itemList = [];\r\n            if (item['billDetailList']) {\r\n                itemList = item['billDetailList'].map(billItem => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{(billItem.purchaseType == \"pharmacy-return\" ? billItem.itemName + '(' + billItem.purchaseType + ')' : billItem.itemName)}</td>\r\n                            <td>{billItem.quantity}</td>\r\n                            <td>{billItem.mrp}</td>\r\n                            <td>{billItem.gstPercentage}</td>\r\n                            <td>{billItem.concessionPercentage}</td>\r\n                            <td>{billItem.cost}</td>\r\n                        </tr>\r\n                    );\r\n                });\r\n            }\r\n            return (\r\n                <div style={{ width: '100%' }}>\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Bill Id:</span> {item.billId} &nbsp;&nbsp;\r\n                    <span>Bill Date:</span> {new Date(item.createdAt).toDateString()} &nbsp;&nbsp;\r\n                    <span>Payment Mode:</span> {item.paymentMode}\r\n                    </div>\r\n                    <br />\r\n                    <table class=\"itemTable\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Item Name</th>\r\n                                <th>Quantity</th>\r\n                                <th>Amount</th>\r\n                                <th>GST(%)</th>\r\n                                <th>Discount(%)</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                            {itemList}\r\n                        </tbody>\r\n                    </table>\r\n                    <br />\r\n                    <div class=\"billDetail\" style={{ marginLeft: '10px' }}>\r\n                        <span>Total Amount :</span> {item.totalCost} &nbsp;&nbsp;\r\n                        <span>Total Discount :</span>  {item.totalDiscount} &nbsp;&nbsp;\r\n                        <span>Total GST :</span>  {item.totalGST}\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <div id=\"wrapper\" style={{ marginTop: '30px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div>\r\n                        <img style={{ width: \"400px\", margin: \"0 auto\" }} src={logo} />\r\n                        <div style={{ marginLeft: '20px', fontSize: '12px', fontWeight: 'bold' }}>\r\n                            <p>{hospitalDetails.address}</p>\r\n                            <p>Contact: {hospitalDetails.contact}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', height: '2px', background: 'grey', margin: '10px 0px' }}></div>\r\n                    <table border=\"1\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>{patientDetails.patientName}</th>\r\n                                <td>Age</td>\r\n                                <td>{patientDetails.age}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>PatientId</td>\r\n                                <td>{patientId}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Date</td>\r\n                                <td>{todaysDate}</td>\r\n                                <td>Visit type</td>\r\n                                <td>{patientDetails.visitType}</td>\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                    </table>\r\n                    <br></br>\r\n                    {itemArray}\r\n                    <div style={{ marginTop: '50px', width: '100%', padding: '20px' }}>\r\n                        <div>Cashier Signature</div>\r\n                        <div style={{ float: 'right' }}>Director Signature</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n","import { Space, Table, Button, Input, Row, Col, Select, notification } from 'antd';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport useBillSearch from '../../state/billing/hooks/useBillSearch';\r\nimport { getPatientById } from '../../state/patientSearch/queries';\r\nimport BillSearchComp from '../billing/components/billSearch';\r\nimport { getBillDetails } from '../billing/services';\r\nimport { MainBillView } from './components/mainBillView';\r\nimport { useReactToPrint } from 'react-to-print';\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\nconst BillSearch = ({ location, history }) => {\r\n    const columns = [\r\n        {\r\n            title: 'Bill Id',\r\n            dataIndex: 'billId',\r\n            key: 'billId',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Patient Id',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId'\r\n        },\r\n        {\r\n            title: 'Bill Date',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n        },\r\n        {\r\n            title: 'Bill Total',\r\n            dataIndex: 'totalCost',\r\n            key: 'totalCost',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'paymentStatus',\r\n            key: 'paymentStatus',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <a onClick={() => {\r\n                        history.push({ pathname: '/home/billing', search: '?context=edit' + '&billId=' + record.billId });\r\n                    }}>View/Edit</a>\r\n                    {/* <a onClick={() => {\r\n                        printSingleBill(record);\r\n                    }}>Print</a> */}\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [data, setData] = useState([]);\r\n    const [patientDetails, setPatientDetails] = useState({});\r\n    const [searchCriteria, setSearchFilter] = useState({});\r\n    const [singleBillData, setSingleBillData] = useState({});\r\n    let mainBillViewButton = \"\";\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    const componentRefSingleBillPrint = useRef();\r\n    const handleSingleBillPrint = useReactToPrint({\r\n        content: () => componentRefSingleBillPrint.current,\r\n    });\r\n    useEffect(() => {\r\n        // \r\n    }, []);\r\n\r\n    if (searchCriteria.searchFilter == \"patientId\") {\r\n        console.log(searchCriteria);\r\n        mainBillViewButton = <Button type=\"primary\" onClick={viewMainBill}>View Main Bill</Button>;\r\n    }\r\n\r\n    function viewMainBill() {\r\n        handlePrint();\r\n    }\r\n    function changePatientdetails(patientId) {\r\n        getPatientById(patientId).then(patientDetails => {\r\n            setPatientDetails(patientDetails);\r\n        }).catch(err => {\r\n\r\n        });\r\n    }\r\n\r\n    function onBillSearch(searchValue, searchFilter) {\r\n        getBillDetails(searchValue, searchFilter).then(response => {\r\n            if (response) {\r\n                setSearchFilter({\r\n                    searchFilter: searchFilter,\r\n                    searchValue: searchValue\r\n                });\r\n                if (searchFilter == \"patientId\") {\r\n                    changePatientdetails(searchValue);\r\n                }\r\n\r\n                setData([...response]);\r\n            }\r\n        }).catch(err => {\r\n            notification[\"error\"]({\r\n                message: 'Error',\r\n                description: `Error while searching ${searchFilter} ${searchValue}`,\r\n                duration: 3\r\n            });\r\n        });\r\n    }\r\n    function printSingleBill(billItem) {\r\n        const printSingleObject = {\r\n            finalCharges: {\r\n                totalAmount: 12,\r\n                totalGST: 12,\r\n                totalDiscount: 12\r\n            },\r\n            itemList: [],\r\n            patientDetails: {\r\n\r\n            }\r\n        };\r\n        setSingleBillData(billItem);\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{ display: 'none' }}>\r\n                <MainBillView ref={componentRef} billItemList={data} patientDetails={patientDetails} patientId={searchCriteria.searchValue} />\r\n                {/* <BillPrint ref={componentRef} itemList={billPrintData} finalCharges={finalCharges} patientDetails={patientDetails} billId={billDetails.billId} patientId={queryParams.patientId} /> */}\r\n            </div>\r\n            <Row gutter={24}>\r\n                <Col span={10}>\r\n                    <BillSearchComp onSearch={onBillSearch} />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button type=\"primary\" onClick={() => { history.push({ pathname: '/home/billing' }) }}>Create New bill</Button>\r\n                </Col>\r\n                <Col span={4}>\r\n                    {mainBillViewButton}\r\n                </Col>\r\n            </Row>\r\n            <br /><br />\r\n            <Table columns={columns} dataSource={data} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BillSearch;","import { MedicineBoxOutlined, MenuFoldOutlined, MenuUnfoldOutlined, UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons';\r\nimport { Layout, Menu } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport AddDoctor from '../admin/addDoctor';\r\nimport Appointment from '../appointment';\r\nimport Billing from '../billing';\r\nimport Canteen from '../canteen';\r\nimport CanteenStock from '../canteen/canteenStock';\r\nimport DoctorAppointment from '../doctorAppointment';\r\nimport '../home/home.css';\r\nimport AddMedicine from '../medicine/addMedicine';\r\nimport AddTest from '../medicine/addTest';\r\nimport PackageManagement from '../package';\r\nimport PatientSearch from '../patientSearch';\r\nimport Pharmacy from '../pharmacy';\r\nimport Prescription from '../prescription';\r\nimport Registration from '../registration';\r\nimport HomeScreen from './homescreen';\r\nimport AddNewMedicine from '../pharmacy/addNewMedicine';\r\nimport ManageMedicines from '../pharmacy/manageMedicine';\r\nimport PurchaseOrder from '../pharmacy/purchaseOrderList';\r\nimport NewPurchaseOrder from '../pharmacy/newPurchaseOrder';\r\nimport IndentPreparation from '../pharmacy/indentPreparations';\r\nimport ManageSupplier from '../pharmacy/manageSupplier';\r\nimport IndentList from '../pharmacy/indentPreparations/indentList';\r\nimport Certificates from '../certificates';\r\nimport Package from '../package';\r\nimport NewPackage from '../package/newPackage';\r\nimport InProgress from '../inProgress';\r\nimport ViewPrescription from '../prescription/viewPrescription';\r\nimport { useStateValue } from '../../state';\r\nimport { getRoutes } from '../../routes/routeResolver';\r\nimport { ADMIN, DOCTOR, PHARMACY, RECEPTION, UPCOMING } from '../../utils/roles';\r\nimport BillSearch from '../billSearch';\r\n\r\nconst { Header, Sider, Content, Footer } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Home = ({ location, history, match }) => {\r\n  const path = match.path;\r\n  let realRoutes = [];\r\n  const [{ auth }, dispatch] = useStateValue();\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [itemSelected, setItemSelected] = useState(\"\");\r\n  const [routes, setRoutes] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    // setRoutes(getRoutes([RECEPTION, DOCTOR, ADMIN, PHARMACY, UPCOMING]));\r\n    setRoutes(getRoutes([...auth.roles]));\r\n  }, []);\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n    setItemSelected(\"\");\r\n  };\r\n\r\n  const handleClick = e => {\r\n    setItemSelected(e.key);\r\n  };\r\n\r\n  for (const [roleName, routeList] of Object.entries(routes)) {\r\n    const childroutes = routeList.map(route => {\r\n      return generateRouteObject(route);\r\n    });\r\n    if (auth.roles.length == 1) {\r\n      realRoutes = childroutes;\r\n    } else {\r\n      realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n    }\r\n    // realRoutes = [...realRoutes, subRoutesByRole(childroutes, roleName)];\r\n  }\r\n  function generateRouteObject(routeObject) {\r\n    return <Menu.Item key={routeObject.label}><Link to={`${path}${routeObject.link}`}>{routeObject.label}</Link></Menu.Item>\r\n  }\r\n  function subRoutesByRole(routes, roleName) {\r\n    return <SubMenu key={roleName} icon={<UserOutlined />} title={roleName}>{routes}</SubMenu>\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Sider trigger={null} collapsible collapsed={collapsed}>\r\n        <div className=\"logo\" />\r\n        <Menu onSelect={handleClick} theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n          {realRoutes}\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n          {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n            className: 'trigger',\r\n            onClick: toggle,\r\n          })}\r\n          {itemSelected}\r\n        </Header>\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            margin: '24px 16px',\r\n            padding: 24,\r\n            minHeight: 280,\r\n            overflow: 'auto',\r\n            height: '100vh',\r\n          }}\r\n        >\r\n          <Route exact path=\"/home\" component={HomeScreen} />\r\n          <Route path={`${path}/billing`} component={Billing} />\r\n          <Route path={`${path}/billSearch`} component={BillSearch} />\r\n          <Route path={`${path}/registration`} component={Registration} />\r\n          <Route path={`${path}/patientSearch`} component={PatientSearch} />\r\n          <Route path={`${path}/addDoctor`} component={AddDoctor} />\r\n          <Route path={`${path}/appointment`} component={Appointment} />\r\n          <Route path={`${path}/doctorAppointment`} component={DoctorAppointment} />\r\n          <Route path={`${path}/prescription`} component={Prescription} />\r\n          <Route path={`${path}/addMedicine`} component={AddMedicine} />\r\n          <Route path={`${path}/addTest`} component={AddTest} />\r\n          <Route path={`${path}/packages`} component={PackageManagement} />\r\n          <Route path={`${path}/canteen`} component={Canteen} />\r\n          <Route path={`${path}/canteenStock`} component={CanteenStock} />\r\n          <Route path={`${path}/pharmacy`} component={Pharmacy} />\r\n          <Route path={`${path}/addNewMedicine`} component={AddNewMedicine} />\r\n          <Route path={`${path}/manageMedicines`} component={ManageMedicines} />\r\n          <Route path={`${path}/purchaseOrderList`} component={PurchaseOrder} />\r\n          <Route path={`${path}/newPurchaseOrder`} component={NewPurchaseOrder} />\r\n          <Route path={`${path}/indentPreparation`} component={IndentPreparation} />\r\n          <Route path={`${path}/indentList`} component={IndentList} />\r\n          <Route path={`${path}/certificates`} component={Certificates} />\r\n          <Route path={`${path}/package`} component={Package} />\r\n          <Route path={`${path}/newPackage`} component={NewPackage} />\r\n          <Route path={`${path}/manageSuppliers`} component={ManageSupplier} />\r\n          <Route path={`${path}/inProgress`} component={InProgress} />\r\n          <Route path={`${path}/viewPrescription`} component={ViewPrescription} />\r\n\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>BayMax ©2021</Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { StateProvider } from '../state';\r\nimport { INITIAL_STATE as AUTH_INITIAL_STATE } from '../state/auth/reducers';\r\nimport { INITIAL_STATE as PRODUCT_INITIAL_STATE } from '../state/product/reducers';\r\nimport reducers from '../state/reducers';\r\nimport BaseStyles from './base-styles';\r\nimport PrivateRoute from './private-route';\r\nimport Content from '../components/content';\r\nimport Header from '../components/header';\r\nimport Login from '../views/login';\r\nimport Home from '../views/home';\r\n\r\nconst Root = props => {\r\n  const initialState = {\r\n    auth: AUTH_INITIAL_STATE,\r\n    product: PRODUCT_INITIAL_STATE,\r\n  };\r\n  return (\r\n    <StateProvider initialState={initialState} reducer={reducers}>\r\n      <BaseStyles />\r\n      <Router>\r\n        <>\r\n          <Header />\r\n          <Content>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Login} />\r\n              {/* <PrivateRoute path=\"/home\" component={Home} /> */}\r\n              <Route path=\"/home\" component={Home} />\r\n            </Switch>\r\n          </Content>\r\n        </>\r\n      </Router>\r\n    </StateProvider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Root from './routes';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nrender(<Root />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.e8f986ac.jpg\";"],"sourceRoot":""}